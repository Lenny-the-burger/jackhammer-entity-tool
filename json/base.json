{
  "includes": [],
  "entities": [
    {
      "name": "Angles",
      "type": "BaseClass",
      "properties": [
        {
          "type": "angle",
          "name": "angles",
          "title": "Pitch Yaw Roll (Y Z X)",
          "description": "This entity's orientation in the world. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, roll is the rotation around the X axis.",
          "deflt": "0 0 0"
        }
      ]
    },
    {
      "name": "GMODSandbox",
      "type": "BaseClass",
      "properties": [
        {
          "type": "choices",
          "name": "gmod_allowphysgun",
          "title": "Allow Physics Gun",
          "description": "If set, players cannot use Physics Gun on this entity.",
          "deflt": 1,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "string",
          "name": "gmod_allowtools",
          "title": "Sandbox Tool Whitelist",
          "description": "If set, only given tools can be used on this entity.\\nYou need to supply the tool class names, the names of the .lua files of those tools.\\nThis also includes the context menu properties!",
          "deflt": ""
        }
      ]
    },
    {
      "name": "GMODLightOrigin",
      "type": "BaseClass",
      "properties": [
        {
          "type": "target_destination",
          "name": "lightingorigin",
          "title": "Lighting Origin",
          "description": "Select a info_lighting entity to specify a location to sample lighting from, instead of using this entity's origin.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "lightingoriginhack",
          "title": "Lighting Origin (Relative)",
          "description": "Select an info_lighting_relative to specify a location to sample lighting from, instead of using this entity's origin.",
          "deflt": ""
        }
      ],
      "inputs": [
        {
          "name": "SetLightingOrigin",
          "description": "Sets the lighting origin entity. This will make this entity sample lighting from the given entity's position",
          "type": "target_destination"
        },
        {
          "name": "SetLightingOriginHack",
          "description": "Sets the relative lighting origin entity. This will make this entity sample lighting from the given entity's position",
          "type": "target_destination"
        }
      ]
    },
    {
      "name": "GMODModelScale",
      "type": "BaseClass",
      "properties": [
        {
          "type": "float",
          "name": "modelscale",
          "title": "Model Scale",
          "description": "Scales the model by precentage given. 1 = 100%, 0.5 = 50%, 2 = 200%, etc.",
          "deflt": "1.0"
        }
      ],
      "inputs": [
        {
          "name": "SetModelScale",
          "description": "Scales the model by precentage given. 1 = 100%, 0.5 = 50%, 2 = 200%, etc.",
          "type": "float"
        }
      ]
    },
    {
      "name": "Origin",
      "type": "BaseClass",
      "properties": [
        {
          "type": "origin",
          "name": "origin",
          "title": "Origin (X Y Z)",
          "description": "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
        }
      ]
    },
    {
      "name": "Studiomodel",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "GMODSandbox"
          ]
        }
      ],
      "properties": [
        {
          "type": "studio",
          "name": "model",
          "title": "World Model"
        },
        {
          "type": "integer",
          "name": "skin",
          "title": "Skin",
          "description": "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "disableshadows",
          "title": "Disable Shadows",
          "description": "Used to disable dynamic shadows on this entity.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "Skin",
          "description": "Changes the model skin to the specified number.",
          "type": "integer"
        },
        {
          "name": "DisableShadow",
          "description": "Turn shadow off.",
          "type": "void"
        },
        {
          "name": "EnableShadow",
          "description": "Turn shadow on.",
          "type": "void"
        },
        {
          "name": "AlternativeSorting",
          "description": "Used to attempt to fix sorting problems when rendering. True activates, false deactivates",
          "type": "bool"
        }
      ],
      "outputs": [
        {
          "name": "OnIgnite",
          "description": "Fired when this object catches fire.",
          "type": "void"
        }
      ]
    },
    {
      "name": "BasePlat",
      "type": "BaseClass",
      "inputs": [
        {
          "name": "Toggle",
          "description": "Toggles the platform's state.",
          "type": "void"
        },
        {
          "name": "GoUp",
          "description": "Tells the platform to go up.",
          "type": "void"
        },
        {
          "name": "GoDown",
          "description": "Tells the platform to go down.",
          "type": "void"
        }
      ]
    },
    {
      "name": "Targetname",
      "type": "BaseClass",
      "properties": [
        {
          "type": "target_source",
          "name": "targetname",
          "title": "Name",
          "description": "The name that other entities refer to this entity by."
        }
      ],
      "inputs": [
        {
          "name": "Kill",
          "description": "Removes this entity from the world.",
          "type": "void"
        },
        {
          "name": "KillHierarchy",
          "description": "Removes this entity and all its children from the world.",
          "type": "void"
        },
        {
          "name": "AddOutput",
          "description": "Adds an entity I/O connection to this entity. Format: <output name> <targetname>:<inputname>:<parameter>:<delay>:<max times to fire (-1 == infinite)>. Very dangerous, use with care.",
          "type": "string"
        },
        {
          "name": "FireUser1",
          "description": "Causes this entity's OnUser1 output to be fired.",
          "type": "void"
        },
        {
          "name": "FireUser2",
          "description": "Causes this entity's OnUser2 output to be fired.",
          "type": "void"
        },
        {
          "name": "FireUser3",
          "description": "Causes this entity's OnUser3 output to be fired.",
          "type": "void"
        },
        {
          "name": "FireUser4",
          "description": "Causes this entity's OnUser4 output to be fired.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnUser1",
          "description": "Fired in response to FireUser1 input.",
          "type": "void"
        },
        {
          "name": "OnUser2",
          "description": "Fired in response to FireUser2 input.",
          "type": "void"
        },
        {
          "name": "OnUser3",
          "description": "Fired in response to FireUser3 input.",
          "type": "void"
        },
        {
          "name": "OnUser4",
          "description": "Fired in response to FireUser4 input.",
          "type": "void"
        }
      ]
    },
    {
      "name": "Parentname",
      "type": "BaseClass",
      "properties": [
        {
          "type": "target_destination",
          "name": "parentname",
          "title": "Parent",
          "description": "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
        }
      ],
      "inputs": [
        {
          "name": "SetParent",
          "description": "Changes the entity's parent in the movement hierarchy.",
          "type": "string"
        },
        {
          "name": "SetParentAttachment",
          "description": "Change this entity to attach to a specific attachment point on its parent. Entities must be parented before being sent this input. The parameter passed in should be the name of the attachment.",
          "type": "string"
        },
        {
          "name": "SetParentAttachmentMaintainOffset",
          "description": "Change this entity to attach to a specific attachment point on it's parent. Entities must be parented before being sent this input. The parameter passed in should be the name of the attachment. The entity will maintain it's position relative to the parent at the time it is attached.",
          "type": "string"
        },
        {
          "name": "ClearParent",
          "description": "Removes this entity from the the movement hierarchy, leaving it free to move independently.",
          "type": "void"
        }
      ]
    },
    {
      "name": "BaseBrush",
      "type": "BaseClass",
      "inputs": [
        {
          "name": "SetTextureIndex",
          "description": "Used by HL1Port. Sets the brush texture index. Use a material_modify_control entity instead.",
          "type": "integer"
        },
        {
          "name": "IncrementTextureIndex",
          "description": "Used by HL1Port. Increments the brush texture index. Use a material_modify_control entity instead.",
          "type": "void"
        }
      ]
    },
    {
      "name": "EnableDisable",
      "type": "BaseClass",
      "properties": [
        {
          "type": "choices",
          "name": "StartDisabled",
          "title": "Start Disabled",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "Enable",
          "description": "Enable this entity.",
          "type": "void"
        },
        {
          "name": "Disable",
          "description": "Disable this entity.",
          "type": "void"
        }
      ]
    },
    {
      "name": "RenderFxChoices",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "GMODSandbox"
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "renderfx",
          "title": "Render FX",
          "deflt": 0,
          "choices": {
            "0": "Normal",
            "1": "Slow Pulse",
            "2": "Fast Pulse",
            "3": "Slow Wide Pulse",
            "4": "Fast Wide Pulse",
            "5": "Slow Fade Away",
            "6": "Fast Fade Away",
            "7": "Slow Become Solid",
            "8": "Fast Become Solid",
            "9": "Slow Strobe",
            "10": "Fast Strobe",
            "11": "Faster Strobe",
            "12": "Slow Flicker",
            "13": "Fast Flicker",
            "14": "Constant Glow",
            "15": "Distort",
            "16": "Hologram (Distort + fade)",
            "23": "Cull By Distance (TEST)",
            "24": "Spotlight FX",
            "26": "Fade Near"
          }
        }
      ]
    },
    {
      "name": "Shadow",
      "type": "BaseClass",
      "properties": [
        {
          "type": "choices",
          "name": "disableshadows",
          "title": "Disable shadows",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "DisableShadow",
          "description": "Turn shadow off.",
          "type": "void"
        },
        {
          "name": "EnableShadow",
          "description": "Turn shadow on.",
          "type": "void"
        }
      ]
    },
    {
      "name": "RenderFields",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "RenderFxChoices"
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "rendermode",
          "title": "Render Mode",
          "description": "Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'.",
          "deflt": 0,
          "choices": {
            "0": "Normal",
            "1": "Color",
            "2": "Texture",
            "3": "Glow",
            "4": "Solid",
            "5": "Additive",
            "7": "Additive Fractional Frame",
            "9": "World Space Glow",
            "10": "Dont Render"
          }
        },
        {
          "type": "integer",
          "name": "renderamt",
          "title": "FX Amount (0 - 255)",
          "description": "The FX amount is used by the selected Render Mode.",
          "deflt": 255
        },
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "FX Color (R G B)",
          "description": "The FX color is used by the selected Render Mode.",
          "deflt": "255 255 255"
        },
        {
          "type": "choices",
          "name": "disablereceiveshadows",
          "title": "Disable Receiving Shadows",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "Alpha",
          "description": "Set the sprite's alpha (0 - 255).",
          "type": "integer"
        },
        {
          "name": "Color",
          "description": "Set the sprite's color (R G B).",
          "type": "color255"
        }
      ]
    },
    {
      "name": "DXLevelChoice",
      "type": "BaseClass",
      "properties": [
        {
          "type": "choices",
          "name": "mindxlevel",
          "title": "Minimum DX Level",
          "deflt": 0,
          "choices": {
            "0": "default (lowest)",
            "70": "dx7",
            "80": "dx8.0 (4600Ti)",
            "81": "dx8.1 (FX5200)",
            "90": "dx9 SM2.0",
            "95": "dx9 SM3.0"
          }
        },
        {
          "type": "choices",
          "name": "maxdxlevel",
          "title": "Maximum DX Level",
          "deflt": 0,
          "choices": {
            "0": "default (highest)",
            "60": "dx6",
            "70": "dx7",
            "80": "dx8.0 (4600Ti)",
            "81": "dx8.1 (FX5200)",
            "90": "dx9 SM2.0",
            "95": "dx9 SM3.0"
          }
        }
      ]
    },
    {
      "name": "Inputfilter",
      "type": "BaseClass",
      "properties": [
        {
          "type": "choices",
          "name": "InputFilter",
          "title": "Input Filter",
          "description": "Used to specify which inputs this entity will accept.",
          "deflt": 0,
          "choices": {
            "0": "Allow all inputs",
            "8": "Ignore Touch/Untouch",
            "16": "Ignore Use",
            "32": "Ignore All"
          }
        }
      ]
    },
    {
      "name": "Global",
      "type": "BaseClass",
      "properties": [
        {
          "type": "string",
          "name": "globalname",
          "title": "Global Entity Name",
          "description": "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state.",
          "deflt": ""
        }
      ]
    },
    {
      "name": "EnvGlobal",
      "type": "BaseClass",
      "description": "An entity to control a global game state, with an optional associated counter, that persists across level transitions.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "initialstate",
          "title": "Initial State",
          "deflt": 0,
          "choices": {
            "0": "Off",
            "1": "On",
            "2": "Dead"
          }
        },
        {
          "type": "integer",
          "name": "counter",
          "title": "Counter",
          "description": "An integer counter value associated with this global.",
          "deflt": 0
        }
      ],
      "flags": [
        {
          "title": "Set Initial State",
          "value": 1,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Set state of global to ON.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Set state of global to OFF.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggles state of global between ON and OFF.",
          "type": "void"
        },
        {
          "name": "Remove",
          "description": "Set state of global to DEAD.",
          "type": "void"
        },
        {
          "name": "SetCounter",
          "description": "Sets the counter value of this global.",
          "type": "integer"
        },
        {
          "name": "AddToCounter",
          "description": "Adds to the counter value of this global. Negative numbers subtract.",
          "type": "integer"
        },
        {
          "name": "GetCounter",
          "description": "Causes the Counter output to be fired, passing the current counter value for this global.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "Counter",
          "description": "Fired in response to the GetCounter input, passing the current value of the counter.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "DamageFilter",
      "type": "BaseClass",
      "properties": [
        {
          "type": "target_destination",
          "name": "damagefilter",
          "title": "Damage Filter",
          "description": "Name of the filter entity that controls which entities can damage us.",
          "deflt": ""
        }
      ],
      "inputs": [
        {
          "name": "SetDamageFilter",
          "description": "Sets the entity to use as damage filter. Pass in an empty string to clear the damage filter.",
          "type": "string"
        }
      ]
    },
    {
      "name": "ResponseContext",
      "type": "BaseClass",
      "inputs": [
        {
          "name": "AddContext",
          "description": "Adds a context to this entity's list of response contexts. The format should be 'key:value'.",
          "type": "string"
        },
        {
          "name": "RemoveContext",
          "description": "Remove a context from this entity's list of response contexts. The name should match the 'key' of a previously added context.",
          "type": "string"
        },
        {
          "name": "ClearContext",
          "description": "Removes all contexts in this entity's list of response contexts.",
          "type": "void"
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "ResponseContext",
          "title": "Response Contexts",
          "description": "Response system context(s) for this entity. Format should be: 'key:value,key2:value2,etc'. When this entity speaks, the list of keys & values will be passed to the response rules system.",
          "deflt": ""
        }
      ]
    },
    {
      "name": "Breakable",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "DamageFilter",
            "Shadow",
            "GMODSandbox",
            "GMODModelScale"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "ExplodeDamage",
          "title": "Explosion Damage",
          "description": "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "ExplodeRadius",
          "title": "Explosion Radius",
          "description": "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'.",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "PerformanceMode",
          "title": "Performance Mode",
          "description": "Used to limit the amount of gibs produced when this entity breaks, for performance reasons.",
          "deflt": 0,
          "choices": {
            "0": "Normal",
            "1": "No Gibs",
            "2": "Full Gibs on All Platforms",
            "3": "Reduced gibs"
          }
        },
        {
          "type": "string",
          "name": "BreakModelMessage",
          "title": "Break Model Message",
          "description": "If set, will use this break model message instead of the normal break behavior.",
          "deflt": ""
        }
      ],
      "inputs": [
        {
          "name": "Break",
          "description": "Breaks the breakable.",
          "type": "void"
        },
        {
          "name": "SetHealth",
          "description": "Sets a new value for the breakable's health. If the breakable's health reaches zero it will break.",
          "type": "integer"
        },
        {
          "name": "AddHealth",
          "description": "Adds health to the breakable. If the breakable's health reaches zero it will break.",
          "type": "integer"
        },
        {
          "name": "RemoveHealth",
          "description": "Removes health from the breakable. If the breakable's health reaches zero it will break.",
          "type": "integer"
        },
        {
          "name": "EnablePhyscannonPickup",
          "description": "Makes the breakable able to picked up by the Gravity Gun.",
          "type": "void"
        },
        {
          "name": "DisablePhyscannonPickup",
          "description": "Makes the breakable not able to picked up by the Gravity Gun.",
          "type": "void"
        },
        {
          "name": "SetMass",
          "description": "Set mass of this object.",
          "type": "float"
        }
      ],
      "outputs": [
        {
          "name": "OnBreak",
          "description": "Fired when this breakable breaks.",
          "type": "void"
        },
        {
          "name": "OnTakeDamage",
          "description": "Fired each time this breakable takes any damage.",
          "type": "void"
        },
        {
          "name": "OnHealthChanged",
          "description": "Fired when the health of this breakable changes, passing the new value of health as a percentage of max health, from [0..1].",
          "type": "float"
        },
        {
          "name": "OnPhysCannonDetach",
          "description": "Fired when the Gravity Gun has ripped this breakable off of the wall. Only fired if ACT_PHYSCANNON_DETACH is defined in the model this breakable is using.",
          "type": "void"
        },
        {
          "name": "OnPhysCannonAnimatePreStarted",
          "description": "Fired when this prop starts playing the Pre Gravity Gun-pull activity, caused by the player trying to grab this prop with the Gravity Gun. Only fired if the ACT_PHYSCANNON_ANIMATE_PRE activity is defined in the model this breakable is using.",
          "type": "void"
        },
        {
          "name": "OnPhysCannonAnimatePullStarted",
          "description": "Fired when this prop starts playing the Gravity Gun-pull activity, caused by the player trying to grab this prop with the Gravity Gun. Only fired if the ACT_PHYSCANNON_ANIMATE activity is defined in the model this breakable is using. If the prop has Pre pull anim, this will be fired after the Pre anim has finished playing.",
          "type": "void"
        },
        {
          "name": "OnPhysCannonPullAnimFinished",
          "description": "Fired when this prop has finished playing the Gravity Gun-pull activity, caused by the player trying to grab this prop with the Gravity Gun. Only fired if the ACT_PHYSCANNON_ANIMATE activity is defined in the model this breakable is using. If the prop has Pre & Post pull anims, this will be fired after the Post anim has finished playing.",
          "type": "void"
        },
        {
          "name": "OnPhysCannonAnimatePostStarted",
          "description": "Fired when this prop starts playing the Post Gravity Gun-pull activity. Only fired if the ACT_PHYSCANNON_ANIMATE_POST activity is defined in the model this breakable is using.",
          "type": "void"
        }
      ]
    },
    {
      "name": "BreakableBrush",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Breakable",
            "Parentname",
            "Global"
          ]
        }
      ],
      "flags": [
        {
          "title": "Only Break on Trigger",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Break on Touch",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Break on Pressure",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Break immediately on Physics",
          "value": 512,
          "enabled": false
        },
        {
          "title": "Don't take physics damage",
          "value": 1024,
          "enabled": false
        },
        {
          "title": "Don't allow bullet penetration",
          "value": 2048,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "propdata",
          "title": "Prop Data",
          "description": "Set to the best approximation of the size and material of this entity's brushes. If set, it will override this entity's health and damage taken from various weapons. See the propdata.txt file in the scripts directory of your MOD to get a detailed list of what each entry specifies.",
          "deflt": 0,
          "choices": {
            "0": "None",
            "1": "Wooden.Tiny",
            "2": "Wooden.Small",
            "3": "Wooden.Medium",
            "4": "Wooden.Large",
            "5": "Wooden.Huge",
            "6": "Metal.Small",
            "7": "Metal.Medium",
            "8": "Metal.Large",
            "9": "Cardboard.Small",
            "10": "Cardboard.Medium",
            "11": "Cardboard.Large",
            "12": "Stone.Small",
            "13": "Stone.Medium",
            "14": "Stone.Large",
            "15": "Stone.Huge",
            "16": "Glass.Small",
            "17": "Plastic.Small",
            "18": "Plastic.Medium",
            "19": "Plastic.Large",
            "20": "Pottery.Small",
            "21": "Pottery.Medium",
            "22": "Pottery.Large",
            "23": "Pottery.Huge",
            "24": "Glass.Window"
          }
        },
        {
          "type": "integer",
          "name": "health",
          "title": "Strength",
          "description": "Number of points of damage to take before breaking. 0 means don't break.",
          "deflt": 1
        },
        {
          "type": "choices",
          "name": "material",
          "title": "Material Type",
          "description": "Set to the material type of the brush. Used to decide what sounds to make when damaged, and what gibs to produce when broken.",
          "deflt": 0,
          "choices": {
            "0": "Glass",
            "1": "Wood",
            "2": "Metal",
            "3": "Flesh",
            "4": "CinderBlock",
            "5": "Ceiling Tile",
            "6": "Computer",
            "7": "Unbreakable Glass",
            "8": "Rocks",
            "10": "None"
          }
        },
        {
          "type": "choices",
          "name": "explosion",
          "title": "Gibs Direction",
          "description": "Used to decide which direction to throw gibs when broken.",
          "deflt": 0,
          "choices": {
            "0": "Random",
            "1": "Relative to Attack",
            "2": "Use Precise Gib Dir"
          }
        },
        {
          "type": "angle",
          "name": "gibdir",
          "title": "Precise Gib Direction",
          "description": "Specifies the direction to throw gibs when this breakable breaks. Be sure to select Use Precise Gib Dir in the Gibs Direction field!",
          "deflt": "0 0 0"
        },
        {
          "type": "choices",
          "name": "nodamageforces",
          "title": "Damaging it Doesn't Push It",
          "description": "Used to determine whether or not damage should cause the brush to move.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "string",
          "name": "gibmodel",
          "title": "Gib Model",
          "description": "Used by HL1Port to specify a custom gib model to break into, overriding the 'Material Type'.",
          "deflt": ""
        },
        {
          "type": "choices",
          "name": "spawnobject",
          "title": "Spawn On Break",
          "description": "When broken, an entity of the selected type will be created.",
          "deflt": 0,
          "choices": {
            "1": "item_battery",
            "2": "item_healthkit",
            "3": "item_ammo_pistol",
            "4": "item_ammo_pistol_large",
            "5": "item_ammo_smg1",
            "6": "item_ammo_smg1_large",
            "7": "item_ammo_ar2",
            "8": "item_ammo_ar2_large",
            "9": "item_box_buckshot",
            "10": "item_flare_round",
            "11": "item_box_flare_rounds",
            "12": "item_ml_grenade",
            "13": "item_smg1_grenade",
            "14": "item_box_sniper_rounds",
            "15": "unused1",
            "16": "weapon_stunstick",
            "17": "weapon_ar1",
            "18": "weapon_ar2",
            "19": "unused2",
            "20": "weapon_ml",
            "21": "weapon_smg1",
            "22": "weapon_smg2",
            "23": "weapon_slam",
            "24": "weapon_shotgun",
            "25": "weapon_molotov",
            "26": "item_dynamic_resupply"
          }
        },
        {
          "type": "integer",
          "name": "explodemagnitude",
          "title": "Explode Magnitude",
          "description": "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "pressuredelay",
          "title": "Pressure Delay",
          "description": "Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).",
          "deflt": 0
        }
      ],
      "inputs": [
        {
          "name": "EnableDamageForces",
          "description": "Damaging the entity applies physics forces to it.",
          "type": "void"
        },
        {
          "name": "DisableDamageForces",
          "description": "Damaging the entity does *not* apply physics forces to it.",
          "type": "void"
        }
      ]
    },
    {
      "name": "BreakableProp",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Breakable"
          ]
        }
      ],
      "flags": [
        {
          "title": "Break on Touch",
          "value": 16,
          "enabled": false
        },
        {
          "title": "Break on Pressure",
          "value": 32,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "pressuredelay",
          "title": "Pressure Delay",
          "description": "Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart).",
          "deflt": 0
        }
      ]
    },
    {
      "name": "BaseNPC",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles",
            "RenderFields",
            "DamageFilter",
            "ResponseContext",
            "Shadow",
            "GMODSandbox",
            "GMODLightOrigin",
            "GMODModelScale"
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            200,
            200
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Target Path Corner",
          "description": "If set, the name of a path corner entity that this NPC will walk to, after spawning."
        },
        {
          "type": "string",
          "name": "squadname",
          "title": "Squad Name",
          "description": "NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other."
        },
        {
          "type": "string",
          "name": "hintgroup",
          "title": "Hint Group",
          "description": "Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC.",
          "deflt": ""
        },
        {
          "type": "choices",
          "name": "hintlimiting",
          "title": "Hint Limit Nav",
          "description": "Limits NPC to using specified hint group for navigation requests, but does not limit local navigation.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "sleepstate",
          "title": "Sleep State",
          "description": "Holds the NPC in stasis until specified condition. See also 'Wake Radius' and 'Wake Squad'.",
          "deflt": 0,
          "choices": {
            "0": "None",
            "1": "Waiting for threat",
            "2": "Waiting for PVS",
            "3": "Waiting for input, ignore PVS",
            "4": "Auto PVS",
            "5": "Auto PVS after PVS"
          }
        },
        {
          "type": "float",
          "name": "wakeradius",
          "title": "Wake Radius",
          "description": "Auto-wake if player within this distance",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "wakesquad",
          "title": "Wake Squad",
          "description": "Wake all of the NPCs squadmates if the NPC is woken",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "target_destination",
          "name": "enemyfilter",
          "title": "Enemy Filter",
          "description": "Filter by which to filter potential enemies",
          "deflt": ""
        },
        {
          "type": "choices",
          "name": "ignoreunseenenemies",
          "title": "Ignore unseen enemies",
          "description": "Prefer visible enemies, regardless of distance or relationship priority",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "float",
          "name": "physdamagescale",
          "title": "Physics Impact Damage Scale",
          "description": "Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics.",
          "deflt": "1.0"
        }
      ],
      "flags": [
        {
          "title": "Wait Till Seen",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Gag (No IDLE sounds until angry)",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Fall to ground (unchecked means *teleport* to ground)",
          "value": 4,
          "enabled": true
        },
        {
          "title": "Drop Healthkit",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Efficient - Don't acquire enemies or avoid obstacles",
          "value": 16,
          "enabled": false
        },
        {
          "title": "Wait For Script",
          "value": 128,
          "enabled": false
        },
        {
          "title": "Long Visibility/Shoot",
          "value": 256,
          "enabled": false
        },
        {
          "title": "Fade Corpse",
          "value": 512,
          "enabled": true
        },
        {
          "title": "Think outside PVS",
          "value": 1024,
          "enabled": false
        },
        {
          "title": "Template NPC (used by npc_maker, will not spawn)",
          "value": 2048,
          "enabled": false
        },
        {
          "title": "Do Alternate collision for this NPC (player avoidance)",
          "value": 4096,
          "enabled": false
        },
        {
          "title": "Don't drop weapons",
          "value": 8192,
          "enabled": false
        },
        {
          "title": "Ignore player push (dont give way to player)",
          "value": 16384,
          "enabled": false
        }
      ],
      "outputs": [
        {
          "name": "OnDamaged",
          "description": "Fired when this NPC takes damage.",
          "type": "void"
        },
        {
          "name": "OnDeath",
          "description": "Fired when this NPC is killed.",
          "type": "void"
        },
        {
          "name": "OnHalfHealth",
          "description": "Fired when this NPC reaches half of its maximum health.",
          "type": "void"
        },
        {
          "name": "OnHearWorld",
          "description": "Fired when this NPC hears a sound (other than combat or the player).",
          "type": "void"
        },
        {
          "name": "OnHearPlayer",
          "description": "Fired when this NPC hears the player.",
          "type": "void"
        },
        {
          "name": "OnHearCombat",
          "description": "Fired when this NPC hears combat sounds.",
          "type": "void"
        },
        {
          "name": "OnFoundEnemy",
          "description": "Fired when this NPC establishes line of sight to its enemy (outputs entity).",
          "type": "string"
        },
        {
          "name": "OnLostEnemyLOS",
          "description": "Fired when this NPC loses line of sight to its enemy.",
          "type": "void"
        },
        {
          "name": "OnLostEnemy",
          "description": "Fired when this NPC loses its enemy. Usually due to the enemy being killed/removed, or because this NPC has selected a newer, more dangerous enemy.",
          "type": "void"
        },
        {
          "name": "OnFoundPlayer",
          "description": "Fired when this NPC establishes line of sight to its enemy, and that enemy is a player (outputs player entity).",
          "type": "string"
        },
        {
          "name": "OnLostPlayerLOS",
          "description": "Fired when this NPC loses line of sight to its enemy, and that enemy is a player.",
          "type": "void"
        },
        {
          "name": "OnLostPlayer",
          "description": "Fired when this NPC loses its enemy, and that enemy was a player. Usually due to the enemy being killed/removed, or because this NPC has selected a newer, more dangerous enemy.",
          "type": "void"
        },
        {
          "name": "OnDamagedByPlayer",
          "description": "Fired when this NPC is hurt by a player.",
          "type": "void"
        },
        {
          "name": "OnDamagedByPlayerSquad",
          "description": "Fired when this NPC is hurt by a player OR by one of the player's squadmates.",
          "type": "void"
        },
        {
          "name": "OnDenyCommanderUse",
          "description": "Fired when this NPC has refused to join the player's squad.",
          "type": "void"
        },
        {
          "name": "OnSleep",
          "description": "Fired when this NPC enters a sleep state.",
          "type": "void"
        },
        {
          "name": "OnWake",
          "description": "Fired when this NPC comes out of a sleep state.",
          "type": "void"
        },
        {
          "name": "OnForcedInteractionStarted",
          "description": "Fired when the NPC starts a forced interaction.",
          "type": "void"
        },
        {
          "name": "OnForcedInteractionAborted",
          "description": "Fired when the NPC aborts a forced interaction for some reason (target NPC died, couldn't be pathed to, etc)",
          "type": "void"
        },
        {
          "name": "OnForcedInteractionFinished",
          "description": "NPCs in actbusies can no longer perform dynamic interactions.",
          "type": "void"
        }
      ],
      "inputs": [
        {
          "name": "SetRelationship",
          "description": "Changes this entity's relationship with another entity or class. Format: <entityname/classname> <D_HT/D_FR/D_LI/D_NU> <priority>",
          "type": "string"
        },
        {
          "name": "SetEnemyFilter",
          "description": "Changes this NPC's enemy filter to the named filter.",
          "type": "string"
        },
        {
          "name": "SetHealth",
          "description": "Set this NPC's health.",
          "type": "integer"
        },
        {
          "name": "SetBodyGroup",
          "description": "HACK: Sets this NPC's body group (from 0 - n). You'd better know what you are doing!",
          "type": "integer"
        },
        {
          "name": "physdamagescale",
          "description": "Sets the value that scales damage energy when this character is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.",
          "type": "float"
        },
        {
          "name": "Ignite",
          "description": "Ignite, burst into flames",
          "type": "void"
        },
        {
          "name": "IgniteLifetime",
          "description": "Ignite, with a parameter lifetime.",
          "type": "float"
        },
        {
          "name": "IgniteNumHitboxFires",
          "description": "Ignite, with a parameter number of hitbox fires.",
          "type": "integer"
        },
        {
          "name": "IgniteHitboxFireScale",
          "description": "Ignite, with a parameter hitbox fire scale.",
          "type": "float"
        },
        {
          "name": "Break",
          "description": "Break, smash into pieces",
          "type": "void"
        },
        {
          "name": "StartScripting",
          "description": "Enter scripting state. In this state, NPCs ignore a variety of stimulus that would make them break out of their scripts: They ignore danger sounds, ignore +USE, don't idle speak or respond to other NPC's idle speech, and so on.",
          "type": "void"
        },
        {
          "name": "StopScripting",
          "description": "Exit scripting state.",
          "type": "void"
        },
        {
          "name": "SetSquad",
          "description": "Set the name of this NPC's squad. It will be removed from any existing squad automatically. Leaving the parameter blank will remove the NPC from any existing squad.",
          "type": "string"
        },
        {
          "name": "Wake",
          "description": "Wakes up the NPC if it is sleeping.",
          "type": "void"
        },
        {
          "name": "ForgetEntity",
          "description": "Clears out the NPC's knowledge of a named entity.",
          "type": "string"
        },
        {
          "name": "GagEnable",
          "description": "Turn on the NPC Gag flag. NPC won't speak outside of choreographed scenes.",
          "type": "void"
        },
        {
          "name": "GagDisable",
          "description": "Turn off the NPC Gag flag.",
          "type": "void"
        },
        {
          "name": "IgnoreDangerSounds",
          "description": "Ignore danger sounds for the specified number of seconds.",
          "type": "float"
        },
        {
          "name": "HolsterWeapon",
          "description": "Force the NPC to holster their weapon. Ignored if the NPC is scripting, if the NPC's weapon is already holstered, or if the NPC doesn't use weapons.",
          "type": "void"
        },
        {
          "name": "HolsterAndDestroyWeapon",
          "description": "Identical to HolsterWeapon, except the weapon is destroyed once it has been holstered and concealed.",
          "type": "void"
        },
        {
          "name": "UnholsterWeapon",
          "description": "Force the NPC to draw their weapon. Ignored if the NPC is scripting, if the NPC's weapon is already drawn, or if the NPC doesn't use weapons.",
          "type": "void"
        },
        {
          "name": "ForceInteractionWithNPC",
          "description": "Force the NPC to use a dynamic interaction with another NPC. Parameter format: <target NPC name> <dynamic interaction name>",
          "type": "string"
        },
        {
          "name": "UpdateEnemyMemory",
          "description": "Update (or Create) this NPC's memory of an enemy and its location",
          "type": "string"
        },
        {
          "name": "BecomeRagdoll",
          "description": "This NPC will instantly become a ragdoll with ZERO force (just go limp). OnDeath, OnHalfHealth, etc. Outputs will **NOT** BE FIRED.",
          "type": "void"
        },
        {
          "name": "SetMaxLookDistance",
          "description": "GMOD: Sets the maximum look distance for the NPC. Defaults are 2048 and 6000 for long range NPCs.",
          "type": "float"
        }
      ]
    },
    {
      "name": "info_npc_spawn_destination",
      "type": "PointClass",
      "description": "NPC Spawn Destination. (Consult npc_template_maker help for more info)",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/info_target.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "ReuseDelay",
          "title": "Reuse Delay",
          "description": "After an NPC is spawned at this destination, the delay before this destination is eligible for selection again.",
          "deflt": 1
        },
        {
          "type": "string",
          "name": "RenameNPC",
          "title": "New NPC Name",
          "description": "If an NPC spawns at this destination, change that NPC's targetname to this.",
          "deflt": ""
        }
      ],
      "outputs": [
        {
          "name": "OnSpawnNPC",
          "description": "Fired when an NPC spawns at this destination.",
          "type": "void"
        }
      ]
    },
    {
      "name": "BaseNPCMaker",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles",
            "EnableDisable"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/npc_maker.vmt"
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            0,
            255
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "StartDisabled",
          "title": "Start Disabled",
          "deflt": 1,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "integer",
          "name": "MaxNPCCount",
          "title": "Num. of NPCs",
          "description": "Number of NPCs that will spawn before this spawner is exhausted.",
          "deflt": 1
        },
        {
          "type": "string",
          "name": "SpawnFrequency",
          "title": "Frequency",
          "description": "How often (in seconds) a new NPC will be spawned. If set to -1, a new NPC will be made when the last NPC dies.",
          "deflt": "5"
        },
        {
          "type": "integer",
          "name": "MaxLiveChildren",
          "title": "Max Live NPCs",
          "description": "Maximum number of live children allowed at any one time (new ones will not be made until one dies). If set to -1, no limit is applied.",
          "deflt": 5
        }
      ],
      "flags": [
        {
          "title": "Fade Corpse",
          "value": 16,
          "enabled": false
        },
        {
          "title": "Infinite Children",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Do Not Drop",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Don't Spawn While Visible",
          "value": 128,
          "enabled": false
        }
      ],
      "outputs": [
        {
          "name": "OnSpawnNPC",
          "description": "Fired when an NPC is spawned. The activator is the NPC, and the string is the name of the NPC.",
          "type": "string"
        },
        {
          "name": "OnAllSpawned",
          "description": "Fired when the spawned is exhausted (all children have been spawned).",
          "type": "void"
        },
        {
          "name": "OnAllSpawnedDead",
          "description": "Fired when the spawner is exhausted (all children have been spawned) and all spawned children have died.",
          "type": "void"
        },
        {
          "name": "OnAllLiveChildrenDead",
          "description": "Fired when all spawned children have died. This does not mean the spawned is exhausted, so a new child may be spawned any time after this (unless the maker is disabled).",
          "type": "void"
        }
      ],
      "inputs": [
        {
          "name": "Spawn",
          "description": "Spawns an NPC.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggles the spawner enabled/disabled state.",
          "type": "void"
        },
        {
          "name": "Enable",
          "description": "Enables the spawner.",
          "type": "void"
        },
        {
          "name": "Disable",
          "description": "Disables the spawner.",
          "type": "void"
        },
        {
          "name": "AddMaxChildren",
          "description": "Adds to the number of NPCs that can spawn before the spawner is exhausted. If an exhausted spawner is given some children to spawn, it still wont begin spawning until it is re-enabled with the Enable input.",
          "type": "integer"
        },
        {
          "name": "SetMaxChildren",
          "description": "Sets the number of NPCs that can spawn before the spawner is exhausted. If an exhausted spawner is given some children to spawn, it still won't begin spawning until it is re-enabled with the Enable input.",
          "type": "integer"
        },
        {
          "name": "SetMaxLiveChildren",
          "description": "Sets the maximum number of NPCs that can be alive at any one time from this spawner.",
          "type": "integer"
        },
        {
          "name": "SetSpawnFrequency",
          "description": "Sets how often (in seconds) a new NPC will be spawned.",
          "type": "float"
        }
      ]
    },
    {
      "name": "npc_template_maker",
      "type": "PointClass",
      "description": "An entity that creates NPCs. The NPCs it creates are clones of a template NPC. NPCs are spawned around this maker's origin, or at specified destination points.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BaseNPCMaker"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/npc_maker.vmt"
          ]
        }
      ],
      "flags": [
        {
          "title": "Always use radius spawn",
          "value": 256,
          "enabled": false
        },
        {
          "title": "Don't preload template models",
          "value": 512,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "TemplateName",
          "title": "Name of template NPC",
          "description": "Template NPC that this maker should be creating clones of.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "Radius",
          "title": "Radius",
          "description": "Radius around this maker within which NPCs are to be placed. Spawned NPCs will try and find empty space within this radius to spawn.",
          "deflt": 256
        },
        {
          "type": "target_destination",
          "name": "DestinationGroup",
          "title": "Name of Destination Group",
          "description": "If you'd like spawned NPCs to be created at an info_npc_spawn_destination entity, enter the name of that entity here. If you have more than one destination entity by that name, the Destination Criteria will be used to select one from the group."
        },
        {
          "type": "choices",
          "name": "CriterionVisibility",
          "title": "Dest. Criterion: Visible to player?",
          "description": "Should the NPC try to spawn at a destination that the player can see? Only applicable if a Destination Group is being used.",
          "deflt": 2,
          "choices": {
            "0": "Yes",
            "1": "No",
            "2": "Don't Care"
          }
        },
        {
          "type": "choices",
          "name": "CriterionDistance",
          "title": "Dest. Criterion: Distance to player?",
          "description": "Should the NPC try to spawn nearest to or farthest from the player's current location? Only applicable if a Destination Group is being used.",
          "deflt": 2,
          "choices": {
            "0": "Nearest",
            "1": "Farthest",
            "2": "Don't Care"
          }
        },
        {
          "type": "integer",
          "name": "MinSpawnDistance",
          "title": "Minimum spawn distance from player",
          "description": "The spawn destination node distance to the player will have to be further or equal than this value.",
          "deflt": 0
        }
      ],
      "inputs": [
        {
          "name": "SpawnNPCInRadius",
          "description": "Spawn an NPC somewhere within the maker's radius.",
          "type": "void"
        },
        {
          "name": "SpawnNPCInLine",
          "description": "Spawn an NPC somewhere within a line behind the maker.",
          "type": "void"
        },
        {
          "name": "SpawnMultiple",
          "description": "Spawn multiple NPCs (uses destination group, else radius).",
          "type": "integer"
        },
        {
          "name": "ChangeDestinationGroup",
          "description": "Switch to a different set of Destination entities.",
          "type": "string"
        },
        {
          "name": "SetMinimumSpawnDistance",
          "description": "Set the minimum spawn distance from player to destination node.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "BaseHelicopter",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BaseNPC"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "InitialSpeed",
          "title": "Initial Speed",
          "description": "Sets the helicopter's desired speed that it should try to reach as soon as it's spawned.",
          "deflt": "0"
        },
        {
          "type": "target_destination",
          "name": "target",
          "title": "Target path_track",
          "description": "(Optional) The name of a path_track entity that this NPC will fly to after spawning."
        }
      ],
      "inputs": [
        {
          "name": "MoveTopSpeed",
          "description": "The helicopter will immediately move at top speed toward its current goal, or in its current orientation if it's on top of its goal.",
          "type": "void"
        },
        {
          "name": "MoveSpecifiedSpeed",
          "description": "The helicopter will immediately move at the specified speed (you provide this as parameter override in units per second) towards its current goal.",
          "type": "float"
        },
        {
          "name": "ChangePathCorner",
          "description": "Tell the helicopter to move to a path corner on a new path.",
          "type": "target_destination"
        },
        {
          "name": "SelfDestruct",
          "description": "Self Destruct.",
          "type": "void"
        },
        {
          "name": "Activate",
          "description": "Activate. Use to wake up a helicopter that spawned with the 'Await Input' spawnflag on.",
          "type": "void"
        },
        {
          "name": "SetTrack",
          "description": "Set a track for the helicopter to adhere to. The helicopter will do nothing if he's on the same path, and will move to the closest point on the specified track if he's on a different path.",
          "type": "target_destination"
        },
        {
          "name": "FlyToSpecificTrackViaPath",
          "description": "The helicopter will first fly to the closest point on the path if he's on a different path. Then he'll fly along the path to the specified track point.",
          "type": "target_destination"
        },
        {
          "name": "StartPatrol",
          "description": "Start patrolling back and forth along the current track.",
          "type": "void"
        },
        {
          "name": "StopPatrol",
          "description": "Stop patrolling back and forth along the track. This will cause the helicopter to come to rest at the track which he's currently flying toward.",
          "type": "void"
        },
        {
          "name": "ChooseFarthestPathPoint",
          "description": "When tracking an enemy, choose the point on the path furthest from the enemy, but still in firing range.",
          "type": "void"
        },
        {
          "name": "ChooseNearestPathPoint",
          "description": "When tracking an enemy, choose the point on the path nearest from the enemy.",
          "type": "void"
        },
        {
          "name": "StartBreakableMovement",
          "description": "The helicopter is now allowed to disobey direct commands to go to particular points if he senses an enemy. He will move to the closest point (or farthest point, if ChooseFarthestPathPoint is used), on the path if he senses an enemy.",
          "type": "void"
        },
        {
          "name": "StopBreakableMovement",
          "description": "The helicopter can not disobey direct commands. He will continue to fly along his patrol path or to his specified target even if he senses an enemy.",
          "type": "void"
        }
      ],
      "flags": [
        {
          "title": "No Rotorwash",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Await Input",
          "value": 64,
          "enabled": false
        }
      ]
    },
    {
      "name": "PlayerClass",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "color",
          "values": [
            0,
            255,
            0
          ]
        }
      ]
    },
    {
      "name": "Light",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "color",
          "values": [
            180,
            10,
            180
          ]
        }
      ],
      "properties": [
        {
          "type": "color255",
          "name": "_light",
          "title": "Brightness",
          "deflt": "255 255 255 200"
        },
        {
          "type": "color255",
          "name": "_lightHDR",
          "title": "BrightnessHDR",
          "deflt": "-1 -1 -1 1"
        },
        {
          "type": "float",
          "name": "_lightscaleHDR",
          "title": "BrightnessScaleHDR",
          "description": "Amount to scale the light by when compiling for HDR.",
          "deflt": "1"
        },
        {
          "type": "choices",
          "name": "style",
          "title": "Appearance",
          "deflt": 0,
          "choices": {
            "0": "Normal",
            "1": "Flicker A",
            "2": "Slow, strong pulse",
            "3": "Candle A",
            "4": "Fast strobe",
            "5": "Gentle pulse",
            "6": "Flicker B",
            "7": "Candle B",
            "8": "Candle C",
            "9": "Slow strobe",
            "10": "Fluorescent flicker",
            "11": "Slow pulse, noblack"
          }
        },
        {
          "type": "string",
          "name": "pattern",
          "title": "Custom Appearance",
          "description": "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light.",
          "deflt": ""
        },
        {
          "type": "string",
          "name": "_constant_attn",
          "title": "Constant",
          "deflt": "0"
        },
        {
          "type": "string",
          "name": "_linear_attn",
          "title": "Linear",
          "deflt": "0"
        },
        {
          "type": "string",
          "name": "_quadratic_attn",
          "title": "Quadratic",
          "deflt": "1"
        },
        {
          "type": "string",
          "name": "_fifty_percent_distance",
          "title": "50 percent falloff distance",
          "description": "Distance at which brightness should fall off to 50%. If set, overrides linear constant and quadratic paramaters.",
          "deflt": "0"
        },
        {
          "type": "string",
          "name": "_zero_percent_distance",
          "title": "0 percent falloff distance",
          "description": "Distance at which brightness should fall off to negligible (1/256)%. Must set _fifty_percent_distance to use.",
          "deflt": "0"
        },
        {
          "type": "integer",
          "name": "_hardfalloff",
          "title": "hard falloff",
          "description": "If set, causes lights to fall to exactly zero beyond the zero percent distance. May cause unrealistic lightijng if not used carefully.",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "_castentityshadow",
          "title": "Cast entity shadows",
          "description": "Objects illuminated by this light will cast a directional shadow.",
          "deflt": 0,
          "choices": {
            "0": "Don't affect entity shadow angles",
            "1": "Affect entity shadow angles"
          }
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Turn the light on.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "The the light off.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle the light's current state.",
          "type": "void"
        },
        {
          "name": "SetPattern",
          "description": "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light.",
          "type": "string"
        },
        {
          "name": "FadeToPattern",
          "description": "Fades from first value in old pattern, to first value in the new given pattern. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light.",
          "type": "string"
        }
      ]
    },
    {
      "name": "Node",
      "type": "BaseClass",
      "properties": [
        {
          "type": "integer",
          "name": "nodeid",
          "title": "Node ID"
        }
      ]
    },
    {
      "name": "HintNode",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Node"
          ]
        }
      ],
      "flags": [
        {
          "title": "Allow jump up",
          "value": 65536,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "hinttype",
          "title": "Hint",
          "deflt": 0,
          "choices": {
            "0": "None",
            "2": "World: Window",
            "12": "World: Act Busy Hint",
            "13": "World: Visually Interesting",
            "14": "World: Visually Interesting (Don't aim at)",
            "15": "World: Inhibit Combine Mines within 15 feet",
            "16": "World: Visually Interesting (Stealth mode)",
            "100": "Crouch Cover Medium",
            "101": "Crouch Cover Low",
            "102": "Waste Scanner Spawn",
            "103": "Entrance / Exit Pinch",
            "105": "Enemy Disadvantage Point",
            "106": "Health Kit",
            "400": "Antlion: Burrow Point",
            "401": "Antlion: Thumper Flee Point",
            "450": "Headcrab: Burrow Point",
            "451": "Headcrab: Exit Pod Point",
            "500": "Roller: Patrol Point",
            "501": "Roller: Cleanup Spot",
            "700": "Crow: Fly to point",
            "701": "Crow: Perch point",
            "900": "Follower: Wait point",
            "901": "Override jump permission",
            "902": "Player squad transition point",
            "903": "NPC exit point",
            "904": "Strider node",
            "950": "Player Ally: Push away destination",
            "951": "PLayer Ally: Fear withdrawal destination",
            "1000": "HL1 World: Machinery",
            "1001": "HL1 World: Blinking Light",
            "1002": "HL1 World: Human Blood",
            "1003": "HL1 World: Alien Blood"
          }
        },
        {
          "type": "string",
          "name": "hintactivity",
          "title": "Hint Activity",
          "description": "Activity associated with this hint node. Various parts of the NPC AI play this activity at times. i.e. Actbusy nodes will play this activity when an NPC acts busy on the node.",
          "deflt": ""
        },
        {
          "type": "choices",
          "name": "nodeFOV",
          "title": "Node FOV",
          "description": "Imagine this node requires that an NPC be in the node's field of view in order to use this hint.",
          "deflt": 180,
          "choices": {
            "45": "45 Degrees",
            "90": "90 Degrees",
            "180": "180 Degrees",
            "360": "360 Degrees"
          }
        },
        {
          "type": "choices",
          "name": "StartHintDisabled",
          "title": "Start Hint Disabled",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "string",
          "name": "Group",
          "title": "Hint Group",
          "description": "If specified, gives the hint a specific group name.  Useful for hint nodes that need to be logically grouped together. NPCs may also refuse to use hint nodes that don't match their hint group.",
          "deflt": ""
        },
        {
          "type": "node_dest",
          "name": "TargetNode",
          "title": "Target node",
          "description": "The node ID of an associated target node, if any.",
          "deflt": -1
        },
        {
          "type": "choices",
          "name": "IgnoreFacing",
          "title": "Ignore Facing",
          "description": "Don't pay attention to the facing of the node. May not apply to a given hint type.",
          "deflt": 2,
          "choices": {
            "0": "No",
            "1": "Yes",
            "2": "Default"
          }
        },
        {
          "type": "choices",
          "name": "MinimumState",
          "title": "Minimum State",
          "description": "Require an NPC have a minimum state to use the hint.",
          "deflt": 1,
          "choices": {
            "1": "Idle",
            "2": "Alert",
            "3": "Combat"
          }
        },
        {
          "type": "choices",
          "name": "MaximumState",
          "title": "Maximum State",
          "description": "Require an NPC have a maximum state to use the hint.",
          "deflt": 3,
          "choices": {
            "1": "Idle",
            "2": "Alert",
            "3": "Combat"
          }
        }
      ],
      "inputs": [
        {
          "name": "EnableHint",
          "description": "Enable hint.",
          "type": "void"
        },
        {
          "name": "DisableHint",
          "description": "Disable hint.",
          "type": "void"
        }
      ]
    },
    {
      "name": "TriggerOnce",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Origin",
            "EnableDisable",
            "Global"
          ]
        }
      ],
      "flags": [
        {
          "title": "Clients",
          "value": 1,
          "enabled": true
        },
        {
          "title": "NPCs",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Pushables",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Physics Objects",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Only player ally NPCs",
          "value": 16,
          "enabled": false
        },
        {
          "title": "Only clients in vehicles",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Everything (not including physics debris)",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Only clients *not* in vehicles",
          "value": 512,
          "enabled": false
        },
        {
          "title": "Physics debris",
          "value": 1024,
          "enabled": false
        },
        {
          "title": "Only NPCs in vehicles (respects player ally flag)",
          "value": 2048,
          "enabled": false
        },
        {
          "title": "Disallow Bots",
          "value": 4096,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "filterclass",
          "name": "filtername",
          "title": "Filter Name",
          "description": "Filter to use to see if activator triggers me. See filter_activator_name for more explanation."
        }
      ],
      "inputs": [
        {
          "name": "Toggle",
          "description": "Toggles this trigger between enabled and disabled states.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnStartTouch",
          "description": "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire.",
          "type": "void"
        }
      ]
    },
    {
      "name": "Trigger",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Origin",
            "EnableDisable",
            "TriggerOnce"
          ]
        }
      ],
      "outputs": [
        {
          "name": "OnStartTouchAll",
          "description": "Fired when an entity starts touching this trigger, and no other entities are touching it. Only entities that passed this trigger's filters are considered.",
          "type": "void"
        },
        {
          "name": "OnEndTouch",
          "description": "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire.",
          "type": "void"
        },
        {
          "name": "OnEndTouchAll",
          "description": "Fires when an entity stops touching this trigger, and no other entities are touching it. Only entities that passed this trigger's filters are considered.",
          "type": "void"
        }
      ]
    },
    {
      "name": "worldbase",
      "type": "BaseClass",
      "properties": [
        {
          "type": "string",
          "name": "message",
          "title": "Map Description / Title"
        },
        {
          "type": "string",
          "name": "skyname",
          "title": "SkyBox Texture Name",
          "deflt": "sky_day01_01"
        },
        {
          "type": "string",
          "name": "chaptertitle",
          "title": "Chapter Title Message",
          "description": "Chapter Title that appears onscreen when this level starts.",
          "deflt": ""
        },
        {
          "type": "choices",
          "name": "startdark",
          "title": "Level Fade In",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "gametitle",
          "title": "Display Game Title",
          "description": "Game Title that appears onscreen when this level starts.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "newunit",
          "title": "New Level Unit",
          "description": "Used to clear out savegame data of previous levels to keep the savegame size as small as possible. Only set it to Yes if the player cannot return to any previous levels.",
          "deflt": 0,
          "choices": {
            "0": "No, keep current",
            "1": "Yes, clear previous levels"
          }
        },
        {
          "type": "float",
          "name": "maxoccludeearea",
          "title": "Max occludee area",
          "description": "[Used on PC] Prevents occlusion testing for entities that take up more than X% of the screen.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "minoccluderarea",
          "title": "Min occluder area",
          "description": "[Used on PC] Prevents occluders from being used if they take up less than X% of the screen.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "maxoccludeearea_x360",
          "title": "Max occludee area (Xbox)",
          "description": "[Used on 360] Prevents occlusion testing for entities that take up more than X% of the screen.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "minoccluderarea_x360",
          "title": "Min occluder area (Xbox)",
          "description": "[Used on 360] Prevents occluders from being used if they take up less than X% of the screen.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "maxpropscreenwidth",
          "title": "Start Fade Pixels",
          "description": "Number of pixels wide at which all props in the level start to fade (<0 = use fademaxdist). This number is ignored if the prop has a specific fade distance specified.",
          "deflt": -1
        },
        {
          "type": "float",
          "name": "minpropscreenwidth",
          "title": "End Fade Pixels",
          "description": "Minimum number of pixels wide at which the prop is visible (0 = don't fade out). This number is ignored if the prop has a specific fade distance specified.",
          "deflt": 0
        },
        {
          "type": "string",
          "name": "detailvbsp",
          "title": "Detail.vbsp file",
          "description": "Detail.vbsp file to use for emitting detail props (found in directory <root>/modname)",
          "deflt": "detail.vbsp"
        },
        {
          "type": "string",
          "name": "detailmaterial",
          "title": "Detail material file",
          "description": "Material for detail sprites to use for drawing detail props",
          "deflt": "detail/detailsprites"
        },
        {
          "type": "choices",
          "name": "coldworld",
          "title": "World is cold",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ]
    },
    {
      "name": "worldspawn",
      "type": "SolidClass",
      "description": "This is the world entity. Each map can only contain one, and it's automatically created for you.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "worldbase",
            "ResponseContext"
          ]
        }
      ]
    },
    {
      "name": "ambient_generic",
      "type": "PointClass",
      "description": "Universal ambient sound. Use it to play and control a single sound.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/ambient_generic.vmt"
          ]
        },
        {
          "name": "sphere",
          "values": []
        }
      ],
      "properties": [
        {
          "type": "sound",
          "name": "message",
          "title": "Sound Name",
          "description": "Name of the GameSound entry for the sound to play. Also supports direct .wav filenames.",
          "deflt": ""
        },
        {
          "type": "integer",
          "name": "health",
          "title": "Volume",
          "description": "Sound volume, expressed as a range from 0 to 10, where 10 is the loudest.",
          "deflt": 10
        },
        {
          "type": "choices",
          "name": "preset",
          "title": "Dynamic Presets",
          "deflt": 0,
          "choices": {
            "0": "None",
            "1": "Huge Machine",
            "2": "Big Machine",
            "3": "Machine",
            "4": "Slow Fade in",
            "5": "Fade in",
            "6": "Quick Fade in",
            "7": "Slow Pulse",
            "8": "Pulse",
            "9": "Quick pulse",
            "10": "Slow Oscillator",
            "11": "Oscillator",
            "12": "Quick Oscillator",
            "13": "Grunge pitch",
            "14": "Very low pitch",
            "15": "Low pitch",
            "16": "High pitch",
            "17": "Very high pitch",
            "18": "Screaming pitch",
            "19": "Oscillate spinup/down",
            "20": "Pulse spinup/down",
            "21": "Random pitch",
            "22": "Random pitch fast",
            "23": "Incremental Spinup",
            "24": "Alien",
            "25": "Bizzare",
            "26": "Planet X",
            "27": "Haunted"
          }
        },
        {
          "type": "integer",
          "name": "volstart",
          "title": "Start Volume",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "fadeinsecs",
          "title": "Fade in time in seconds (0-100)",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "fadeoutsecs",
          "title": "Fade out time in seconds (0-100)",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "pitch",
          "title": "Pitch",
          "description": "Sound pitch, expressed as a range from 1 to 255, where 100 is the sound's default pitch.",
          "deflt": 100
        },
        {
          "type": "integer",
          "name": "pitchstart",
          "title": "Start Pitch",
          "deflt": 100
        },
        {
          "type": "integer",
          "name": "spinup",
          "title": "Spin up time (0-100)",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "spindown",
          "title": "Spin down time (0-100)",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "lfotype",
          "title": "LFO type 0)off 1)sqr 2)tri 3)rnd",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "lforate",
          "title": "LFO rate (0-1000)",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "lfomodpitch",
          "title": "LFO mod pitch (0-100)",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "lfomodvol",
          "title": "LFO mod vol (0-100)",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "cspinup",
          "title": "Incremental Spinup Count",
          "deflt": 0
        },
        {
          "type": "string",
          "name": "radius",
          "title": "Max Audible Distance",
          "description": "Maximum distance at which this sound is audible.",
          "deflt": "1250"
        },
        {
          "type": "target_destination",
          "name": "SourceEntityName",
          "title": "SourceEntityName",
          "description": "If an entity is specified, sound will come from this named entity instead of the location of ambient_generic."
        }
      ],
      "flags": [
        {
          "title": "Play everywhere",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Start Silent",
          "value": 16,
          "enabled": true
        },
        {
          "title": "Is NOT Looped",
          "value": 32,
          "enabled": true
        }
      ],
      "inputs": [
        {
          "name": "Pitch",
          "description": "Sets the sound pitch, expressed as a range from 1 to 255, where 100 is the sound's default pitch.",
          "type": "integer"
        },
        {
          "name": "PlaySound",
          "description": "Starts the sound.",
          "type": "void"
        },
        {
          "name": "StopSound",
          "description": "Stops the sound if it is playing.",
          "type": "void"
        },
        {
          "name": "ToggleSound",
          "description": "Toggles the sound between playing and stopping.",
          "type": "void"
        },
        {
          "name": "Volume",
          "description": "Sets the sound volume, expressed as a range from 0 to 10, where 10 is the loudest.",
          "type": "integer"
        },
        {
          "name": "FadeIn",
          "description": "Fades the sound up to full volume over a specified number of seconds, with a range from 0 to 100 seconds.",
          "type": "integer"
        },
        {
          "name": "FadeOut",
          "description": "Fades the sound to silence over a specified number of seconds, with a range from 0 to 100 seconds.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "func_lod",
      "type": "SolidClass",
      "description": "Brush-built model that fades out over a specified distance. Useful for creating world detail that doesn't need to be drawn far away, for performance reasons.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "GMODSandbox"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "DisappearDist"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "DisappearDist",
          "title": "Disappear Distance",
          "description": "Distance at which these brushes should fade out.",
          "deflt": 2000
        },
        {
          "type": "choices",
          "name": "Solid",
          "title": "Solid",
          "description": "Set whether or not these brushes should collide with other entities.",
          "deflt": 0,
          "choices": {
            "0": "Solid",
            "1": "Nonsolid"
          }
        }
      ]
    },
    {
      "name": "env_zoom",
      "type": "PointClass",
      "description": "An entity that can be used to control the player's FOV. Useful for scenes where the player's view is being controlled, or player-usable binoculars/telescopes, etc.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "Rate",
          "title": "Seconds to reach target",
          "description": "Amount of time it should take to reach the specified FOV.",
          "deflt": "1.0"
        },
        {
          "type": "integer",
          "name": "FOV",
          "title": "Target FOV",
          "description": "FOV that this entity should set the player's FOV to when active.",
          "deflt": 75
        }
      ],
      "inputs": [
        {
          "name": "Zoom",
          "description": "Start controlling the player's FOV.",
          "type": "void"
        },
        {
          "name": "UnZoom",
          "description": "Stop controlling the player's FOV.",
          "type": "void"
        }
      ],
      "flags": [
        {
          "title": "Allow Suit Zoom",
          "value": 1,
          "enabled": false
        }
      ]
    },
    {
      "name": "env_screenoverlay",
      "type": "PointClass",
      "description": "An entity that can display and control a set of screen overlays, to be displayed over the player's view. Useful for view effects like drunkenness, or teleporter afterimages, etc.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "OverlayName1",
          "title": "Overlay Name 1",
          "description": "Name of the first overlay material to display.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "OverlayTime1",
          "title": "Overlay Duration 1",
          "description": "Amount of time that the first overlay should be displayed for, after which it will begin showing the second overlay.",
          "deflt": "1.0"
        },
        {
          "type": "string",
          "name": "OverlayName2",
          "title": "Overlay Name 2",
          "description": "Name of the second overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "OverlayTime2",
          "title": "Overlay Duration 2",
          "description": "Amount of time that the second overlay should be displayed for, after which it will begin showing the third overlay.",
          "deflt": "1.0"
        },
        {
          "type": "string",
          "name": "OverlayName3",
          "title": "Overlay Name 3",
          "description": "Name of the third overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "OverlayTime3",
          "title": "Overlay Duration 3",
          "description": "Amount of time that the third overlay should be displayed for, after which it will begin showing the fourth overlay.",
          "deflt": "1.0"
        },
        {
          "type": "string",
          "name": "OverlayName4",
          "title": "Overlay Name 4",
          "description": "Name of the fourth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "OverlayTime4",
          "title": "Overlay Duration 4",
          "description": "Amount of time that the fourth overlay should be displayed for, after which it will begin showing the fifth overlay.",
          "deflt": "1.0"
        },
        {
          "type": "string",
          "name": "OverlayName5",
          "title": "Overlay Name 5",
          "description": "Name of the fifth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "OverlayTime5",
          "title": "Overlay Duration 5",
          "description": "Amount of time that the fifth overlay should be displayed for, after which it will begin showing the sixth overlay.",
          "deflt": "1.0"
        },
        {
          "type": "string",
          "name": "OverlayName6",
          "title": "Overlay Name 6",
          "description": "Name of the sixth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "OverlayTime6",
          "title": "Overlay Duration 6",
          "description": "Amount of time that the sixth overlay should be displayed for, after which it will begin showing the seventh overlay.",
          "deflt": "1.0"
        },
        {
          "type": "string",
          "name": "OverlayName7",
          "title": "Overlay Name 7",
          "description": "Name of the seventh overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "OverlayTime7",
          "title": "Overlay Duration 7",
          "description": "Amount of time that the seventh overlay should be displayed for, after which it will begin showing the eighth overlay.",
          "deflt": "1.0"
        },
        {
          "type": "string",
          "name": "OverlayName8",
          "title": "Overlay Name 8",
          "description": "Name of the eighth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "OverlayTime8",
          "title": "Overlay Duration 8",
          "description": "Amount of time that the eighth overlay should be displayed for, after which it will begin showing the ninth overlay.",
          "deflt": "1.0"
        },
        {
          "type": "string",
          "name": "OverlayName9",
          "title": "Overlay Name 9",
          "description": "Name of the ninth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "OverlayTime9",
          "title": "Overlay Duration 9",
          "description": "Amount of time that the ninth overlay should be displayed for, after which it will begin showing the tenth overlay.",
          "deflt": "1.0"
        },
        {
          "type": "string",
          "name": "OverlayName10",
          "title": "Overlay Name 10",
          "description": "Name of the tenth overlay material to display. If left blank, overlay displaying will finish, and this entity will consider itself done.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "OverlayTime10",
          "title": "Overlay Duration 10",
          "description": "Amount of time that the tenth overlay should be displayed for, after which this entity will stop displaying overlays.",
          "deflt": "1.0"
        }
      ],
      "inputs": [
        {
          "name": "StartOverlays",
          "description": "Start displaying the first overlay.",
          "type": "void"
        },
        {
          "name": "StopOverlays",
          "description": "Stop displaying any overlays.",
          "type": "void"
        },
        {
          "name": "SwitchOverlay",
          "description": "Switch to displaying a specific overlay. Pass in the desired overlay number in the parameter.",
          "type": "float"
        }
      ]
    },
    {
      "name": "env_screeneffect",
      "type": "PointClass",
      "description": "Allows screenspace effects to be played on the player's view.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "type",
          "title": "Effect Type",
          "description": "Which effect to use.",
          "deflt": 0,
          "choices": {
            "0": "Advisor Stun",
            "1": "Intro Blur",
            "2": "Groggy Vision"
          }
        }
      ],
      "inputs": [
        {
          "name": "StartEffect",
          "description": "Start the effect with the duration in seconds as the passed parameter.",
          "type": "float"
        },
        {
          "name": "StopEffect",
          "description": "Stop the effect.",
          "type": "float"
        }
      ]
    },
    {
      "name": "env_texturetoggle",
      "type": "PointClass",
      "description": "An entity that allows you to change the textures on other brush-built entities.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Target Brush(es)."
        }
      ],
      "inputs": [
        {
          "name": "IncrementTextureIndex",
          "description": "Increments target brush's current texture frame by one.",
          "type": "void"
        },
        {
          "name": "SetTextureIndex",
          "description": "Sets target brush's texture frame to the specified index.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "env_splash",
      "type": "PointClass",
      "description": "An entity that creates a splash effect at its origin. If the 'find water surface' spawnflag is set, it will instead trace down below itself to find the water surface on which to create splashes.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "scale",
          "title": "Scale of the splash",
          "deflt": "8.0"
        }
      ],
      "inputs": [
        {
          "name": "Splash",
          "description": "Create a splash effect.",
          "type": "void"
        }
      ],
      "flags": [
        {
          "title": "Automatically find water surface (place entity above water)",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Diminish with depth (diminished completely in 10 feet of water)",
          "value": 2,
          "enabled": true
        }
      ]
    },
    {
      "name": "env_particlelight",
      "type": "PointClass",
      "description": "An entity that can be used to light the smoke particles emitted by env_smokestack entities. Does not light any other particle types.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Parentname"
          ]
        },
        {
          "name": "color",
          "values": [
            180,
            10,
            180
          ]
        }
      ],
      "properties": [
        {
          "type": "color255",
          "name": "Color",
          "title": "Color",
          "description": "Color emitted by this light.",
          "deflt": "255 0 0"
        },
        {
          "type": "integer",
          "name": "Intensity",
          "title": "Intensity",
          "deflt": 5000
        },
        {
          "type": "choices",
          "name": "directional",
          "title": "Directional",
          "description": "If this is specified, then this light will use the bump map on the particles. Each particle system can have one ambient and one directional light.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "string",
          "name": "PSName",
          "title": "Particle System Entity",
          "description": "Set this to the name of the env_smokestack that you want this light to affect.",
          "deflt": ""
        }
      ]
    },
    {
      "name": "env_sun",
      "type": "PointClass",
      "description": "An entity to control & draw a sun effect in the sky.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles"
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            0,
            0
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_sun.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Viewer entity",
          "description": "Name of an entity used to determine where the sun is in the skybox. The sun should be lined up on a line from this entity to the env_sun entity."
        },
        {
          "type": "choices",
          "name": "use_angles",
          "title": "UseAngles",
          "description": "The old way to orient env_sun is to point it at a target. The new way is to specify the angles. If you use the new way, set this property to YES.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "integer",
          "name": "pitch",
          "title": "Pitch",
          "deflt": 0
        },
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "Sun Color (R G B)",
          "deflt": "100 80 80"
        },
        {
          "type": "color255",
          "name": "overlaycolor",
          "title": "Overlay Color (R G B)",
          "description": "A value of 0 0 0 will act the old way.",
          "deflt": "0 0 0"
        },
        {
          "type": "integer",
          "name": "size",
          "title": "Size",
          "deflt": 16
        },
        {
          "type": "integer",
          "name": "overlaysize",
          "title": "Overlay Size",
          "description": "A value of -1 means the overlay will act the old way.",
          "deflt": -1
        },
        {
          "type": "sprite",
          "name": "material",
          "title": "Material Name",
          "description": "Material of the inner glow.",
          "deflt": "sprites/light_glow02_add_noz"
        },
        {
          "type": "sprite",
          "name": "overlaymaterial",
          "title": "Overlay Material Name",
          "description": "Material of the overlay glow.",
          "deflt": "sprites/light_glow02_add_noz"
        },
        {
          "type": "float",
          "name": "HDRColorScale",
          "title": "HDR color scale.",
          "description": "float value to multiply sprite color by when running in HDR mode.",
          "deflt": "1.0"
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Enable sun rendering.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Disable sun rendering.",
          "type": "void"
        },
        {
          "name": "SetColor",
          "description": "Change the sun's color. Format: <Red 0-255> <Green 0-255> <Blue 0-255>",
          "type": "color255"
        }
      ]
    },
    {
      "name": "game_ragdoll_manager",
      "type": "PointClass",
      "description": "An entity to control the number of ragdolls in the world, for performance reasons.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "MaxRagdollCount",
          "title": "Max Ragdoll Count",
          "description": "Sets the max number of ragdolls that can be in the world at a time (if they are flagged to fade). Set to -1 if you want to use the default value (g_ragdoll_maxcount).",
          "deflt": -1
        },
        {
          "type": "integer",
          "name": "MaxRagdollCountDX8",
          "title": "Max Ragdoll Count DX8",
          "description": "Sets the max number of ragdolls that can be in the world at a time on DX8 hardware (if they are flagged to fade). Set to -1 if you want to use the 'Max Ragdoll Count' value.",
          "deflt": -1
        },
        {
          "type": "choices",
          "name": "SaveImportant",
          "title": "Save Important Ragdolls",
          "description": "Should the ragdoll manager make sure ally ragdolls aren't deleted?",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "SetMaxRagdollCount",
          "description": "Set the Max Ragdoll Count.",
          "type": "integer"
        },
        {
          "name": "SetMaxRagdollCountDX8",
          "description": "Set the Max Ragdoll Count on DX8 hardware.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "game_gib_manager",
      "type": "PointClass",
      "description": "An entity to control the number of gibs in the world, for performance reasons.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "maxpieces",
          "title": "Max Gib Count",
          "description": "Sets the max number of gib that can be spawned at a time. (-1=no limit)",
          "deflt": -1
        },
        {
          "type": "integer",
          "name": "maxpiecesdx8",
          "title": "Max Gib Count On DX8",
          "description": "Sets the max number of gib that can be spawned at a time under DX8. (-1=use Max Gib Count setting)",
          "deflt": -1
        },
        {
          "type": "choices",
          "name": "allownewgibs",
          "title": "Allow New Gibs To Spawn",
          "description": "If true, when the max gib count is reached, oldest gibs are removed as new gibs spawn. If false, new gibs will not be spawned once the gib limit is reached.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "SetMaxPieces",
          "description": "Set the max gib count.",
          "type": "integer"
        },
        {
          "name": "SetMaxPiecesDX8",
          "description": "Set the max gib count under DX8.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "env_lightglow",
      "type": "PointClass",
      "description": "An entity that puts an additive glow in the world, mostly used over light sources.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Parentname",
            "Targetname",
            "Angles"
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            128,
            0
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/axis_helper_thick.mdl"
          ]
        }
      ],
      "properties": [
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "Color (R G B)",
          "deflt": "255 255 255"
        },
        {
          "type": "integer",
          "name": "VerticalGlowSize",
          "title": "Vertical Size",
          "deflt": 30
        },
        {
          "type": "integer",
          "name": "HorizontalGlowSize",
          "title": "Horizontal Size",
          "deflt": 30
        },
        {
          "type": "integer",
          "name": "MinDist",
          "title": "Minimum Distance",
          "description": "The distance at which this effect will be fully translucent.",
          "deflt": 500
        },
        {
          "type": "integer",
          "name": "MaxDist",
          "title": "Maximum Distance",
          "description": "The distance at which this effect will be at full intensity.",
          "deflt": 2000
        },
        {
          "type": "integer",
          "name": "OuterMaxDist",
          "title": "Outer Maximum Distance",
          "description": "If larger than the maximum distance, this is the length at which the glow will fade completely out, between the span of the maximum distance and this length.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "GlowProxySize",
          "title": "Glow Proxy Geometry Size",
          "description": "Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space. So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered.",
          "deflt": "2.0"
        },
        {
          "type": "float",
          "name": "HDRColorScale",
          "title": "HDR color scale.",
          "description": "float value to multiply sprite color by when running in HDR mode.",
          "deflt": "1.0"
        }
      ],
      "inputs": [
        {
          "name": "Color",
          "description": "Change the render color of the glow. Format: <Red 0-255> <Green 0-255> <Blue 0-255>",
          "type": "color255"
        }
      ],
      "flags": [
        {
          "title": "Visible only from front",
          "value": 1,
          "enabled": false
        }
      ]
    },
    {
      "name": "env_smokestack",
      "type": "PointClass",
      "description": "An entity that spits out a constant stream of smoke. See particlezoo.vmf for sample usage. You can place up to two env_particlelight entities near the smoke stack to add ambient light to its particles.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            255,
            255
          ]
        }
      ],
      "properties": [
        {
          "type": "target_source",
          "name": "targetname",
          "title": "Name",
          "description": "The name that other entities refer to this entity by."
        },
        {
          "type": "choices",
          "name": "InitialState",
          "title": "Initial State",
          "deflt": 0,
          "choices": {
            "0": "Off",
            "1": "On"
          }
        },
        {
          "type": "integer",
          "name": "BaseSpread",
          "title": "Spread at the base",
          "description": "Amount of random spread in the origins of the smoke particles when they're spawned.",
          "deflt": 20
        },
        {
          "type": "integer",
          "name": "SpreadSpeed",
          "title": "Spread Speed",
          "description": "Amount of random spread in the velocity of the smoke particles after they're spawned.",
          "deflt": 15
        },
        {
          "type": "integer",
          "name": "Speed",
          "title": "Speed",
          "description": "The speed at which the smoke particles move after they're spawned.",
          "deflt": 30
        },
        {
          "type": "integer",
          "name": "StartSize",
          "title": "Particle start size",
          "description": "Size of the smoke particles when they're first emitted.",
          "deflt": 20
        },
        {
          "type": "integer",
          "name": "EndSize",
          "title": "Particle end size",
          "description": "Size of the smoke particles at the point they fade out completely.",
          "deflt": 30
        },
        {
          "type": "integer",
          "name": "Rate",
          "title": "Emission rate",
          "description": "Rate at which to emit smoke particles (i.e. particles to emit per second).",
          "deflt": 20
        },
        {
          "type": "integer",
          "name": "JetLength",
          "title": "Length of smoke trail",
          "description": "Length of the smokestack. Lifetime of the smoke particles is derived from this & particle speed.",
          "deflt": 180
        },
        {
          "type": "integer",
          "name": "WindAngle",
          "title": "Wind X/Y Angle",
          "description": "This specifies the wind direction. It is an angle in the XY plane. WindSpeed specifies the strength of the wind.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "WindSpeed",
          "title": "Wind Speed",
          "description": "The strength of the wind.",
          "deflt": 0
        },
        {
          "type": "string",
          "name": "SmokeMaterial",
          "title": "Particle material",
          "description": "Material of the smoke particles emitted by this stack.",
          "deflt": "particle/SmokeStack.vmt"
        },
        {
          "type": "integer",
          "name": "twist",
          "title": "Twist",
          "description": "The amount, in degrees per second, that the smoke particles twist around the origin.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "roll",
          "title": "Roll Speed",
          "description": "Amount of roll in degrees per second.",
          "deflt": 0
        },
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "Base Color (R G B)",
          "deflt": "255 255 255"
        },
        {
          "type": "integer",
          "name": "renderamt",
          "title": "Translucency",
          "deflt": 255
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Turn on the smokestack.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turn off the smokestack.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggles the smokestack between on and off state.",
          "type": "void"
        },
        {
          "name": "JetLength",
          "description": "Set the length of the smoke trail.",
          "type": "integer"
        },
        {
          "name": "Rate",
          "description": "Set the rate at which to emit smoke particles (particles per second).",
          "type": "integer"
        },
        {
          "name": "Speed",
          "description": "Set the speed at which the smoke particles move after they're spawned.",
          "type": "integer"
        },
        {
          "name": "SpreadSpeed",
          "description": "Set the amount of random spread in the velocity of the smoke particles after they're spawned.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "env_fade",
      "type": "PointClass",
      "description": "An entity that controls screen fades.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_fade"
          ]
        }
      ],
      "flags": [
        {
          "title": "Fade From",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Modulate",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Activator only",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Stay Out",
          "value": 8,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "duration",
          "title": "Duration (seconds)",
          "description": "The time that it will take to fade the screen in or out.",
          "deflt": "2"
        },
        {
          "type": "string",
          "name": "holdtime",
          "title": "Hold Fade (seconds)",
          "description": "The time to hold the faded in/out state.",
          "deflt": "0"
        },
        {
          "type": "integer",
          "name": "renderamt",
          "title": "Fade Alpha",
          "description": "Alpha of the fade, where 0 = fully transparent and 255 = fully opaque.",
          "deflt": 255
        },
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "Fade Color (R G B)",
          "deflt": "0 0 0"
        }
      ],
      "inputs": [
        {
          "name": "Fade",
          "description": "Start the screen fade.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnBeginFade",
          "description": "Fired when the fade has begun.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_player_surface_trigger",
      "type": "PointClass",
      "description": "An entity that monitors the material of the surface the player is standing on, and fires outputs whenever it changes to/from a specific material.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "gamematerial",
          "title": "Game Material to Watch",
          "description": "The material to watch. When the player stands on/off this material, this entity's outputs will be fired.",
          "deflt": "0",
          "choices": {
            "0": "None (player's in the air)",
            "67": "Concrete",
            "68": "Dirt",
            "70": "Flesh",
            "71": "Grate",
            "73": "Clip",
            "77": "Metal",
            "78": "Sand",
            "79": "Foliage",
            "80": "Computer",
            "83": "Slosh",
            "84": "Tile",
            "86": "Vent",
            "87": "Wood",
            "89": "Glass"
          }
        }
      ],
      "inputs": [
        {
          "name": "Enable",
          "description": "Start watching the player's surface.",
          "type": "void"
        },
        {
          "name": "Disable",
          "description": "Stop watching the player's surface.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnSurfaceChangedToTarget",
          "description": "Fired when the player moves onto the specified game material.",
          "type": "void"
        },
        {
          "name": "OnSurfaceChangedFromTarget",
          "description": "Fired when the player moves off the specified game material.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_tonemap_controller",
      "type": "PointClass",
      "description": "An entity that controls the HDR tonemapping for the player. Think of it as a method of controlling the exposure of the player's eyes.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_tonemap_controller.vmt"
          ]
        }
      ],
      "inputs": [
        {
          "name": "SetTonemapScale",
          "description": "Set the player's tonemap scale. It should be a value between 0 and 2, where 0 is the eyes fully closed, 1 is use the unchanged autoexposure (default), and 2 is the eye fully wide open.",
          "type": "void"
        },
        {
          "name": "BlendTonemapScale",
          "description": "Blend from the player's current tonemap scale to a new one. The parameter syntax is as follows: <target tonemap scale> <blend duration>. For example: '0.5 10' would blend from the current tonemap scale to 0.5 over a period of 10 seconds. Tonemap scale is a value between 0 and 2, where 0 is the eyes fully closed, 1 is use the unchanged autoexposure (default), and 2 is the eye fully wide open.",
          "type": "string"
        },
        {
          "name": "UseDefaultAutoExposure",
          "description": "Revert to using the default tonemap auto exposure.",
          "type": "void"
        },
        {
          "name": "SetAutoExposureMin",
          "description": "Set a custom tonemap auto exposure minimum.",
          "type": "float"
        },
        {
          "name": "SetAutoExposureMax",
          "description": "Set a custom tonemap auto exposure maximum.",
          "type": "float"
        },
        {
          "name": "SetBloomScale",
          "description": "Set a custom bloom scale.",
          "type": "float"
        },
        {
          "name": "SetTonemapRate",
          "description": "Set the rate for autoexposure adjustment.",
          "type": "float"
        }
      ]
    },
    {
      "name": "func_useableladder",
      "type": "PointClass",
      "description": "A Half-Life 2 ladder. Handles player auto mount/unmount, as well as +use to get onto the ladder. \\n\\nSee also 'info_ladder_dismount', used to specify ladder auto-dismount points.\\n\\nNote: This entity is non-functional in Counter-Strike: Source. Use func_ladder instead.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "sweptplayerhull",
          "values": []
        }
      ],
      "flags": [
        {
          "title": "Fake Ladder",
          "value": 1,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "vector",
          "name": "point0",
          "title": "Start",
          "description": "Ladder end point."
        },
        {
          "type": "vector",
          "name": "point1",
          "title": "End",
          "description": "Ladder end point."
        },
        {
          "type": "choices",
          "name": "StartDisabled",
          "title": "Start Disabled",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "string",
          "name": "ladderSurfaceProperties",
          "title": "Surface properties (optional)"
        }
      ],
      "inputs": [
        {
          "name": "Enable",
          "description": "Enable this ladder.",
          "type": "void"
        },
        {
          "name": "Disable",
          "description": "Disable this ladder.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnPlayerGotOnLadder",
          "description": "Fired whenever a player gets on this ladder.",
          "type": "void"
        },
        {
          "name": "OnPlayerGotOffLadder",
          "description": "Fired whenever a player gets off this ladder.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_ladderendpoint",
      "type": "PointClass",
      "description": "An entity used to specify the endpoints of a ladder. This entity is functional, but has been replaced by the easier-to-use func_useableladder entity. Left in only for backwards-compatibility!\\n\\nTo be valid, a full sized player hull traced between the start and end points must not be obstructed at level activation time. The angle determines in which direction the player leaves the ladder if the player presses the +jump button.\\n\\nNote: This entity is non-functional in Counter-Strike: Source. In CS:S, use func_ladder instead.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "size",
          "values": [
            -16,
            -16,
            0,
            16,
            16,
            72
          ]
        },
        {
          "name": "color",
          "values": [
            127,
            127,
            127
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Other",
          "description": "A ladder goes between any two func_ladderendpoints pointing at each other."
        }
      ]
    },
    {
      "name": "info_ladder_dismount",
      "type": "PointClass",
      "description": "An entity to handle endpoints for multiple ladders that are too close to each other.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Parentname"
          ]
        },
        {
          "name": "size",
          "values": [
            -16,
            -16,
            0,
            16,
            16,
            4
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            128,
            255
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "LadderName",
          "description": "If multiple ladders are near multiple endpoints, use this to stop them from interfering with each other."
        }
      ]
    },
    {
      "name": "func_areaportalwindow",
      "type": "SolidClass",
      "description": "An entity that can be used to optimize the visibility in a map. If you seal off an area with them, when the viewer moves the specified distance away from them, they will go opaque and the parts inside the area will not be drawn. The 'target' brush model should enclose the func_areaportal window so no parts of it are culled by the window. If you use the optional foreground brush model, then it should enclose the 'target' brush model.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            128,
            255
          ]
        },
        {
          "name": "sphere",
          "values": [
            "FadeStartDist"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "FadeDist"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Rendered Window",
          "description": "The name of a brush model to render as the window."
        },
        {
          "type": "integer",
          "name": "FadeStartDist",
          "title": "Fade Start Distance",
          "description": "When the viewer is closer than this distance, the alpha is set to 'TranslucencyLimit'.",
          "deflt": 128
        },
        {
          "type": "integer",
          "name": "FadeDist",
          "title": "Fade End Distance",
          "description": "When the viewer is at this distance, the portal becomes solid and closes off.",
          "deflt": 512
        },
        {
          "type": "string",
          "name": "TranslucencyLimit",
          "title": "Translucency limit",
          "description": "This value limits the translucency of the bmodel and prevents it from becoming invisible when the viewer is right on top of it.",
          "deflt": "0.2"
        },
        {
          "type": "string",
          "name": "BackgroundBModel",
          "title": "Foreground bmodel",
          "description": "(Optional) brush model that is drawn after the fading brush model. This model should have alpha in its textures so you can see through it.",
          "deflt": ""
        },
        {
          "type": "integer",
          "name": "PortalVersion",
          "title": "Portal Version",
          "description": "(Don't change). Differentiates between shipping HL2 maps and maps using new engine features.",
          "deflt": 1
        }
      ],
      "inputs": [
        {
          "name": "SetFadeStartDistance",
          "description": "Set fade start distance.",
          "type": "integer"
        },
        {
          "name": "SetFadeEndDistance",
          "description": "Set fade end distance.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "func_wall",
      "type": "SolidClass",
      "description": "Legacy support. Use func_brush instead.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "RenderFields",
            "Global",
            "Shadow"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        }
      ]
    },
    {
      "name": "func_clip_vphysics",
      "type": "SolidClass",
      "description": "A brush entity that's considered solid to vphysics.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "EnableDisable"
          ]
        }
      ],
      "properties": [
        {
          "type": "filterclass",
          "name": "filtername",
          "title": "Filter Name",
          "description": "Filter to use to see if activator collides with me. See filter_activator_name for more explanation. Allow means 'Allow to Block' for this entity."
        }
      ]
    },
    {
      "name": "func_brush",
      "type": "SolidClass",
      "description": "An brush built entity with various features.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Origin",
            "RenderFields",
            "Global",
            "Inputfilter",
            "EnableDisable",
            "Shadow"
          ]
        }
      ],
      "flags": [
        {
          "title": "Ignore player +USE",
          "value": 2,
          "enabled": true
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        },
        {
          "type": "choices",
          "name": "Solidity",
          "title": "Solidity",
          "description": "Used to control the solidity/collision of these brushes.",
          "deflt": 0,
          "choices": {
            "0": "Toggle",
            "1": "Never Solid",
            "2": "Always Solid"
          }
        },
        {
          "type": "string",
          "name": "excludednpc",
          "title": "NPC class excluded from collisions",
          "description": "If an NPC classname is specified here, NPCs of that type won't collide with these brushes. In Episodic, you may also specify an individual entity's name.",
          "deflt": ""
        },
        {
          "type": "choices",
          "name": "invert_exclusion",
          "title": "Invert NPC class exclusion",
          "description": "If set, then the excluded NPC class will consider this brush solid, and all other NPC classes will consider it non-solid.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "solidbsp",
          "title": "Solid BSP",
          "description": "Set this if this brush is in heirarchy with a moving object of some kind, and the player can stand on this brush.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "vrad_brush_cast_shadows",
          "title": "Shadows",
          "description": "Set this if this brush casts lightmap shadows.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "Alpha",
          "description": "Sets the brush's alpha value.",
          "type": "integer"
        },
        {
          "name": "SetExcluded",
          "description": "Change the NPC class excluded from collisions",
          "type": "string"
        },
        {
          "name": "SetInvert",
          "description": "Set the state of invversion for NPC class exclusion (0 or 1)",
          "type": "integer"
        },
        {
          "name": "Toggle",
          "description": "Toggle enabled state of this entity.",
          "type": "void"
        }
      ]
    },
    {
      "name": "vgui_screen_base",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "panelname",
          "title": "Panel Name"
        },
        {
          "type": "string",
          "name": "overlaymaterial",
          "title": "Overlay Material",
          "description": "Name of a material to overlay over the top of the VGUI screen. NOTE: This material must write Z for the VGUI screen to work.",
          "deflt": ""
        },
        {
          "type": "integer",
          "name": "width",
          "title": "Panel Width in World",
          "description": "Width of the panel in units.",
          "deflt": 32
        },
        {
          "type": "integer",
          "name": "height",
          "title": "Panel Height in World",
          "description": "Height of the panel in units.",
          "deflt": 32
        }
      ],
      "inputs": [
        {
          "name": "SetActive",
          "description": "Make the vgui screen visible.",
          "type": "void"
        },
        {
          "name": "SetInactive",
          "description": "Make the vgui screen invisible.",
          "type": "void"
        }
      ]
    },
    {
      "name": "vgui_screen",
      "type": "PointClass",
      "description": "A VGUI screen. Useful for in-world monitors.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "vgui_screen_base"
          ]
        },
        {
          "name": "size",
          "values": [
            -4,
            -4,
            -4,
            4,
            4,
            4
          ]
        }
      ]
    },
    {
      "name": "vgui_slideshow_display",
      "type": "PointClass",
      "description": "Slideshow Display",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles",
            "Parentname"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/axis_helper_thick.mdl"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "displaytext",
          "title": "Display Text",
          "deflt": ""
        },
        {
          "type": "string",
          "name": "directory",
          "title": "Image Directory (materials/vgui/...)",
          "deflt": "slideshow"
        },
        {
          "type": "float",
          "name": "minslidetime",
          "title": "Min Slide Time",
          "description": "Minimum amount of random time that a slide is displayed.",
          "deflt": "0.5"
        },
        {
          "type": "float",
          "name": "maxslidetime",
          "title": "Max Slide Time",
          "description": "Maximum amount of random time that a slide is displayed.",
          "deflt": "0.5"
        },
        {
          "type": "choices",
          "name": "cycletype",
          "title": "Cycle Type",
          "deflt": 0,
          "choices": {
            "0": "Random",
            "1": "Forward",
            "2": "Backward"
          }
        },
        {
          "type": "choices",
          "name": "nolistrepeat",
          "title": "No List Repeat",
          "deflt": 0,
          "choices": {
            "0": "Allow List Repeats",
            "1": "No List Repeats"
          }
        },
        {
          "type": "integer",
          "name": "width",
          "title": "Panel width",
          "description": "Width of the panel in units.",
          "deflt": 256
        },
        {
          "type": "integer",
          "name": "height",
          "title": "Panel height",
          "description": "Height of the panel in units.",
          "deflt": 128
        }
      ],
      "inputs": [
        {
          "name": "Enable",
          "description": "Make slideshow visible.",
          "type": "void"
        },
        {
          "name": "Disable",
          "description": "Make slideshow invisible.",
          "type": "void"
        },
        {
          "name": "SetDisplayText",
          "description": "Sets the display text.",
          "type": "string"
        },
        {
          "name": "RemoveAllSlides",
          "description": "Removes all slides from slideshow.",
          "type": "void"
        },
        {
          "name": "AddSlides",
          "description": "Adds slides by keyword.",
          "type": "string"
        },
        {
          "name": "SetMinSlideTime",
          "description": "Sets min random time between slides.",
          "type": "float"
        },
        {
          "name": "SetMaxSlideTime",
          "description": "Sets max random time between slides.",
          "type": "float"
        },
        {
          "name": "SetCycleType",
          "description": "0 - random, 1 - forward, 2 - backward",
          "type": "integer"
        },
        {
          "name": "SetNoListRepeat",
          "description": "Sets if lists can be randomly picked twice in a row.",
          "type": "bool"
        }
      ]
    },
    {
      "name": "cycler",
      "type": "PointClass",
      "description": "An entity used to display a model for testing purposes. Shooting it with cycle through the model's animations.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles",
            "RenderFxChoices",
            "RenderFields"
          ]
        },
        {
          "name": "studio",
          "values": []
        }
      ],
      "flags": [
        {
          "title": "Not Solid",
          "value": 1,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "studio",
          "name": "model",
          "title": "Model"
        },
        {
          "type": "integer",
          "name": "skin",
          "title": "Skin",
          "description": "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "sequence",
          "title": "Sequence",
          "description": "Default animation sequence for the model to be playing after spawning.",
          "deflt": 0
        }
      ],
      "inputs": [
        {
          "name": "SetSequence",
          "description": "Sets the cycler's sequence.",
          "type": "string"
        }
      ]
    },
    {
      "name": "gibshooterbase",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "angles",
          "title": "Gib Direction (Pitch Yaw Roll)",
          "description": "The direction the gibs will fly.",
          "deflt": "0 0 0"
        },
        {
          "type": "integer",
          "name": "m_iGibs",
          "title": "Number of Gibs",
          "description": "Total number of gibs to shoot each time it's activated.",
          "deflt": 3
        },
        {
          "type": "string",
          "name": "delay",
          "title": "Delay between shots",
          "description": "Delay (in seconds) between shooting each gib. If 0, all gibs shoot at once.",
          "deflt": "0"
        },
        {
          "type": "string",
          "name": "gibangles",
          "title": "Gib Angles (Pitch Yaw Roll)",
          "description": "The orientation of the spawned gibs.",
          "deflt": "0 0 0"
        },
        {
          "type": "string",
          "name": "gibanglevelocity",
          "title": "Max angular velocity",
          "description": "How fast (degrees/sec) the gib pieces should spin. They will spin on x and y axis at between 10% and 100% of this speed.",
          "deflt": "0"
        },
        {
          "type": "integer",
          "name": "m_flVelocity",
          "title": "Gib Velocity",
          "description": "Speed of the fired gibs",
          "deflt": 200
        },
        {
          "type": "string",
          "name": "m_flVariance",
          "title": "Course Variance",
          "description": "How much variance in the direction gibs are fired.",
          "deflt": "0.15"
        },
        {
          "type": "string",
          "name": "m_flGibLife",
          "title": "Gib Life",
          "description": "Time in seconds for gibs to live +/- 5%",
          "deflt": "4"
        },
        {
          "type": "target_destination",
          "name": "lightingorigin",
          "title": "Lighting Origin",
          "description": "Select an info_lighting to specify a location to sample lighting from for all gibs spawned by this shooter, instead of their own origins.",
          "deflt": ""
        }
      ],
      "flags": [
        {
          "title": "Repeatable",
          "value": 1,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Shoot",
          "description": "Force the gibshooter to create and shoot a gib.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_beam",
      "type": "PointClass",
      "description": "An entity that creates a visible beam between two points. The points can be attached to entities to make the beam move around.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "RenderFxChoices"
          ]
        },
        {
          "name": "size",
          "values": [
            -4,
            -4,
            -4,
            4,
            4,
            4
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "LightningStart",
            "targetname",
            "LightningEnd"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "renderamt",
          "title": "Brightness (1 - 255)",
          "deflt": 100
        },
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "Beam Color (R G B)",
          "deflt": "255 255 255"
        },
        {
          "type": "integer",
          "name": "Radius",
          "title": "Radius",
          "description": "If the 'Random Strike' spawnflag is set, this radius determines the area within which the endpoints will randomly strike.",
          "deflt": 256
        },
        {
          "type": "string",
          "name": "life",
          "title": "Life (seconds 0 = infinite)",
          "description": "Amount of time before the beam dies. Setting to zero will make the beam stay forever.",
          "deflt": "1"
        },
        {
          "type": "float",
          "name": "BoltWidth",
          "title": "Width of beam",
          "description": "Pixel width of the beam.",
          "deflt": 2
        },
        {
          "type": "float",
          "name": "NoiseAmplitude",
          "title": "Amount of noise (0-255)",
          "description": "The amount of noise in the beam. 0 is a perfectly straight beam.",
          "deflt": 0
        },
        {
          "type": "sprite",
          "name": "texture",
          "title": "Sprite Name",
          "description": "The material used to draw the beam.",
          "deflt": "sprites/laserbeam.spr"
        },
        {
          "type": "integer",
          "name": "TextureScroll",
          "title": "Texture Scroll Rate (0-100)",
          "description": "Rate at which the beam texture should scroll along the beam.",
          "deflt": 35
        },
        {
          "type": "integer",
          "name": "framerate",
          "title": "Frames per 10 seconds",
          "description": "Framerate at which the beam texture should animate, if it has multiple frames.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "framestart",
          "title": "Starting Frame",
          "description": "The frame to start the beam texture on.",
          "deflt": 0
        },
        {
          "type": "string",
          "name": "StrikeTime",
          "title": "Strike again time (secs)",
          "description": "Refire time between random strikes of the beam. Only used if the 'Random Strike' spawnflag is set.",
          "deflt": "1"
        },
        {
          "type": "string",
          "name": "damage",
          "title": "Damage / second",
          "description": "How much damage this beam does per second to things it hits when it is continually on, or instantaneously if it strikes. For continuous damage, the value should be greater than 10 or it may not work.",
          "deflt": "0"
        },
        {
          "type": "target_destination",
          "name": "LightningStart",
          "title": "Start Entity",
          "description": "Entity that the beam starts at.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "LightningEnd",
          "title": "Ending Entity",
          "description": "Entity that the beam ends at.",
          "deflt": ""
        },
        {
          "type": "string",
          "name": "decalname",
          "title": "Decal Name",
          "description": "Decal to be applied at the end of the beam",
          "deflt": "Bigshot"
        },
        {
          "type": "float",
          "name": "HDRColorScale",
          "title": "HDR color scale.",
          "description": "float value to multiply sprite color by when running in HDR mode.",
          "deflt": "1.0"
        },
        {
          "type": "choices",
          "name": "TouchType",
          "title": "Touch Type (tripwire)",
          "description": "If you want the beam to fire an output when touched by entities, choose the entity type here.",
          "deflt": 0,
          "choices": {
            "0": "Not a tripwire",
            "1": "Player Only",
            "2": "NPC Only",
            "3": "Player or NPC",
            "4": "Player or NPC or Physprop"
          }
        },
        {
          "type": "filterclass",
          "name": "filtername",
          "title": "Filter Name",
          "description": "Filter to use to see if activator triggers me. See filter_activator_name for more explanation."
        }
      ],
      "flags": [
        {
          "title": "Start On",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Toggle",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Random Strike",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Ring",
          "value": 8,
          "enabled": false
        },
        {
          "title": "StartSparks",
          "value": 16,
          "enabled": false
        },
        {
          "title": "EndSparks",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Decal End",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Shade Start",
          "value": 128,
          "enabled": false
        },
        {
          "title": "Shade End",
          "value": 256,
          "enabled": false
        },
        {
          "title": "Taper Out",
          "value": 512,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Turns the beam on.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turns the beam off.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggles the beam between on and off.",
          "type": "void"
        },
        {
          "name": "StrikeOnce",
          "description": "Causes the beam to strike once. It will stay on for its set Life and then turn off (it will never turn off if Life is set to zero).",
          "type": "void"
        },
        {
          "name": "Alpha",
          "description": "Sets the beam's alpha (0 - 255).",
          "type": "integer"
        },
        {
          "name": "Color",
          "description": "Sets the beam's render color (R G B).",
          "type": "color255"
        },
        {
          "name": "ColorRedValue",
          "description": "Sets the red color channel's value (0 - 255).",
          "type": "float"
        },
        {
          "name": "ColorGreenValue",
          "description": "Sets the green color channel's value (0 - 255).",
          "type": "float"
        },
        {
          "name": "ColorBlueValue",
          "description": "Sets the blue color channel's value (0 - 255).",
          "type": "float"
        },
        {
          "name": "Amplitude",
          "description": "Set the amplitude of beam noise (0 - 255).",
          "type": "float"
        },
        {
          "name": "ScrollSpeed",
          "description": "Set the scroll speed in units per second (0 - 100).",
          "type": "float"
        },
        {
          "name": "Width",
          "description": "Set the width of the beam, in pixels.",
          "type": "float"
        }
      ],
      "outputs": [
        {
          "name": "OnTouchedByEntity",
          "description": "Fired when an entity touches the beam. Only fired if the entity passes the 'Touch Type' choice.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_beverage",
      "type": "PointClass",
      "description": "HL1 Legacy: Beverage Dispenser.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "size",
          "values": [
            -4,
            -4,
            -4,
            4,
            4,
            4
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "health",
          "title": "Capacity",
          "description": "Number of cans in the dispenser.",
          "deflt": 10
        },
        {
          "type": "choices",
          "name": "beveragetype",
          "title": "Beverage Type",
          "deflt": 0,
          "choices": {
            "0": "Coca-Cola",
            "1": "Sprite",
            "2": "Diet Coke",
            "3": "Orange",
            "4": "Surge",
            "5": "Moxie",
            "6": "Random"
          }
        }
      ],
      "inputs": [
        {
          "name": "Activate",
          "description": "Enable this dispenser.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_embers",
      "type": "SolidClass",
      "description": "An entity used to create a volume in which to spawn fire embers.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "particletype",
          "title": "Ember type",
          "deflt": 0,
          "choices": {
            "0": "Normal",
            "1": "Smooth Fade",
            "2": "Pulled"
          }
        },
        {
          "type": "integer",
          "name": "density",
          "title": "Density (particles per second)",
          "deflt": 50
        },
        {
          "type": "integer",
          "name": "lifetime",
          "title": "Particle Lifetime (seconds)",
          "deflt": 4
        },
        {
          "type": "integer",
          "name": "speed",
          "title": "Particle Speed (units per second)",
          "deflt": 32
        },
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "Ember Color (R G B)",
          "deflt": "255 255 255"
        }
      ],
      "flags": [
        {
          "title": "Start On",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Toggle",
          "value": 2,
          "enabled": false
        }
      ]
    },
    {
      "name": "env_funnel",
      "type": "PointClass",
      "description": "HL1 Legacy: Large Portal Funnel",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "size",
          "values": [
            -16,
            -16,
            -16,
            16,
            16,
            16
          ]
        }
      ],
      "flags": [
        {
          "title": "Reverse",
          "value": 1,
          "enabled": false
        }
      ]
    },
    {
      "name": "env_blood",
      "type": "PointClass",
      "description": "An entity used to spawn blood effects.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "size",
          "values": [
            -16,
            -16,
            -16,
            16,
            16,
            16
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            0,
            0
          ]
        }
      ],
      "properties": [
        {
          "type": "angle",
          "name": "spraydir",
          "title": "Spray Direction (Pitch Yaw Roll)",
          "description": "The general direction that the blood should spray and the direction to trace to apply the decal.",
          "deflt": "0 0 0"
        },
        {
          "type": "choices",
          "name": "color",
          "title": "Blood Color",
          "deflt": 0,
          "choices": {
            "0": "Red (Human)",
            "1": "Yellow (Alien)"
          }
        },
        {
          "type": "string",
          "name": "amount",
          "title": "Amount of blood (damage to simulate)",
          "deflt": "100"
        }
      ],
      "flags": [
        {
          "title": "Random Direction",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Blood Stream",
          "value": 2,
          "enabled": false
        },
        {
          "title": "On Player",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Spray decals",
          "value": 8,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "EmitBlood",
          "description": "Triggers the blood effect.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_bubbles",
      "type": "SolidClass",
      "description": "An entity used to create a volume in which to spawn bubbles.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "density",
          "title": "Bubble density",
          "deflt": 2
        },
        {
          "type": "integer",
          "name": "frequency",
          "title": "Bubble frequency",
          "deflt": 2
        },
        {
          "type": "integer",
          "name": "current",
          "title": "Speed of Current",
          "description": "The speed of the water current in the volume, used to move the bubbles.",
          "deflt": 0
        }
      ],
      "flags": [
        {
          "title": "Start Off",
          "value": 1,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Activate",
          "description": "Activates the bubbles.",
          "type": "void"
        },
        {
          "name": "Deactivate",
          "description": "Deactivates the bubbles.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggles the bubbles on and off.",
          "type": "void"
        },
        {
          "name": "SetDensity",
          "description": "Sets the bubble density.",
          "type": "integer"
        },
        {
          "name": "SetFrequency",
          "description": "Sets bubble emission rate in bubbles per second.",
          "type": "integer"
        },
        {
          "name": "SetCurrent",
          "description": "Sets current speed in inches per second.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "env_explosion",
      "type": "PointClass",
      "description": "An entity that creates an explosion at its origin.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_explosion.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "iMagnitude",
          "title": "Magnitude",
          "description": "The amount of damage done by the explosion.",
          "deflt": 100
        },
        {
          "type": "integer",
          "name": "iRadiusOverride",
          "title": "Radius Override",
          "description": "If specified, the radius in which the explosion damages entities. If unspecified, the radius will be based on the magnitude.",
          "deflt": 0
        },
        {
          "type": "sprite",
          "name": "fireballsprite",
          "title": "Fireball Sprite",
          "deflt": "sprites/zerogxplode.spr"
        },
        {
          "type": "choices",
          "name": "rendermode",
          "title": "Render Mode",
          "deflt": 5,
          "choices": {
            "0": "Normal",
            "4": "Solid",
            "5": "Additive"
          }
        },
        {
          "type": "target_destination",
          "name": "ignoredEntity",
          "title": "Ignored Entity",
          "description": "Do not harm or affect the named entity."
        }
      ],
      "flags": [
        {
          "title": "No Damage",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Repeatable",
          "value": 2,
          "enabled": false
        },
        {
          "title": "No Fireball",
          "value": 4,
          "enabled": false
        },
        {
          "title": "No Smoke",
          "value": 8,
          "enabled": false
        },
        {
          "title": "No Decal",
          "value": 16,
          "enabled": false
        },
        {
          "title": "No Sparks",
          "value": 32,
          "enabled": false
        },
        {
          "title": "No Sound",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Random Orientation",
          "value": 128,
          "enabled": false
        },
        {
          "title": "No Fireball Smoke",
          "value": 256,
          "enabled": false
        },
        {
          "title": "No particles",
          "value": 512,
          "enabled": false
        },
        {
          "title": "No DLights",
          "value": 1024,
          "enabled": false
        },
        {
          "title": "Don't clamp Min",
          "value": 2048,
          "enabled": false
        },
        {
          "title": "Don't clamp Max",
          "value": 4096,
          "enabled": false
        },
        {
          "title": "Damage above surface only",
          "value": 8192,
          "enabled": false
        },
        {
          "title": "Generic damage",
          "value": 16384,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Explode",
          "description": "Triggers the explosion.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_smoketrail",
      "type": "PointClass",
      "description": "An entity that creates a smoke trail.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "color",
          "values": [
            200,
            50,
            0
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "opacity",
          "title": "Sprite Opacity",
          "description": "Opacity of the sprites (range from 0 - 1).",
          "deflt": "0.75"
        },
        {
          "type": "float",
          "name": "spawnrate",
          "title": "Spawn Rate",
          "description": "Number of particles to emit each second.",
          "deflt": "20"
        },
        {
          "type": "float",
          "name": "lifetime",
          "title": "Particle Life Time",
          "description": "Number of seconds until each particle dies.",
          "deflt": "5.0"
        },
        {
          "type": "color255",
          "name": "startcolor",
          "title": "Start Color",
          "description": "Starting color of the emitted particles.",
          "deflt": "192 192 192"
        },
        {
          "type": "color255",
          "name": "endcolor",
          "title": "End Color",
          "description": "Ending color of the emitted particles.",
          "deflt": "160 160 160"
        },
        {
          "type": "float",
          "name": "emittime",
          "title": "Emitter Life Time",
          "description": "Number of seconds until the env_smoketrail stops emitting particles. 0 means never stop emitting particles.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "minspeed",
          "title": "Minimum Random Speed",
          "description": "Minimum randomly-directed speed to use for emitted particles.",
          "deflt": "10"
        },
        {
          "type": "float",
          "name": "maxspeed",
          "title": "Maximum Random Speed",
          "description": "Maximum randomly-directed speed to use for emitted particles.",
          "deflt": "20"
        },
        {
          "type": "float",
          "name": "mindirectedspeed",
          "title": "Minimum Directed Speed",
          "description": "Minimum speed along the env_smoketrail's forward direction (x axis) to use for emitted particles.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "maxdirectedspeed",
          "title": "Maximum Directed Speed",
          "description": "Maximum speed along the env_smoketrail's forward direction (x axis) to use for emitted particles.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "startsize",
          "title": "Starting particle size",
          "description": "Starting particle size.",
          "deflt": "15"
        },
        {
          "type": "float",
          "name": "endsize",
          "title": "Ending particle size",
          "description": "Ending particle size.",
          "deflt": "50"
        },
        {
          "type": "float",
          "name": "spawnradius",
          "title": "Spawn radius",
          "description": "Distance from env_smoketrail at which particles are emitted.",
          "deflt": "15"
        },
        {
          "type": "sprite",
          "name": "firesprite",
          "title": "Fire Sprite",
          "deflt": "sprites/firetrail.spr"
        },
        {
          "type": "sprite",
          "name": "smokesprite",
          "title": "Smoke Puff",
          "deflt": "sprites/whitepuff.spr"
        }
      ]
    },
    {
      "name": "env_physexplosion",
      "type": "PointClass",
      "description": "An entity that creates an explosion at its origin. If the no-damage spawnflag is set, the explosion won't be visible, but will apply force to any physics objects within its radius.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "sphere",
          "values": []
        },
        {
          "name": "sphere",
          "values": [
            "inner_radius"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_physexplosion.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "magnitude",
          "title": "Magnitude",
          "description": "Amount of physics force applied by the explosion.",
          "deflt": "100"
        },
        {
          "type": "string",
          "name": "radius",
          "title": "Clamp Radius (0 = auto)",
          "description": "If specified, the radius in which the explosion damages entities. If unspecified, the radius will be based on the magnitude.",
          "deflt": "0"
        },
        {
          "type": "target_destination",
          "name": "targetentityname",
          "title": "Limit to Entity",
          "description": "If specified, the explosion will only affect the matching entity.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "inner_radius",
          "title": "Inner radius",
          "description": "If not zero, the LOS is calculated from a point intersecting this sphere.",
          "deflt": "0"
        }
      ],
      "flags": [
        {
          "title": "No Damage - Only Force",
          "value": 1,
          "enabled": true
        },
        {
          "title": "Push players",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Push radially - not as a sphere",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Test LOS before pushing",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Disorient player if pushed",
          "value": 16,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Explode",
          "description": "Trigger the explosion.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnPushedPlayer",
          "description": "Fires when the player is pushed by the explosion.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_physimpact",
      "type": "PointClass",
      "description": "An entity that will cause a physics impact on another entity.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "directionentityname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_physexplosion.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "angles",
          "title": "Pitch Yaw Roll (Y Z X)",
          "description": "Direction to project the impact.",
          "deflt": "0 0 0"
        },
        {
          "type": "integer",
          "name": "magnitude",
          "title": "Magnitude",
          "description": "Strength of the impact.",
          "deflt": 100
        },
        {
          "type": "integer",
          "name": "distance",
          "title": "Distance",
          "description": "How far to project the impact (if 0 uses a default value).",
          "deflt": 0
        },
        {
          "type": "target_destination",
          "name": "directionentityname",
          "title": "Point to Entity",
          "description": "If set, 'Distance' and Angle settings are ignored and the direction and distance to the target entity will be used.",
          "deflt": ""
        }
      ],
      "flags": [
        {
          "title": "No fall-off",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Infinite Length",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Ignore Mass",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Ignore Surface Normal When Applying Force",
          "value": 8,
          "enabled": true
        }
      ],
      "inputs": [
        {
          "name": "Impact",
          "description": "Trigger the impact",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_fire",
      "type": "PointClass",
      "description": "An entity that handles a single flame at its origin. The flame causes heat 'damage' to other env_fire entities around it, and will eventually ignite non-flaming env_fire entities nearby, causing the fire to spread.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "EnableDisable"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_fire"
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            180,
            0
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "health",
          "title": "Duration",
          "description": "Amount of time the fire will burn.",
          "deflt": 30
        },
        {
          "type": "integer",
          "name": "firesize",
          "title": "Size",
          "description": "Height (in world units) of the flame.",
          "deflt": 64
        },
        {
          "type": "integer",
          "name": "fireattack",
          "title": "Attack",
          "description": "Amount of time the fire takes to grow to full strength.",
          "deflt": 4
        },
        {
          "type": "choices",
          "name": "firetype",
          "title": "Type",
          "deflt": 0,
          "choices": {
            "0": "Natural",
            "1": "Plasma"
          }
        },
        {
          "type": "float",
          "name": "ignitionpoint",
          "title": "Ignition Point",
          "description": "Amount of heat 'damage' to take before this flame should ignite.",
          "deflt": 32
        },
        {
          "type": "float",
          "name": "damagescale",
          "title": "Damage Scale",
          "description": "Multiplier of the burn damage done by the flame.",
          "deflt": "1.0"
        }
      ],
      "flags": [
        {
          "title": "Infinite Duration",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Smokeless",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Start On",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Start Full",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Don't drop",
          "value": 16,
          "enabled": false
        },
        {
          "title": "No glow",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Delete when out",
          "value": 128,
          "enabled": false
        },
        {
          "title": "Visible from above",
          "value": 256,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "StartFire",
          "description": "Start the fire.",
          "type": "void"
        },
        {
          "name": "Extinguish",
          "description": "Puts out the fire permanently in the number of seconds specified.",
          "type": "float"
        },
        {
          "name": "ExtinguishTemporary",
          "description": "Puts out the fire temporarily in the number of seconds specified.",
          "type": "float"
        }
      ],
      "outputs": [
        {
          "name": "OnIgnited",
          "description": "Fires when the fire is first ignited.",
          "type": "void"
        },
        {
          "name": "OnExtinguished",
          "description": "Fires when the fire is fully extinguished.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_firesource",
      "type": "PointClass",
      "description": "An entity that provides heat to all nearby env_fire entities. Cannot be extinguished.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_firesource"
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            255,
            0
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fireradius"
          ]
        }
      ],
      "flags": [
        {
          "title": "Start On",
          "value": 1,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "fireradius",
          "title": "Radius",
          "description": "The radius around this entity in which to provide heat.",
          "deflt": 128
        },
        {
          "type": "float",
          "name": "firedamage",
          "title": "Intensity / Damage",
          "description": "Amount of heat 'damage' to apply to env_fire entities within the radius.",
          "deflt": 10
        }
      ],
      "inputs": [
        {
          "name": "Enable",
          "description": "Enable fire source.",
          "type": "void"
        },
        {
          "name": "Disable",
          "description": "Disable fire source.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_firesensor",
      "type": "PointClass",
      "description": "An entity that detects changes in heat nearby.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "size",
          "values": [
            -4,
            -4,
            -4,
            4,
            4,
            4
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            255,
            0
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fireradius"
          ]
        }
      ],
      "flags": [
        {
          "title": "Start On",
          "value": 1,
          "enabled": true
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "fireradius",
          "title": "Radius",
          "description": "The radius around this entity in which to detect heat changes.",
          "deflt": 128
        },
        {
          "type": "float",
          "name": "heatlevel",
          "title": "Heat level",
          "description": "The target heat level to check for. Outputs are fired when the heat moves over this target level (increasing or decreasing).",
          "deflt": 32
        },
        {
          "type": "float",
          "name": "heattime",
          "title": "Time at level",
          "description": "The amount of time the heat level must spend over the target level before the 'OnHeatLevelStart' output is fired.",
          "deflt": 0
        }
      ],
      "inputs": [
        {
          "name": "Enable",
          "description": "Enable fire sensor.",
          "type": "void"
        },
        {
          "name": "Disable",
          "description": "Disable fire sensor.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnHeatLevelStart",
          "description": "Fires when the heat level has been sustained for the specified length of time.",
          "type": "void"
        },
        {
          "name": "OnHeatLevelEnd",
          "description": "Fires when the heat level drops below the target level.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_entity_igniter",
      "type": "PointClass",
      "description": "An entity that catches a target entity on fire. If the entity is an animating model, it will have sprite flames attached to its skeleton. Otherwise the entity will emit particle flame puffs.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -4,
            -4,
            -4,
            4,
            4,
            4
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            180,
            0
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Entity to ignite",
          "description": "Name of the entity to catch on fire."
        },
        {
          "type": "float",
          "name": "lifetime",
          "title": "Lifetime in seconds",
          "description": "Duration of flames.",
          "deflt": 10
        }
      ],
      "inputs": [
        {
          "name": "Ignite",
          "description": "Ignite the target entity.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_fog_controller",
      "type": "PointClass",
      "description": "An entity that controls the fog and view distance in the map.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "DXLevelChoice",
            "Angles"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/fog_controller.vmt"
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            255,
            255
          ]
        }
      ],
      "inputs": [
        {
          "name": "SetStartDist",
          "description": "Set the fog start distance.",
          "type": "float"
        },
        {
          "name": "SetEndDist",
          "description": "Set the fog end distance.",
          "type": "float"
        },
        {
          "name": "TurnOn",
          "description": "Turn the fog on.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turn the fog off.",
          "type": "void"
        },
        {
          "name": "SetColor",
          "description": "Set the primary fog color.",
          "type": "color255"
        },
        {
          "name": "SetColorSecondary",
          "description": "Set the secondary fog color.",
          "type": "color255"
        },
        {
          "name": "SetFarZ",
          "description": "Set the far clip plane distance.",
          "type": "integer"
        },
        {
          "name": "SetAngles",
          "description": "Set the angles to use for the secondary fog direction.",
          "type": "string"
        },
        {
          "name": "SetColorLerpTo",
          "description": "Set the primary fog color.",
          "type": "color255"
        },
        {
          "name": "SetColorSecondaryLerpTo",
          "description": "Set the secondary fog color.",
          "type": "color255"
        },
        {
          "name": "SetStartDistLerpTo",
          "description": "Set the fog start distance.",
          "type": "float"
        },
        {
          "name": "SetEndDistLerpTo",
          "description": "Set the fog end distance.",
          "type": "float"
        },
        {
          "name": "StartFogTransition",
          "description": "Start fog transition.",
          "type": "void"
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "fogenable",
          "title": "Fog Enable",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "fogblend",
          "title": "Fog Blend",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "use_angles",
          "title": "Use Angles for Fog Dir",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "color255",
          "name": "fogcolor",
          "title": "Primary Fog Color",
          "deflt": "255 255 255"
        },
        {
          "type": "color255",
          "name": "fogcolor2",
          "title": "Secondary Fog Color",
          "deflt": "255 255 255"
        },
        {
          "type": "string",
          "name": "fogdir",
          "title": "Primary Fog Direction",
          "deflt": "1 0 0"
        },
        {
          "type": "string",
          "name": "fogstart",
          "title": "Fog Start",
          "deflt": "500.0"
        },
        {
          "type": "string",
          "name": "fogend",
          "title": "Fog End",
          "deflt": "2000.0"
        },
        {
          "type": "float",
          "name": "fogmaxdensity",
          "title": "Fog Max Density [0..1]",
          "deflt": "1"
        },
        {
          "type": "float",
          "name": "foglerptime",
          "title": "Interpolate time",
          "deflt": "0"
        },
        {
          "type": "string",
          "name": "farz",
          "title": "Far Z Clip Plane",
          "deflt": "-1"
        }
      ],
      "flags": [
        {
          "title": "Master (Has priority if multiple env_fog_controllers exist)",
          "value": 1,
          "enabled": false
        }
      ]
    },
    {
      "name": "env_steam",
      "type": "PointClass",
      "description": "An entity used to create a jet of steam.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "studioprop",
          "values": [
            "models/editor/spot_cone.mdl"
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            255,
            255
          ]
        }
      ],
      "flags": [
        {
          "title": "Emissive",
          "value": 1,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "InitialState",
          "title": "Initial State",
          "deflt": 0,
          "choices": {
            "0": "Off",
            "1": "On"
          }
        },
        {
          "type": "choices",
          "name": "type",
          "title": "Particle Type",
          "deflt": 0,
          "choices": {
            "0": "Normal",
            "1": "Heat Wave"
          }
        },
        {
          "type": "integer",
          "name": "SpreadSpeed",
          "title": "Spread Speed",
          "description": "The amount of random spread in the particle's velocity after they spawn.",
          "deflt": 15
        },
        {
          "type": "integer",
          "name": "Speed",
          "title": "Speed",
          "description": "The default speed at which the particles move after they spawn.",
          "deflt": 120
        },
        {
          "type": "integer",
          "name": "StartSize",
          "title": "Particle start size",
          "description": "The initial size of the particles after they spawn.",
          "deflt": 10
        },
        {
          "type": "integer",
          "name": "EndSize",
          "title": "Particle end size",
          "description": "The size of the particles at the point at which they are removed.",
          "deflt": 25
        },
        {
          "type": "integer",
          "name": "Rate",
          "title": "Emission rate",
          "description": "The rate of particle emission. i.e. particles per second.",
          "deflt": 26
        },
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "Color (R G B)",
          "deflt": "255 255 255"
        },
        {
          "type": "integer",
          "name": "JetLength",
          "title": "Length of steam jet",
          "description": "The length of the jet determines the lifetime of each particle.",
          "deflt": 80
        },
        {
          "type": "integer",
          "name": "renderamt",
          "title": "Translucency",
          "deflt": 255
        },
        {
          "type": "float",
          "name": "rollspeed",
          "title": "How fast does the particles spin",
          "deflt": 8
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Turns the steam jet on.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turns the steam jet off.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggles the steam jet between on and off.",
          "type": "void"
        },
        {
          "name": "JetLength",
          "description": "Sets the length of steam jet.",
          "type": "integer"
        },
        {
          "name": "Rate",
          "description": "Sets the particle emission rate in particles per second.",
          "type": "integer"
        },
        {
          "name": "Speed",
          "description": "Sets the default speed of the particles in units per second.",
          "type": "integer"
        },
        {
          "name": "SpreadSpeed",
          "description": "Sets the spread speed in units per second.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "env_laser",
      "type": "PointClass",
      "description": "An entity that creates a laser beam between itself and a given target.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "RenderFxChoices"
          ]
        },
        {
          "name": "size",
          "values": [
            -4,
            -4,
            -4,
            4,
            4,
            4
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "LaserTarget"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "LaserTarget",
          "title": "Target of Laser",
          "description": "Name of entity, or entities, to strike at. The target is randomly chosen if there are multiple entities matching the given name."
        },
        {
          "type": "integer",
          "name": "renderamt",
          "title": "Brightness (1 - 255)",
          "deflt": 100
        },
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "Beam Color (R G B)",
          "deflt": "255 255 255"
        },
        {
          "type": "float",
          "name": "width",
          "title": "Width of Beam",
          "description": "The width of the laser beam, in pixels.",
          "deflt": 2
        },
        {
          "type": "integer",
          "name": "NoiseAmplitude",
          "title": "Amount of noise (0-255)",
          "description": "The amount of noise in the beam. 0 is a perfectly straight beam.",
          "deflt": 0
        },
        {
          "type": "sprite",
          "name": "texture",
          "title": "Sprite Name",
          "description": "The material used to draw the laser beam.",
          "deflt": "sprites/laserbeam.spr"
        },
        {
          "type": "sprite",
          "name": "EndSprite",
          "title": "End Sprite",
          "description": "If specified, this sprite will be drawn at the end of the laser beam.",
          "deflt": ""
        },
        {
          "type": "integer",
          "name": "TextureScroll",
          "title": "Texture Scroll Rate (0-100)",
          "description": "Rate at which the beam texture should scroll along the beam.",
          "deflt": 35
        },
        {
          "type": "integer",
          "name": "framestart",
          "title": "Starting Frame",
          "description": "The frame to start the beam texture on.",
          "deflt": 0
        },
        {
          "type": "string",
          "name": "damage",
          "title": "Damage / second",
          "description": "How much damage this laser does. per second. to things it hits.",
          "deflt": "100"
        },
        {
          "type": "choices",
          "name": "dissolvetype",
          "title": "Dissolve Type",
          "deflt": "None",
          "choices": {
            "0": "Energy",
            "1": "Heavy electrical",
            "2": "Light electrical",
            "-1": "None"
          }
        }
      ],
      "flags": [
        {
          "title": "Start On",
          "value": 1,
          "enabled": false
        },
        {
          "title": "StartSparks",
          "value": 16,
          "enabled": false
        },
        {
          "title": "EndSparks",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Decal End",
          "value": 64,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Turns the laser on.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turns the laser off.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggles the laser between on and off.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_message",
      "type": "PointClass",
      "description": "An entity that draws a text message on player's HUDs.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "message",
          "title": "Message Text"
        },
        {
          "type": "sound",
          "name": "messagesound",
          "title": "Sound Effect",
          "description": "When the message is shown, this sound effect will be played, originating from this entity.",
          "deflt": ""
        },
        {
          "type": "string",
          "name": "messagevolume",
          "title": "Volume 0-10",
          "description": "Volume of the sound effect.",
          "deflt": "10"
        },
        {
          "type": "choices",
          "name": "messageattenuation",
          "title": "Sound Radius",
          "deflt": 0,
          "choices": {
            "0": "Small Radius",
            "1": "Medium Radius",
            "2": "Large  Radius",
            "3": "Play Everywhere"
          }
        }
      ],
      "flags": [
        {
          "title": "Play Once",
          "value": 1,
          "enabled": false
        },
        {
          "title": "All Clients",
          "value": 2,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "ShowMessage",
          "description": "Shows the message and plays the sound.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnShowMessage",
          "description": "Fired when the message is activated.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_hudhint",
      "type": "PointClass",
      "description": "An entity to control the display of HUD hints. HUD hints are used to show the player what key is bound to a particular command.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "flags": [
        {
          "title": "All Players",
          "value": 1,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "message",
          "title": "Hint Text (localized)",
          "description": "This should be set to match the desired HUD hint entry in the hl2\\resource\\valve_english.txt.",
          "deflt": ""
        }
      ],
      "inputs": [
        {
          "name": "ShowHudHint",
          "description": "Shows the hint message.",
          "type": "void"
        },
        {
          "name": "HideHudHint",
          "description": "Hides the hint message.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_shake",
      "type": "PointClass",
      "description": "An entity to control screen shake on players.",
      "parameters": [
        {
          "name": "sphere",
          "values": []
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_shake.vmt"
          ]
        },
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        }
      ],
      "flags": [
        {
          "title": "GlobalShake",
          "value": 1,
          "enabled": false
        },
        {
          "title": "In Air",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Physics",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Ropes",
          "value": 16,
          "enabled": false
        },
        {
          "title": "DON'T shake view (for shaking ropes or physics only)",
          "value": 32,
          "enabled": false
        },
        {
          "title": "DON'T Rumble Controller",
          "value": 64,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "amplitude",
          "title": "Amplitude (0-16)",
          "description": "The amount of noise in the screen shake. Should be a range between 0 and 16.",
          "deflt": "4"
        },
        {
          "type": "float",
          "name": "radius",
          "title": "Effect Radius",
          "description": "The radius around this entity in which to affect players.",
          "deflt": "500"
        },
        {
          "type": "float",
          "name": "duration",
          "title": "Duration (seconds)",
          "description": "The length of time in which to shake the player's screens.",
          "deflt": "1"
        },
        {
          "type": "float",
          "name": "frequency",
          "title": "Frequency",
          "description": "The frequency used to apply the screen shake. Should be a value between 0 and 255, where 0.1 = jerk, and 255.0 = rumble.",
          "deflt": "2.5"
        }
      ],
      "inputs": [
        {
          "name": "Amplitude",
          "description": "Set the amplitude (0-16)",
          "type": "string"
        },
        {
          "name": "Frequency",
          "description": "Set the frequence. Should be a value between 0 and 255, where 0.1 = jerk, and 255.0 = rumble.",
          "type": "string"
        },
        {
          "name": "StartShake",
          "description": "Start the shake.",
          "type": "void"
        },
        {
          "name": "StopShake",
          "description": "Stop the shake.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_viewpunch",
      "type": "PointClass",
      "description": "Causes a view punch on players.",
      "parameters": [
        {
          "name": "sphere",
          "values": []
        },
        {
          "name": "size",
          "values": [
            -4,
            -4,
            -4,
            4,
            4,
            4
          ]
        },
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        }
      ],
      "flags": [
        {
          "title": "Punch all players (ignore radius)",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Punch players in the air",
          "value": 2,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "angle",
          "name": "punchangle",
          "title": "Punch angles",
          "description": "The punch angles to apply.",
          "deflt": "0 0 90"
        },
        {
          "type": "float",
          "name": "radius",
          "title": "Effect Radius",
          "description": "The radius around this entity in which to affect players.",
          "deflt": "500"
        }
      ],
      "inputs": [
        {
          "name": "ViewPunch",
          "description": "Performs the view punch.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_rotorwash_emitter",
      "type": "PointClass",
      "description": "Creates rotorwash.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "altitude",
          "title": "Altitude",
          "description": "Altitude the rotorwash will show up.",
          "deflt": "1024"
        }
      ]
    },
    {
      "name": "gibshooter",
      "type": "PointClass",
      "description": "An entity that shoots out gibs. Style of body part depends on language type.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "gibshooterbase"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/gibshooter.vmt"
          ]
        }
      ]
    },
    {
      "name": "env_shooter",
      "type": "PointClass",
      "description": "An entity that shoots models, or sprites, out of its origin.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "gibshooterbase",
            "RenderFields"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_shooter.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "studio",
          "name": "shootmodel",
          "title": "Model",
          "description": "Thing to shoot out. Can be a .mdl or a .vmt.",
          "deflt": ""
        },
        {
          "type": "choices",
          "name": "shootsounds",
          "title": "Material Sound",
          "deflt": -1,
          "choices": {
            "0": "Glass",
            "1": "Wood",
            "2": "Metal",
            "3": "Flesh",
            "4": "Concrete",
            "-1": "None"
          }
        },
        {
          "type": "choices",
          "name": "simulation",
          "title": "Simulate",
          "deflt": 0,
          "choices": {
            "0": "Point",
            "1": "Physics",
            "2": "Ragdoll"
          }
        },
        {
          "type": "integer",
          "name": "skin",
          "title": "Gib Skin",
          "description": "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin on all gibs produced by this shooter.",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "nogibshadows",
          "title": "Disable Shadows on Gibs",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "float",
          "name": "gibgravityscale",
          "title": "Gib gravity scale",
          "description": "ONLY WORKS FOR POINT GIBS. This field allows you to scale gravity so that gibs fall faster, slower, or not at all.",
          "deflt": "1"
        },
        {
          "type": "float",
          "name": "massoverride",
          "title": "Mass override",
          "description": "EPISODIC ONLY. Specify an arbitrary mass for the gibs emitted by me.",
          "deflt": "0"
        }
      ],
      "flags": [
        {
          "title": "On fire",
          "value": 2,
          "enabled": false
        },
        {
          "title": "strict remove after lifetime",
          "value": 4,
          "enabled": false
        }
      ]
    },
    {
      "name": "env_rotorshooter",
      "type": "PointClass",
      "description": "An entity that creates gibs when it's within the influence of a helicopter's rotor wash.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "gibshooterbase",
            "RenderFields"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_shooter.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "studio",
          "name": "shootmodel",
          "title": "Model",
          "description": "Thing to shoot out.  Can be a .mdl or a .vmt.",
          "deflt": ""
        },
        {
          "type": "choices",
          "name": "shootsounds",
          "title": "Material Sound",
          "deflt": -1,
          "choices": {
            "0": "Glass",
            "1": "Wood",
            "2": "Metal",
            "3": "Flesh",
            "4": "Concrete",
            "-1": "None"
          }
        },
        {
          "type": "choices",
          "name": "simulation",
          "title": "Simulate",
          "deflt": 0,
          "choices": {
            "0": "Point",
            "1": "Physics",
            "2": "Ragdoll"
          }
        },
        {
          "type": "integer",
          "name": "skin",
          "title": "Gib Skin",
          "description": "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin on all gibs produced by this shooter.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "rotortime",
          "title": "Time Under Rotor",
          "description": "The average time it has to be under the rotor before it shoots a gib.",
          "deflt": "1"
        },
        {
          "type": "float",
          "name": "rotortimevariance",
          "title": "Time variance",
          "description": "The random amount to vary the time it has to be under the rotor before it shoots a gib.",
          "deflt": "0.3"
        }
      ],
      "flags": [
        {
          "title": "On fire",
          "value": 2,
          "enabled": false
        }
      ]
    },
    {
      "name": "env_soundscape_proxy",
      "type": "PointClass",
      "description": "An entity that acts like a soundscape but gets all of its sound parameters from another env_soundscape entity.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "sphere",
          "values": []
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_soundscape.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "MainSoundscapeName",
          "title": "Soundscape Entity",
          "description": "The soundscape to get all sound parameters from.",
          "deflt": ""
        },
        {
          "type": "integer",
          "name": "radius",
          "title": "Radius",
          "deflt": 128
        }
      ]
    },
    {
      "name": "env_soundscape",
      "type": "PointClass",
      "description": "An entity to control sound in an area. The active soundscape at any time is the last one that had line-of-sight to the player, and was within the radius.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "EnableDisable"
          ]
        },
        {
          "name": "sphere",
          "values": []
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_soundscape.vmt"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "position0"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "position1"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "position2"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "position3"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "position4"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "position5"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "position6"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "position7"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "radius",
          "title": "Radius",
          "description": "If set to -1, then the player can hear the soundscape as long as he can see it (regardless of distance to it).",
          "deflt": 128
        },
        {
          "type": "choices",
          "name": "soundscape",
          "title": "Soundscape",
          "description": "The name of the soundscape to use. Corresponds to an entry in the soundscapes*.txt file in the hl2\\scripts directory.",
          "deflt": "Nothing",
          "choices": {
            "Nothing": "Nothing",
            "Automatic": "Automatic",
            "Automatic_Dialog": "Automatic (dialog)",
            "GenericIndoor": "Indoor",
            "GenericOutdoor": "Outdoor"
          }
        },
        {
          "type": "target_destination",
          "name": "position0",
          "title": "Sound Position 0",
          "description": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "position1",
          "title": "Sound Position 1",
          "description": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "position2",
          "title": "Sound Position 2",
          "description": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "position3",
          "title": "Sound Position 3",
          "description": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "position4",
          "title": "Sound Position 4",
          "description": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "position5",
          "title": "Sound Position 5",
          "description": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "position6",
          "title": "Sound Position 6",
          "description": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "position7",
          "title": "Sound Position 7",
          "description": "A sound position that will be referenced inside the soundscape text file. Usually used to position a set of sounds within the world.",
          "deflt": ""
        }
      ],
      "inputs": [
        {
          "name": "Enable",
          "description": "Enable the soundscape.",
          "type": "void"
        },
        {
          "name": "Disabled",
          "description": "Disable the soundscape.",
          "type": "void"
        },
        {
          "name": "ToggleEnabled",
          "description": "Toggle the soundscape enabled state.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnPlay",
          "description": "Fired when this soundscape becomes the active one.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_soundscape_triggerable",
      "type": "PointClass",
      "description": "An entity that works like env_soundscape except that it works in conjunction with trigger_soundscape to determine when a player hears it.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "env_soundscape"
          ]
        },
        {
          "name": "sphere",
          "values": []
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_soundscape.vmt"
          ]
        }
      ]
    },
    {
      "name": "env_spark",
      "type": "PointClass",
      "description": "An entity used to create sparks at its origin.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_spark.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "MaxDelay",
          "title": "Max Delay",
          "description": "The longest delay between sparks (in seconds).",
          "deflt": "0"
        },
        {
          "type": "choices",
          "name": "Magnitude",
          "title": "Magnitude",
          "description": "The size of the sparks.",
          "deflt": 1,
          "choices": {
            "1": "Small",
            "2": "Medium",
            "5": "Large",
            "8": "Huge"
          }
        },
        {
          "type": "choices",
          "name": "TrailLength",
          "title": "Spark Trail Length",
          "deflt": 1,
          "choices": {
            "1": "Short",
            "2": "Medium",
            "3": "Long"
          }
        }
      ],
      "flags": [
        {
          "title": "Start ON",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Glow",
          "value": 128,
          "enabled": false
        },
        {
          "title": "Silent",
          "value": 256,
          "enabled": false
        },
        {
          "title": "Directional",
          "value": 512,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "StartSpark",
          "description": "Start the spark effect.",
          "type": "void"
        },
        {
          "name": "StopSpark",
          "description": "Stop the spark effect.",
          "type": "void"
        },
        {
          "name": "ToggleSpark",
          "description": "Toggle the on/off state of the spark effect.",
          "type": "void"
        },
        {
          "name": "SparkOnce",
          "description": "Spark once.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_sprite",
      "type": "PointClass",
      "description": "An entity that controls the drawing of a sprite in the world.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "RenderFields",
            "DXLevelChoice"
          ]
        },
        {
          "name": "size",
          "values": [
            -2,
            -2,
            -2,
            2,
            2,
            2
          ]
        },
        {
          "name": "sprite",
          "values": []
        },
        {
          "name": "color",
          "values": [
            20,
            140,
            20
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "framerate",
          "title": "Framerate",
          "description": "Rate at which the sprite should animate, if at all.",
          "deflt": "10.0"
        },
        {
          "type": "sprite",
          "name": "model",
          "title": "Sprite Name",
          "description": "Material of the sprite to be drawn.",
          "deflt": "sprites/glow01.spr"
        },
        {
          "type": "string",
          "name": "scale",
          "title": "Scale",
          "description": "Scale multiplier of the sprite.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "GlowProxySize",
          "title": "Size of Glow Proxy Geometry.",
          "description": "Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space.  So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered.",
          "deflt": "2.0"
        },
        {
          "type": "float",
          "name": "HDRColorScale",
          "title": "HDR color scale.",
          "description": "float value to multiply sprite color by when running in HDR mode.",
          "deflt": "1.0"
        }
      ],
      "flags": [
        {
          "title": "Start on",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Play Once",
          "value": 2,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "ColorRedValue",
          "description": "Sets the red color channel's value (0 - 255).",
          "type": "float"
        },
        {
          "name": "ColorGreenValue",
          "description": "Sets the green color channel's value (0 - 255).",
          "type": "float"
        },
        {
          "name": "ColorBlueValue",
          "description": "Sets the blue color channel's value (0 - 255).",
          "type": "float"
        },
        {
          "name": "SetScale",
          "description": "Set the sprite's scale (0 - 8.0).",
          "type": "float"
        },
        {
          "name": "HideSprite",
          "description": "Hide the sprite. Won't be drawn until the 'ShowSprite' input is received.",
          "type": "void"
        },
        {
          "name": "ShowSprite",
          "description": "Show the sprite.",
          "type": "void"
        },
        {
          "name": "ToggleSprite",
          "description": "Toggle the sprite between hidden and shown.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_sprite_oriented",
      "type": "PointClass",
      "description": "A env_sprite that allows orientation.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "env_sprite",
            "Angles"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "framerate",
          "title": "Framerate",
          "description": "Rate at which the sprite should animate, if at all.",
          "deflt": "10.0"
        },
        {
          "type": "sprite",
          "name": "model",
          "title": "Sprite Name",
          "description": "Material of the sprite to be drawn.",
          "deflt": "sprites/glow01.spr"
        },
        {
          "type": "string",
          "name": "scale",
          "title": "Scale",
          "description": "Scale multiplier of the sprite.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "GlowProxySize",
          "title": "Size of Glow Proxy Geometry.",
          "description": "Size of the glow to be rendered for visibility testing. Must be larger than the distance from the sprite center to empty space.  So if this glow is inside geometry (like a light bulb), set this value to be bigger than the bulb's radius. Any time a sphere of this radius would be visible (poking through any nearby geometry), the glow will be rendered.",
          "deflt": "2.0"
        },
        {
          "type": "float",
          "name": "HDRColorScale",
          "title": "HDR color scale.",
          "description": "float value to multiply sprite color by when running in HDR mode.",
          "deflt": "1.0"
        }
      ],
      "flags": [
        {
          "title": "Start on",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Play Once",
          "value": 2,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "ColorRedValue",
          "description": "Sets the red color channel's value (0 - 255).",
          "type": "float"
        },
        {
          "name": "ColorGreenValue",
          "description": "Sets the green color channel's value (0 - 255).",
          "type": "float"
        },
        {
          "name": "ColorBlueValue",
          "description": "Sets the blue color channel's value (0 - 255).",
          "type": "float"
        },
        {
          "name": "SetScale",
          "description": "Set the sprite's scale (0 - 8.0).",
          "type": "float"
        },
        {
          "name": "HideSprite",
          "description": "Hide the sprite. Won't be drawn until the 'ShowSprite' input is received.",
          "type": "void"
        },
        {
          "name": "ShowSprite",
          "description": "Show the sprite.",
          "type": "void"
        },
        {
          "name": "ToggleSprite",
          "description": "Toggle the sprite between hidden and shown.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_wind",
      "type": "PointClass",
      "description": "An entity to control wind in the map. Partially functional.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_wind.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "minwind",
          "title": "Min normal speed",
          "description": "Minimum speed of the wind while idling.",
          "deflt": 20
        },
        {
          "type": "integer",
          "name": "maxwind",
          "title": "Max normal speed",
          "description": "Maximum speed of the wind while idling.",
          "deflt": 50
        },
        {
          "type": "integer",
          "name": "mingust",
          "title": "Min gust speed",
          "description": "Minimum speed of wind gusts.",
          "deflt": 100
        },
        {
          "type": "integer",
          "name": "maxgust",
          "title": "Max gust speed",
          "description": "Maximum speed of wind gusts.",
          "deflt": 250
        },
        {
          "type": "integer",
          "name": "mingustdelay",
          "title": "Min gust delay",
          "description": "Minimum time delay between random gusts.",
          "deflt": 10
        },
        {
          "type": "integer",
          "name": "maxgustdelay",
          "title": "Max gust delay",
          "description": "Maximum time delay between random gusts.",
          "deflt": 20
        },
        {
          "type": "integer",
          "name": "gustduration",
          "title": "Gust Duration",
          "description": "How long will the wind gust for.",
          "deflt": 5
        },
        {
          "type": "integer",
          "name": "gustdirchange",
          "title": "Max gust dir change (degrees)",
          "description": "Maximum amount that the wind's direction changes due to a gust.",
          "deflt": 20
        }
      ],
      "outputs": [
        {
          "name": "OnGustStart",
          "description": "Fired when a wind gust begins.",
          "type": "void"
        },
        {
          "name": "OnGustEnd",
          "description": "Fired when a wind gust ends.",
          "type": "void"
        }
      ]
    },
    {
      "name": "sky_camera",
      "type": "PointClass",
      "description": "An entity used to control the 3D Skybox. Its origin is used to determine the 3D Skybox's position relative to the map. Place this entity, in the 3D Skybox, at the point where the origin of the map should be.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Angles"
          ]
        },
        {
          "name": "size",
          "values": [
            -16,
            -16,
            -16,
            16,
            16,
            16
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            0,
            255
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "scale",
          "title": "3D Skybox scale",
          "description": "Scale of the skybox.",
          "deflt": 16
        },
        {
          "type": "choices",
          "name": "fogenable",
          "title": "Fog Enable",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "fogblend",
          "title": "Fog Blend",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "use_angles",
          "title": "Use Angles for Fog Dir",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "color255",
          "name": "fogcolor",
          "title": "Primary Fog Color",
          "deflt": "255 255 255"
        },
        {
          "type": "color255",
          "name": "fogcolor2",
          "title": "Secondary Fog Color",
          "deflt": "255 255 255"
        },
        {
          "type": "string",
          "name": "fogdir",
          "title": "Primary Fog Dir",
          "deflt": "1 0 0"
        },
        {
          "type": "string",
          "name": "fogstart",
          "title": "Fog Start",
          "description": "Distance at which the skybox fog should start.",
          "deflt": "500.0"
        },
        {
          "type": "string",
          "name": "fogend",
          "title": "Fog End",
          "description": "Distance at which the skybox fog should be fully opaque.",
          "deflt": "2000.0"
        },
        {
          "type": "float",
          "name": "fogmaxdensity",
          "title": "Fog Max Density [0..1]",
          "description": "How dense the fog will appear, 0 - fully transparent, 1 - fully opaque",
          "deflt": "1"
        }
      ]
    },
    {
      "name": "BaseSpeaker",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "ResponseContext"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "delaymin",
          "title": "Min Delay Between Announcements",
          "deflt": "15"
        },
        {
          "type": "string",
          "name": "delaymax",
          "title": "Max Delay Between Announcements",
          "deflt": "135"
        },
        {
          "type": "string",
          "name": "rulescript",
          "title": "Context rule script",
          "description": "Script file containing rules for playing appropriate sounds.",
          "deflt": ""
        },
        {
          "type": "string",
          "name": "concept",
          "title": "Concept name",
          "description": "High level concept name used as primary search key.",
          "deflt": ""
        }
      ],
      "flags": [
        {
          "title": "Start Silent",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Play Everywhere",
          "value": 2,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Turn on the random announcements.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turn off the random announcements.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle the random announcements off and on.",
          "type": "void"
        }
      ]
    },
    {
      "name": "game_weapon_manager",
      "type": "PointClass",
      "description": "An entity used to limit the number of a particular weapon type in the world. Useful in places where NPCs are spawning rapidly, dying, and dropping weapons.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "weaponname",
          "title": "Weapon Classname",
          "description": "Classname of the weapon type to limit.",
          "deflt": ""
        },
        {
          "type": "integer",
          "name": "maxpieces",
          "title": "Max Allowed in Level",
          "description": "The maximum amount of the specified weapon type allowed in the world.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "ammomod",
          "title": "Ammo modifier",
          "description": "Modifier for ammount of ammo dropped by a weapon.",
          "deflt": 1
        }
      ],
      "inputs": [
        {
          "name": "SetAmmoModifier",
          "description": "Adjust the ammo modifier.",
          "type": "float"
        }
      ]
    },
    {
      "name": "game_end",
      "type": "PointClass",
      "description": "An entity that ends a multiplayer game.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/game_end.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "master",
          "title": "Master (Obsolete)",
          "description": "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
        }
      ],
      "inputs": [
        {
          "name": "EndGame",
          "description": "End the multiplayer game.",
          "type": "void"
        }
      ]
    },
    {
      "name": "game_player_equip",
      "type": "PointClass",
      "description": "An entity that gives equipment to the player who activates it. To use, add new keys to this entity, where each key is the classname of a weapon/item, and the corresponding value is the number of those weapons/items to give to the player who uses this entity. If the 'Use Only' spawnflag isn't set, then players can just touch this entity to get the equipment.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "flags": [
        {
          "title": "Use Only",
          "value": 1,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "master",
          "title": "Team Master (Obsolete)",
          "description": "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
        }
      ]
    },
    {
      "name": "game_player_team",
      "type": "PointClass",
      "description": "An entity that changes the team of the player who activates it.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "flags": [
        {
          "title": "Remove On fire",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Kill Player",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Gib Player",
          "value": 4,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "target",
          "title": "game_team_master to use"
        },
        {
          "type": "string",
          "name": "master",
          "title": "Master (Obsolete)",
          "description": "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
        }
      ]
    },
    {
      "name": "game_score",
      "type": "PointClass",
      "description": "An entity that awards/deducts points from the player who activates it.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "flags": [
        {
          "title": "Allow Negative",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Team Points",
          "value": 2,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "points",
          "title": "Points to add (+/-)",
          "deflt": 1
        },
        {
          "type": "string",
          "name": "master",
          "title": "Master (Obsolete)",
          "description": "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
        }
      ],
      "inputs": [
        {
          "name": "ApplyScore",
          "description": "Add score to player.",
          "type": "void"
        }
      ]
    },
    {
      "name": "game_text",
      "type": "PointClass",
      "description": "An entity that displays text on player's screens.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/game_text.vmt"
          ]
        }
      ],
      "flags": [
        {
          "title": "All Players",
          "value": 1,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "message",
          "title": "Message Text",
          "description": "Message to display onscreen.",
          "deflt": ""
        },
        {
          "type": "string",
          "name": "x",
          "title": "X (0 - 1.0 = left to right) (-1 centers)",
          "description": "Horizontal position on the player's screens to draw the text. The value should be between 0 and 1, where 0 is the far left of the screen and 1 is the far right. -1 centers the text.",
          "deflt": "-1"
        },
        {
          "type": "string",
          "name": "y",
          "title": "Y (0 - 1.0 = top to bottom) (-1 centers)",
          "description": "Vertical position on the player's screens to draw the text. The value should be between 0 and 1, where 0 is the top of the screen and 1 is the bottom. -1 centers the text.",
          "deflt": "-1"
        },
        {
          "type": "choices",
          "name": "effect",
          "title": "Text Effect",
          "deflt": 0,
          "choices": {
            "0": "Fade In/Out",
            "1": "Credits",
            "2": "Scan Out"
          }
        },
        {
          "type": "color255",
          "name": "color",
          "title": "Color1",
          "deflt": "100 100 100"
        },
        {
          "type": "color255",
          "name": "color2",
          "title": "Color2",
          "deflt": "240 110 0"
        },
        {
          "type": "string",
          "name": "fadein",
          "title": "Fade in Time (or character scan time)",
          "description": "The time it should take for the text to fully fade in.",
          "deflt": "1.5"
        },
        {
          "type": "string",
          "name": "fadeout",
          "title": "Fade Out Time",
          "description": "The time it should take for the text to fade out, after the hold time has expired.",
          "deflt": "0.5"
        },
        {
          "type": "string",
          "name": "holdtime",
          "title": "Hold Time",
          "description": "The time the text should stay onscreen, after fading in, before it begins to fade out.",
          "deflt": "1.2"
        },
        {
          "type": "string",
          "name": "fxtime",
          "title": "Scan time (scan effect only)",
          "description": "If the 'Text Effect' is set to Scan Out, this is the time it should take to scan out all the letters in the text.",
          "deflt": "0.25"
        },
        {
          "type": "choices",
          "name": "channel",
          "title": "Text Channel",
          "description": "You can have up to four individual game_text messages onscreen at once, stored in channels. Select which channel this text should be placed in, which will overwrite any active message already in that channel.",
          "deflt": 1,
          "choices": {
            "1": "Channel 1",
            "2": "Channel 2",
            "3": "Channel 3",
            "4": "Channel 4"
          }
        },
        {
          "type": "string",
          "name": "master",
          "title": "Master",
          "description": "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
        }
      ],
      "inputs": [
        {
          "name": "Display",
          "description": "Display the message text.",
          "type": "void"
        }
      ]
    },
    {
      "name": "point_enable_motion_fixup",
      "type": "PointClass",
      "description": "An entity used to move a motion-disabled prop when it enables motion. Parent this entity to the prop, and when the prop has its motion enabled, it will immediately teleport to the origin of this entity.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "size",
          "values": [
            -2,
            -2,
            -2,
            2,
            2,
            2
          ]
        }
      ]
    },
    {
      "name": "point_message",
      "type": "PointClass",
      "description": "An entity that displays a text message in the world, at its origin.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "flags": [
        {
          "title": "Start Disabled",
          "value": 1,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "message",
          "title": "Entity Message"
        },
        {
          "type": "integer",
          "name": "radius",
          "title": "Show message radius",
          "description": "Distance the player must be within to see this message.",
          "deflt": 128
        },
        {
          "type": "choices",
          "name": "developeronly",
          "title": "Developer Only?",
          "description": "If set, this message will only be visible when developer mode is on.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "Enable",
          "description": "Start displaying the message text, if the player is within the message radius.",
          "type": "void"
        },
        {
          "name": "Disable",
          "description": "Stop displaying the message text.",
          "type": "void"
        }
      ]
    },
    {
      "name": "point_spotlight",
      "type": "PointClass",
      "description": "An entity to draw a spotlight. Will draw a beam when the player views it side on, and a halo when it's facing towards the player. Unless the 'No Dynamic Light' spawnflag is checked, it will also create a dynamic light wherever the end of the spotlight rests.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "RenderFields",
            "Angles",
            "DXLevelChoice"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/cone_helper.mdl"
          ]
        }
      ],
      "flags": [
        {
          "title": "Start On",
          "value": 1,
          "enabled": true
        },
        {
          "title": "No Dynamic Light",
          "value": 2,
          "enabled": true
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "spotlightlength",
          "title": "Spotlight Length",
          "description": "Length of the spotlight beam.",
          "deflt": 500
        },
        {
          "type": "integer",
          "name": "spotlightwidth",
          "title": "Spotlight Width",
          "description": "Width of the spotlight beam.",
          "deflt": 50
        },
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "Color (R G B)",
          "deflt": "255 255 255"
        },
        {
          "type": "float",
          "name": "HDRColorScale",
          "title": "HDR color scale.",
          "description": "float value to multiply sprite color by when running in HDR mode.",
          "deflt": "1.0"
        }
      ],
      "inputs": [
        {
          "name": "LightOn",
          "description": "Turn the spotlight on.",
          "type": "void"
        },
        {
          "name": "LightOff",
          "description": "Turn the spotlight off",
          "type": "void"
        },
        {
          "name": "SetColor",
          "description": "Change the spotlight beam color.",
          "type": "color255"
        },
        {
          "name": "ForceUpdate",
          "description": "Forcibly update the spotlight beam position",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnLightOn",
          "description": "Fires when light turns on.",
          "type": "void"
        },
        {
          "name": "OnLightOff",
          "description": "Fires when light turns off.",
          "type": "void"
        }
      ]
    },
    {
      "name": "point_tesla",
      "type": "PointClass",
      "description": "An entity that creates tesla lightning arcs around its origin.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "m_SourceEntityName",
          "title": "Source Entity",
          "description": "If specified, tesla lightning will originate from the specified entity. Otherwise, they originate from this entity.",
          "deflt": ""
        },
        {
          "type": "string",
          "name": "m_SoundName",
          "title": "Sound Name",
          "description": "Sound to be played whenever lightning is created.",
          "deflt": "DoSpark"
        },
        {
          "type": "sprite",
          "name": "texture",
          "title": "Sprite Name",
          "description": "Material to use for the tesla lightning beams.",
          "deflt": "sprites/physbeam.vmt"
        },
        {
          "type": "color255",
          "name": "m_Color",
          "title": "Color",
          "deflt": "255 255 255"
        },
        {
          "type": "integer",
          "name": "m_flRadius",
          "title": "Radius",
          "description": "Radius around the origin to find a point to strike with a tesla lightning beam.",
          "deflt": 200
        },
        {
          "type": "integer",
          "name": "beamcount_min",
          "title": "Min # of Beams",
          "description": "Minimum number of tesla lightning beams to create when creating an arc.",
          "deflt": 6
        },
        {
          "type": "integer",
          "name": "beamcount_max",
          "title": "Max # of Beams",
          "description": "Maximum number of tesla lightning beams to create when creating an arc.",
          "deflt": 8
        },
        {
          "type": "string",
          "name": "thick_min",
          "title": "Min Beam Width",
          "description": "Minimum width of the tesla lightning beams.",
          "deflt": "4"
        },
        {
          "type": "string",
          "name": "thick_max",
          "title": "Max Beam Width",
          "description": "Maximum width of the tesla lightning beams.",
          "deflt": "5"
        },
        {
          "type": "string",
          "name": "lifetime_min",
          "title": "Min Time Visible",
          "description": "Minimum lifetime of the tesla lightning beams.",
          "deflt": "0.3"
        },
        {
          "type": "string",
          "name": "lifetime_max",
          "title": "Max Time Visible",
          "description": "Maximum lifetime of the tesla lightning beams.",
          "deflt": "0.3"
        },
        {
          "type": "string",
          "name": "interval_min",
          "title": "Min Time Between Arcs",
          "description": "Minimum time delay between random arcing.",
          "deflt": "0.5"
        },
        {
          "type": "string",
          "name": "interval_max",
          "title": "Max Time Between Arcs",
          "description": "Maximum time delay between random arcing.",
          "deflt": "2"
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Turn emitter on.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turn emitter off.",
          "type": "void"
        },
        {
          "name": "DoSpark",
          "description": "Force a single arc.",
          "type": "void"
        }
      ]
    },
    {
      "name": "point_clientcommand",
      "type": "PointClass",
      "description": "An entity that issues commands to the client console, as if it was typed in by the player (if activator is a player, or the local player in single player).",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "inputs": [
        {
          "name": "Command",
          "description": "Command to execute.",
          "type": "string"
        }
      ]
    },
    {
      "name": "point_servercommand",
      "type": "PointClass",
      "description": "An entity that issues commands to the server console.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "inputs": [
        {
          "name": "Command",
          "description": "Command to execute.",
          "type": "string"
        }
      ]
    },
    {
      "name": "point_bonusmaps_accessor",
      "type": "PointClass",
      "description": "An entity that relays bonus maps changes.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "filename",
          "title": "File Name",
          "deflt": ""
        },
        {
          "type": "string",
          "name": "mapname",
          "title": "Map Name",
          "deflt": ""
        }
      ],
      "inputs": [
        {
          "name": "Unlock",
          "description": "Unlocks the filename/map combination.",
          "type": "void"
        },
        {
          "name": "Complete",
          "description": "Completes the filename/map combination.",
          "type": "void"
        },
        {
          "name": "Save",
          "description": "Saves bonus map data.",
          "type": "void"
        }
      ]
    },
    {
      "name": "game_ui",
      "type": "PointClass",
      "description": "An entity used to override player input when the player is looking at it.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "flags": [
        {
          "title": "Freeze Player",
          "value": 32,
          "enabled": true
        },
        {
          "title": "Hide Weapon",
          "value": 64,
          "enabled": true
        },
        {
          "title": "+Use Deactivates",
          "value": 128,
          "enabled": true
        },
        {
          "title": "Jump Deactivates",
          "value": 256,
          "enabled": true
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "FieldOfView",
          "title": "FieldOfView",
          "description": "The amount of tolerance in the view checking when determining whether the player's input is still under control. 1.0 = straight ahead, 0.0 = +/- 90 degrees, -1.0 = all directions. If the player isn't within the tolerance, the player regains control.",
          "deflt": "-1.0"
        }
      ],
      "inputs": [
        {
          "name": "Deactivate",
          "description": "Return Player Control.",
          "type": "void"
        },
        {
          "name": "Activate",
          "description": "Take Player Control.",
          "type": "string"
        }
      ],
      "outputs": [
        {
          "name": "PlayerOn",
          "description": "Fired whenever this entity starts controlling the player's input.",
          "type": "void"
        },
        {
          "name": "PlayerOff",
          "description": "Fired whenever this entity stops controlling the player's input.",
          "type": "void"
        },
        {
          "name": "PressedMoveLeft",
          "description": "Fired whenever the player presses the moveleft key.",
          "type": "void"
        },
        {
          "name": "PressedMoveRight",
          "description": "Fired whenever the player presses the moveright key.",
          "type": "void"
        },
        {
          "name": "PressedForward",
          "description": "Fired whenever the player presses the forward key.",
          "type": "void"
        },
        {
          "name": "PressedBack",
          "description": "Fired whenever the player presses the backward key.",
          "type": "void"
        },
        {
          "name": "PressedAttack",
          "description": "Fired whenever the player presses the attack key.",
          "type": "void"
        },
        {
          "name": "PressedAttack2",
          "description": "Fired whenever the player presses the secondary attack key.",
          "type": "void"
        },
        {
          "name": "UnpressedMoveLeft",
          "description": "Fired whenever the player releases the moveleft key.",
          "type": "void"
        },
        {
          "name": "UnpressedMoveRight",
          "description": "Fired whenever the player releases the moveright key.",
          "type": "void"
        },
        {
          "name": "UnpressedForward",
          "description": "Fired whenever the player releases the forward key.",
          "type": "void"
        },
        {
          "name": "UnpressedBack",
          "description": "Fired whenever the player releases the backward key.",
          "type": "void"
        },
        {
          "name": "UnpressedAttack",
          "description": "Fired whenever the player releases the attack key.",
          "type": "void"
        },
        {
          "name": "UnpressedAttack2",
          "description": "Fired whenever the player releases the secondary attack key.",
          "type": "void"
        },
        {
          "name": "XAxis",
          "description": "An output that fires whenever the X axis of the player's input changes. i.e. -1 when the player has moveleft key down, 1 when the player has moveright key down, and 0 if neither.",
          "type": "string"
        },
        {
          "name": "YAxis",
          "description": "An output that fires whenever the Y axis of the player's input changes. i.e. -1 when the player has backward key down, 1 when the player has forward key down, and 0 if neither.",
          "type": "string"
        },
        {
          "name": "AttackAxis",
          "description": "An output that fires whenever the state of the player's attack key changes. i.e. 1 when the player has the attack key down, 0 otherwise.",
          "type": "string"
        },
        {
          "name": "Attack2Axis",
          "description": "An output that fires whenever the state of the player's secondary attack key changes. i.e. 1 when the player has the secondary attack key down, 0 otherwise.",
          "type": "string"
        }
      ]
    },
    {
      "name": "game_zone_player",
      "type": "SolidClass",
      "description": "An entity used to count the number of players within a zone.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        }
      ],
      "inputs": [
        {
          "name": "CountPlayersInZone",
          "description": "Count the number of players in the zone, and fire the corresponding outputs.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnPlayerInZone",
          "description": "Fired whenever a count finds a player inside the zone, with the player as the activator.",
          "type": "void"
        },
        {
          "name": "OnPlayerOutZone",
          "description": "Fired whenever a count finds a player outside the zone, with the player as the activator.",
          "type": "void"
        },
        {
          "name": "PlayersInCount",
          "description": "Fired after a count, and contains the number of players found inside the zone.",
          "type": "integer"
        },
        {
          "name": "PlayersOutCount",
          "description": "Fired after a count, and contains the number of players found outside the zone.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "infodecal",
      "type": "PointClass",
      "description": "An entity that places a decal on the world. If the decal has no target name, it will immediately apply itself when the level is loaded. If it has a name specified, it won't apply until it receives the 'Activate' input.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "decal",
          "values": []
        },
        {
          "name": "studio",
          "values": [
            "models/editor/axis_helper_thick.mdl"
          ]
        }
      ],
      "properties": [
        {
          "type": "decal",
          "name": "texture"
        },
        {
          "type": "choices",
          "name": "LowPriority",
          "title": "Low Priority (can be replaced)",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "Activate",
          "description": "Force the decal to apply itself to the world.",
          "type": "void"
        }
      ]
    },
    {
      "name": "info_projecteddecal",
      "type": "PointClass",
      "description": "An entity that projects a decal onto the world (or props). If the decal has no target name, it will immediately apply itself when the level is loaded. If it has a name specified, it won't apply until it receives the 'Activate' input.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Angles",
            "Targetname"
          ]
        },
        {
          "name": "decal",
          "values": []
        },
        {
          "name": "studio",
          "values": [
            "models/editor/axis_helper_thick.mdl"
          ]
        }
      ],
      "properties": [
        {
          "type": "decal",
          "name": "texture"
        },
        {
          "type": "float",
          "name": "Distance",
          "title": "Distance",
          "description": "Distance from the origin to project the decal.",
          "deflt": 64
        }
      ],
      "inputs": [
        {
          "name": "Activate",
          "description": "Force the decal to apply itself to the world.",
          "type": "void"
        }
      ]
    },
    {
      "name": "info_no_dynamic_shadow",
      "type": "PointClass",
      "description": "Use this entity to mark surfaces that shouldn't receive dynamic shadows. Useful to apply to walls and floors where shadows are drawn improperly, giving away the location of enemies.",
      "properties": [
        {
          "type": "sidelist",
          "name": "sides",
          "title": "Brush faces"
        }
      ]
    },
    {
      "name": "info_player_start",
      "type": "PointClass",
      "description": "This entity indicates the position and facing direction at which the player will spawn. Any number of info_player_start entities may be placed in a map for when working in cordoned-off portions of the map. When multiple info_player_start entities are present in a map, set the 'Master' spawnflag on one of them to indicate which one should be used when running the entire map.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "PlayerClass",
            "Angles"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/playerstart.mdl"
          ]
        }
      ],
      "flags": [
        {
          "title": "Master (Has priority if multiple info_player_starts exist)",
          "value": 1,
          "enabled": false
        }
      ]
    },
    {
      "name": "info_overlay",
      "type": "PointClass",
      "description": "An entity that places an overlay on the world.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -1,
            -1,
            0,
            1,
            1,
            1
          ]
        },
        {
          "name": "color",
          "values": [
            80,
            150,
            225
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/overlay_helper.mdl"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fademindist"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fademaxdist"
          ]
        },
        {
          "name": "overlay",
          "values": []
        }
      ],
      "properties": [
        {
          "type": "material",
          "name": "material",
          "title": "Material"
        },
        {
          "type": "sidelist",
          "name": "sides",
          "title": "Brush faces"
        },
        {
          "type": "integer",
          "name": "RenderOrder",
          "title": "Render Order",
          "description": "Higher values render after lower values. This value can be 0-3.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "StartU",
          "title": "U Start",
          "deflt": "0.0"
        },
        {
          "type": "float",
          "name": "EndU",
          "title": "U End",
          "deflt": "1.0"
        },
        {
          "type": "float",
          "name": "StartV",
          "title": "V Start",
          "deflt": "0.0"
        },
        {
          "type": "float",
          "name": "EndV",
          "title": "V End",
          "deflt": "1.0"
        },
        {
          "type": "vector",
          "name": "BasisOrigin",
          "title": "Overlay Basis Origin(Read-Only)"
        },
        {
          "type": "vector",
          "name": "BasisU",
          "title": "Overlay Basis U(Read-Only)"
        },
        {
          "type": "vector",
          "name": "BasisV",
          "title": "Overlay Basis V(Read-Only)"
        },
        {
          "type": "vector",
          "name": "BasisNormal",
          "title": "Overlay Basis Normal(Read-Only)"
        },
        {
          "type": "vector",
          "name": "uv0",
          "title": "Overlay Point 1(Read-Only)"
        },
        {
          "type": "vector",
          "name": "uv1",
          "title": "Overlay Point 2(Read-Only)"
        },
        {
          "type": "vector",
          "name": "uv2",
          "title": "Overlay Point 3(Read-Only)"
        },
        {
          "type": "vector",
          "name": "uv3",
          "title": "Overlay Point 4(Read-Only)"
        },
        {
          "type": "float",
          "name": "fademindist",
          "title": "Start Fade Dist",
          "description": "Distance at which the overlay starts to fade (<0 = use fademaxdist).",
          "deflt": -1
        },
        {
          "type": "float",
          "name": "fademaxdist",
          "title": "End Fade Dist",
          "description": "Maximum distance at which the overlay is visible (0 = don't fade out).",
          "deflt": 0
        }
      ]
    },
    {
      "name": "info_overlay_transition",
      "type": "PointClass",
      "description": "Overlay Transition",
      "parameters": [
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        },
        {
          "name": "sidelist",
          "values": [
            "sides"
          ]
        },
        {
          "name": "sidelist",
          "values": [
            "sides2"
          ]
        },
        {
          "name": "overlay_transition",
          "values": []
        }
      ],
      "properties": [
        {
          "type": "material",
          "name": "material",
          "title": "Material"
        },
        {
          "type": "sidelist",
          "name": "sides",
          "title": "Brush faces"
        },
        {
          "type": "sidelist",
          "name": "sides2",
          "title": "Water faces"
        },
        {
          "type": "float",
          "name": "LengthTexcoordStart",
          "title": "Texcoord Length Start",
          "deflt": "0.0"
        },
        {
          "type": "float",
          "name": "LengthTexcoordEnd",
          "title": "Texcoord Length End",
          "deflt": "1.0"
        },
        {
          "type": "float",
          "name": "WidthTexcoordStart",
          "title": "Texcoord Width Start",
          "deflt": "0.0"
        },
        {
          "type": "float",
          "name": "WidthTexcoordEnd",
          "title": "Texcoord Width End",
          "deflt": "1.0"
        },
        {
          "type": "float",
          "name": "Width1",
          "title": "Width Land",
          "deflt": "25.0"
        },
        {
          "type": "float",
          "name": "Width2",
          "title": "Width Water",
          "deflt": "25.0"
        },
        {
          "type": "integer",
          "name": "DebugDraw",
          "title": "Show Debug",
          "description": "Boolean value (0 or 1).",
          "deflt": 0
        }
      ]
    },
    {
      "name": "info_intermission",
      "type": "PointClass",
      "description": "An entity that defines an intermission spot where dead players will float until they respawn.",
      "parameters": [
        {
          "name": "size",
          "values": [
            -4,
            -4,
            -4,
            4,
            4,
            4
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            180,
            0
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Entity to look at",
          "description": "Name of entity that dead players will face while in intermission at this spot."
        }
      ]
    },
    {
      "name": "info_landmark",
      "type": "PointClass",
      "description": "An entity that acts as a landmark for transitions to another level. There should be a corresponding info_landmark entity in the next map. Entities will be transitioned to the next level relative to the info_landmark entities.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/info_landmark"
          ]
        }
      ]
    },
    {
      "name": "info_null",
      "type": "PointClass",
      "description": "An entity that's immediately removed on spawning. Useful as a spotlight target.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ]
    },
    {
      "name": "info_target",
      "type": "PointClass",
      "description": "An entity that does nothing. Very useful as a positioning entity for other entities to refer to (i.e. the endpoint of an env_beam) \n\n [JHammer] This is also the default entity when creating a entity from scratch.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/info_target.vmt"
          ]
        }
      ],
      "flags": [
        {
          "title": "Transmit to client",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Always Transmit",
          "value": 2,
          "enabled": false
        }
      ]
    },
    {
      "name": "info_particle_system",
      "type": "PointClass",
      "description": "An entity that spawns a particle system built using the particle editor.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/cone_helper.mdl"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint1"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint2"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint3"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint4"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint5"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint6"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint7"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint8"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint9"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint10"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint11"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint12"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint13"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint14"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint15"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint16"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint17"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint18"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint19"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint20"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint21"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint22"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint23"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint24"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint25"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint26"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint27"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint28"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint29"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint30"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint31"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint32"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint33"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint34"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint35"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint36"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint37"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint38"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint39"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint40"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint41"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint42"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint43"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint44"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint45"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint46"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint47"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint48"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint49"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint50"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint51"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint52"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint53"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint54"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint55"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint56"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint57"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint58"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint59"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint60"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint61"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint62"
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "targetname",
            "cpoint63"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "effect_name",
          "title": "Particle System Name"
        },
        {
          "type": "choices",
          "name": "start_active",
          "title": "Start Active?",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "flag_as_weather",
          "title": "Flag as Weather?",
          "description": "Is this particle system going to be used as a weather effect?",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "target_destination",
          "name": "cpoint1",
          "title": "Control Point 1",
          "description": "If set, control point 1 of the effect will be at this entity's location."
        },
        {
          "type": "target_destination",
          "name": "cpoint2",
          "title": "Control Point 2",
          "description": "If set, control point 2 of the effect will be at this entity's location. If control point 1 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint3",
          "title": "Control Point 3",
          "description": "If set, control point 3 of the effect will be at this entity's location. If control point 2 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint4",
          "title": "Control Point 4",
          "description": "If set, control point 4 of the effect will be at this entity's location. If control point 3 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint5",
          "title": "Control Point 5",
          "description": "If set, control point 5 of the effect will be at this entity's location. If control point 4 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint6",
          "title": "Control Point 6",
          "description": "If set, control point 6 of the effect will be at this entity's location. If control point 5 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint7",
          "title": "Control Point 7",
          "description": "If set, control point 7 of the effect will be at this entity's location. If control point 6 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint8",
          "title": "Control Point 8",
          "description": "If set, control point 8 of the effect will be at this entity's location. If control point 7 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint9",
          "title": "Control Point 9",
          "description": "If set, control point 9 of the effect will be at this entity's location. If control point 8 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint10",
          "title": "Control Point 10",
          "description": "If set, control point 10 of the effect will be at this entity's location. If control point 9 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint11",
          "title": "Control Point 11",
          "description": "If set, control point 11 of the effect will be at this entity's location. If control point 10 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint12",
          "title": "Control Point 12",
          "description": "If set, control point 12 of the effect will be at this entity's location. If control point 11 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint13",
          "title": "Control Point 13",
          "description": "If set, control point 13 of the effect will be at this entity's location. If control point 12 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint14",
          "title": "Control Point 14",
          "description": "If set, control point 14 of the effect will be at this entity's location. If control point 13 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint15",
          "title": "Control Point 15",
          "description": "If set, control point 15 of the effect will be at this entity's location. If control point 14 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint16",
          "title": "Control Point 16",
          "description": "If set, control point 16 of the effect will be at this entity's location. If control point 15 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint17",
          "title": "Control Point 17",
          "description": "If set, control point 17 of the effect will be at this entity's location. If control point 16 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint18",
          "title": "Control Point 18",
          "description": "If set, control point 18 of the effect will be at this entity's location. If control point 17 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint19",
          "title": "Control Point 19",
          "description": "If set, control point 19 of the effect will be at this entity's location. If control point 18 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint20",
          "title": "Control Point 20",
          "description": "If set, control point 20 of the effect will be at this entity's location. If control point 19 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint21",
          "title": "Control Point 21",
          "description": "If set, control point 21 of the effect will be at this entity's location. If control point 10 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint22",
          "title": "Control Point 22",
          "description": "If set, control point 22 of the effect will be at this entity's location. If control point 21 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint23",
          "title": "Control Point 23",
          "description": "If set, control point 23 of the effect will be at this entity's location. If control point 22 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint24",
          "title": "Control Point 24",
          "description": "If set, control point 24 of the effect will be at this entity's location. If control point 23 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint25",
          "title": "Control Point 25",
          "description": "If set, control point 25 of the effect will be at this entity's location. If control point 24 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint26",
          "title": "Control Point 26",
          "description": "If set, control point 26 of the effect will be at this entity's location. If control point 25 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint27",
          "title": "Control Point 27",
          "description": "If set, control point 27 of the effect will be at this entity's location. If control point 26 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint28",
          "title": "Control Point 28",
          "description": "If set, control point 28 of the effect will be at this entity's location. If control point 27 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint29",
          "title": "Control Point 29",
          "description": "If set, control point 29 of the effect will be at this entity's location. If control point 28 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint30",
          "title": "Control Point 30",
          "description": "If set, control point 30 of the effect will be at this entity's location. If control point 29 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint31",
          "title": "Control Point 31",
          "description": "If set, control point 31 of the effect will be at this entity's location. If control point 30 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint32",
          "title": "Control Point 32",
          "description": "If set, control point 32 of the effect will be at this entity's location. If control point 31 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint33",
          "title": "Control Point 33",
          "description": "If set, control point 33 of the effect will be at this entity's location. If control point 32 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint34",
          "title": "Control Point 34",
          "description": "If set, control point 34 of the effect will be at this entity's location. If control point 33 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint35",
          "title": "Control Point 35",
          "description": "If set, control point 35 of the effect will be at this entity's location. If control point 34 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint36",
          "title": "Control Point 36",
          "description": "If set, control point 36 of the effect will be at this entity's location. If control point 35 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint37",
          "title": "Control Point 37",
          "description": "If set, control point 37 of the effect will be at this entity's location. If control point 36 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint38",
          "title": "Control Point 38",
          "description": "If set, control point 38 of the effect will be at this entity's location. If control point 37 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint39",
          "title": "Control Point 39",
          "description": "If set, control point 39 of the effect will be at this entity's location. If control point 38 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint40",
          "title": "Control Point 40",
          "description": "If set, control point 40 of the effect will be at this entity's location. If control point 39 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint41",
          "title": "Control Point 41",
          "description": "If set, control point 41 of the effect will be at this entity's location. If control point 40 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint42",
          "title": "Control Point 42",
          "description": "If set, control point 42 of the effect will be at this entity's location. If control point 41 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint43",
          "title": "Control Point 43",
          "description": "If set, control point 43 of the effect will be at this entity's location. If control point 42 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint44",
          "title": "Control Point 44",
          "description": "If set, control point 44 of the effect will be at this entity's location. If control point 43 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint45",
          "title": "Control Point 45",
          "description": "If set, control point 45 of the effect will be at this entity's location. If control point 44 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint46",
          "title": "Control Point 46",
          "description": "If set, control point 46 of the effect will be at this entity's location. If control point 45 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint47",
          "title": "Control Point 47",
          "description": "If set, control point 47 of the effect will be at this entity's location. If control point 46 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint48",
          "title": "Control Point 48",
          "description": "If set, control point 48 of the effect will be at this entity's location. If control point 47 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint49",
          "title": "Control Point 49",
          "description": "If set, control point 49 of the effect will be at this entity's location. If control point 48 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint50",
          "title": "Control Point 50",
          "description": "If set, control point 50 of the effect will be at this entity's location. If control point 49 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint51",
          "title": "Control Point 51",
          "description": "If set, control point 51 of the effect will be at this entity's location. If control point 50 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint52",
          "title": "Control Point 52",
          "description": "If set, control point 52 of the effect will be at this entity's location. If control point 51 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint53",
          "title": "Control Point 53",
          "description": "If set, control point 53 of the effect will be at this entity's location. If control point 52 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint54",
          "title": "Control Point 54",
          "description": "If set, control point 54 of the effect will be at this entity's location. If control point 53 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint55",
          "title": "Control Point 55",
          "description": "If set, control point 55 of the effect will be at this entity's location. If control point 54 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint56",
          "title": "Control Point 56",
          "description": "If set, control point 56 of the effect will be at this entity's location. If control point 55 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint57",
          "title": "Control Point 57",
          "description": "If set, control point 57 of the effect will be at this entity's location. If control point 56 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint58",
          "title": "Control Point 58",
          "description": "If set, control point 58 of the effect will be at this entity's location. If control point 57 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint59",
          "title": "Control Point 59",
          "description": "If set, control point 59 of the effect will be at this entity's location. If control point 58 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint60",
          "title": "Control Point 60",
          "description": "If set, control point 60 of the effect will be at this entity's location. If control point 59 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint61",
          "title": "Control Point 61",
          "description": "If set, control point 61 of the effect will be at this entity's location. If control point 60 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint62",
          "title": "Control Point 62",
          "description": "If set, control point 62 of the effect will be at this entity's location. If control point 61 is not set, this will be ignored."
        },
        {
          "type": "target_destination",
          "name": "cpoint63",
          "title": "Control Point 63",
          "description": "If set, control point 63 of the effect will be at this entity's location. If control point 62 is not set, this will be ignored."
        },
        {
          "type": "integer",
          "name": "cpoint1_parent",
          "title": "Control Point 1's Parent",
          "description": "If set and nonzero, control point 1 of the effect will use this point for its parent.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "cpoint2_parent",
          "title": "Control Point 2's Parent",
          "description": "If set and nonzero, control point 2 of the effect will use this point for its parent.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "cpoint3_parent",
          "title": "Control Point 3's Parent",
          "description": "If set and nonzero, control point 3 of the effect will use this point for its parent.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "cpoint4_parent",
          "title": "Control Point 4's Parent",
          "description": "If set and nonzero, control point 4 of the effect will use this point for its parent.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "cpoint5_parent",
          "title": "Control Point 5's Parent",
          "description": "If set and nonzero, control point 5 of the effect will use this point for its parent.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "cpoint6_parent",
          "title": "Control Point 6's Parent",
          "description": "If set and nonzero, control point 6 of the effect will use this point for its parent.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "cpoint7_parent",
          "title": "Control Point 7's Parent",
          "description": "If set and nonzero, control point 7 of the effect will use this point for its parent.",
          "deflt": 0
        }
      ],
      "inputs": [
        {
          "name": "Start",
          "description": "Tell the particle system to start emitting.",
          "type": "void"
        },
        {
          "name": "Stop",
          "description": "Tell the particle system to stop emitting.",
          "type": "void"
        }
      ]
    },
    {
      "name": "phys_ragdollmagnet",
      "type": "PointClass",
      "description": "An entity that acts like a magnet for ragdolls. Useful for crafting exaggerated ragdoll behavior (i.e. guys falling over rails on death). If the Bar Magnet spawnflag is set, the magnet works like it was a cylindrical magnet i.e. it attracts ragdolls to the nearest point on a line.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "EnableDisable",
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/info_target.vmt"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "radius"
          ]
        }
      ],
      "properties": [
        {
          "type": "vecline",
          "name": "axis",
          "title": "Bar Magnet Axis"
        },
        {
          "type": "float",
          "name": "radius",
          "title": "Effective Radius",
          "description": "Radius in which ragdolls are affected around this entity's origin.",
          "deflt": "512"
        },
        {
          "type": "float",
          "name": "force",
          "title": "Force",
          "description": "Magnetic force to apply to ragdolls within the radius. Expressed as kilograms per inch per second. So a force of 1000 will add 10 inches/second to a 100kg man. It will add 100 inches per second to a 10kg headcrab.",
          "deflt": "5000"
        },
        {
          "type": "string",
          "name": "target",
          "title": "Entity to affect",
          "description": "If specified, the phys_ragdollmagnet will only affect the target entity.",
          "deflt": ""
        }
      ],
      "flags": [
        {
          "title": "Bar Magnet (use axis helper)",
          "value": 2,
          "enabled": false
        }
      ]
    },
    {
      "name": "info_lighting",
      "type": "PointClass",
      "description": "An entity that can be used to change the lighting origin of an entity. Set the entity's Lighting Origin to point at this entity to make the entity light as if it was at the info_lighting's origin. Good for entities that are embedded in world geometry (like rocks/windows/etc).",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/info_lighting.vmt"
          ]
        }
      ]
    },
    {
      "name": "info_lighting_relative",
      "type": "PointClass",
      "description": "An entity that can be used to change the lighting origin of an entity. Set the entity's Lighting Origin (Relative) to point at this entity to make the entity light as if it was at the info_lighting_relative's origin.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/info_lighting_relative.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "LightingLandmark",
          "title": "Lighting Landmark",
          "description": "Entity at which the reference origin is contained. If empty, the info_lighting_relative's origin will be used. For example an info_target parented to a prop.",
          "deflt": ""
        }
      ]
    },
    {
      "name": "info_teleport_destination",
      "type": "PointClass",
      "description": "An entity that does nothing itself, but can be used to specify the destination for a trigger_teleport entity. An info_target can be used instead.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles",
            "PlayerClass"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/playerstart.mdl"
          ]
        }
      ]
    },
    {
      "name": "info_node",
      "type": "PointClass",
      "description": "A navigation node for ground moving NPCs. Navigation nodes are baked into the nodegraph so that NPCs can move to them. Ground nodes fall to the ground when they spawn.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Node"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/ground_node.mdl"
          ]
        },
        {
          "name": "color",
          "values": [
            232,
            219,
            8
          ]
        }
      ],
      "flags": [
        {
          "title": "Force human permission",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Force small_centered permission",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Force wide_human permission",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Force tiny permissiont",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Force wide_short permission",
          "value": 16,
          "enabled": false
        },
        {
          "title": "Force medium permission",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Force tiny_centered permission",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Force large permission",
          "value": 128,
          "enabled": false
        },
        {
          "title": "Force large_centered permission",
          "value": 256,
          "enabled": false
        },
        {
          "title": "Keep editor position",
          "value": 512,
          "enabled": false
        }
      ]
    },
    {
      "name": "info_node_hint",
      "type": "PointClass",
      "description": "A navigation node for ground moving NPCs that includes some context information for NPCs that are interested in it. The hint might indicate a window that could be looked out of, or an item of interest that could be commented on. Many hint nodes are NPC-specific, so it's helpful to use naming conventions like 'Crow: Fly to point' in the hint choices list. The angles of a hint node indicate what direction the NPC should face to perform the hint behavior.\\n\\nIt's important to understand the distinction between scripts, such as scripted_sequence and scripted_schedule, and info_hint entities. Scripts summon NPCs to specific cue points to play their parts, while hints provide context information to the AI that they use to perform their behaviors. Hints require code support in the NPC, while scripts are generic and may require only animations to play. Use a hint if the behavior is driven by the AI, use a script if the behavior is driven by the map.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles",
            "HintNode"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/ground_node_hint.mdl"
          ]
        },
        {
          "name": "color",
          "values": [
            232,
            219,
            8
          ]
        }
      ],
      "outputs": [
        {
          "name": "OnNPCStartedUsing",
          "description": "Fired when an NPC has reached this node and started using it. Passes along the NPC.",
          "type": "string"
        },
        {
          "name": "OnNPCStoppedUsing",
          "description": "Fired when an NPC has stopped using this node. Passes along the NPC.",
          "type": "string"
        }
      ]
    },
    {
      "name": "info_node_air",
      "type": "PointClass",
      "description": "A navigation node for flying NPCs. Air navigation nodes are baked into the nodegraph so that NPCs can move to them. Air nodes do not fall to the ground when they spawn.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Node"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/air_node.mdl"
          ]
        },
        {
          "name": "color",
          "values": [
            232,
            171,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "nodeheight",
          "title": "NodeHeight",
          "deflt": 0
        }
      ]
    },
    {
      "name": "info_node_air_hint",
      "type": "PointClass",
      "description": "A navigation node for flying NPCs that includes some context information for NPCs that are interested in it. The hint might indicate a window that could be looked into, or an item of interest that could be commented on. Many hint nodes are NPC-specific, so it's helpful to use naming conventions like 'Crow: Fly to point' in the hint choices list. The angles of a hint node indicate what direction the NPC should face to perform the hint behavior.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Angles",
            "Targetname",
            "HintNode"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/air_node_hint.mdl"
          ]
        },
        {
          "name": "color",
          "values": [
            232,
            171,
            8
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "nodeid",
            "TargetNode"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "nodeheight",
          "title": "NodeHeight",
          "deflt": 0
        }
      ]
    },
    {
      "name": "info_hint",
      "type": "PointClass",
      "description": "A hint that is not used for navigation. They don't go into the nodegraph, nor do they fall to the ground. Use these to provide some spatial context for NPCs, such as 'look here if you can't find the player' or 'throw rocks at this spot'.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles",
            "HintNode"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/node_hint.mdl"
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            255,
            255
          ]
        }
      ]
    },
    {
      "name": "info_node_link",
      "type": "PointClass",
      "description": "A dynamic connection between two navigation nodes. You specify the node IDs of the start and end nodes, and then you can use entity I/O to turn on and off the connection. This could be used to create or destroy a connection in the nodegraph because of some event in your map (a bridge being created/destroyed, etc).",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "color",
          "values": [
            220,
            180,
            0
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        },
        {
          "name": "line",
          "values": [
            255,
            255,
            255,
            "nodeid",
            "StartNode",
            "nodeid",
            "EndNode"
          ]
        }
      ],
      "properties": [
        {
          "type": "node_dest",
          "name": "StartNode",
          "title": "Start node ID",
          "description": "The node ID of one end of the node connection."
        },
        {
          "type": "node_dest",
          "name": "EndNode",
          "title": "End node ID",
          "description": "The node ID of one end of the node connection."
        },
        {
          "type": "choices",
          "name": "initialstate",
          "title": "Initial State",
          "deflt": 1,
          "choices": {
            "0": "Off",
            "1": "On"
          }
        },
        {
          "type": "choices",
          "name": "linktype",
          "title": "Type of Connection",
          "deflt": 1,
          "choices": {
            "1": "Ground",
            "2": "Jump",
            "4": "Fly",
            "8": "Climb"
          }
        },
        {
          "type": "string",
          "name": "AllowUse",
          "title": "Allow Pass When Off",
          "description": "Entity or class to allow passage even when node is off"
        },
        {
          "type": "choices",
          "name": "InvertAllow",
          "title": "Invert exclusion rules",
          "description": "Allowed entity is the only entity NOT allowed when this is set to 'yes'",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "flags": [
        {
          "title": "Force human connect",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Force small_centered connect",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Force wide_human connect",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Force tiny connect",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Force wide_short connect",
          "value": 16,
          "enabled": false
        },
        {
          "title": "Force medium connect",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Force tiny_centered connect",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Force large connect",
          "value": 128,
          "enabled": false
        },
        {
          "title": "Force large_centered connect",
          "value": 256,
          "enabled": false
        },
        {
          "title": "Force medium_tall connect",
          "value": 512,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Turn the link on.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turn the link off.",
          "type": "void"
        }
      ]
    },
    {
      "name": "info_node_link_controller",
      "type": "PointClass",
      "description": "An entity that controls all connections between nodes that intersect the controller's volume. This allows for mass enabling/disabling of all node connections through a volume.",
      "parameters": [
        {
          "name": "wirebox",
          "values": [
            "mins",
            "maxs"
          ]
        },
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "vector",
          "name": "mins",
          "title": "Mins",
          "deflt": "-8 -32 -36"
        },
        {
          "type": "vector",
          "name": "maxs",
          "title": "Maxs",
          "deflt": "8 32 36"
        },
        {
          "type": "choices",
          "name": "initialstate",
          "title": "Initial State",
          "deflt": 1,
          "choices": {
            "0": "Off",
            "1": "On"
          }
        },
        {
          "type": "choices",
          "name": "useairlinkradius",
          "title": "Use Larger Radius (for air links)",
          "description": "Set this to 'Yes' if this controller is intended to control air links. Air links connect using a larger search radius so leaving this at 'No' might miss some air links.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "string",
          "name": "AllowUse",
          "title": "Allow Pass When Off",
          "description": "Entity or class to allow passage even when node is off"
        },
        {
          "type": "choices",
          "name": "InvertAllow",
          "title": "Invert exclusion rules",
          "description": "Allowed entity is the only entity NOT allowed when this is set to 'yes'",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Turn the link on.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turn the link off.",
          "type": "void"
        },
        {
          "name": "SetAllowed",
          "description": "Change the allowed pass when off",
          "type": "string"
        },
        {
          "name": "SetInvert",
          "description": "Change the invert exclusion rule",
          "type": "integer"
        }
      ]
    },
    {
      "name": "info_radial_link_controller",
      "type": "PointClass",
      "description": "This entity automatically severs node connections that pass through its radius. If it moves, it will restore those connections.",
      "parameters": [
        {
          "name": "sphere",
          "values": [
            "radius"
          ]
        },
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "radius",
          "title": "Radius (Use Helper!)",
          "deflt": 120
        }
      ]
    },
    {
      "name": "info_node_climb",
      "type": "PointClass",
      "description": "A climb-node for AI navigation. Only usable by NPCs that can climb.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles",
            "HintNode"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/climb_node.mdl"
          ]
        },
        {
          "name": "color",
          "values": [
            153,
            215,
            103
          ]
        }
      ]
    },
    {
      "name": "light",
      "type": "PointClass",
      "description": "An invisible omnidirectional lightsource.",
      "parameters": [
        {
          "name": "light",
          "values": []
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/light.vmt"
          ]
        },
        {
          "name": "base",
          "values": [
            "Targetname",
            "Light"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "_fifty_percent_distance"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "_zero_percent_distance"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Entity To Point At",
          "description": "The name of an entity in the map that the spotlight will point at. This will override the spotlight's angles."
        },
        {
          "type": "integer",
          "name": "_distance",
          "title": "Maximum Distance",
          "description": "This is the distance that light is allowed to cast, in inches.",
          "deflt": 0
        }
      ],
      "flags": [
        {
          "title": "Initially dark",
          "value": 1,
          "enabled": false
        }
      ]
    },
    {
      "name": "light_environment",
      "type": "PointClass",
      "description": "Sets the color and angle of the light from the sun and sky.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Angles"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/light_env.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "pitch",
          "title": "Pitch",
          "description": "The downward pitch of the light from the sun. 0 is horizontal, -90 is straight down.",
          "deflt": 0
        },
        {
          "type": "color255",
          "name": "_light",
          "title": "Brightness and Color",
          "description": "The sunlight color. Last number is the brightness.",
          "deflt": "255 255 255 200"
        },
        {
          "type": "color255",
          "name": "_ambient",
          "title": "Ambient Color and Brightness",
          "description": "The ambient color of the map, in the shadows/caves where there is no direct sunlight. Last number is the brightness.",
          "deflt": "255 255 255 20"
        },
        {
          "type": "color255",
          "name": "_lightHDR",
          "title": "Brightness (HDR)",
          "deflt": "-1 -1 -1 1"
        },
        {
          "type": "float",
          "name": "_lightscaleHDR",
          "title": "Brightness Scale (HDR)",
          "description": "Amount to scale the light by when compiling for HDR.",
          "deflt": "1"
        },
        {
          "type": "color255",
          "name": "_ambientHDR",
          "title": "Ambient (HDR)",
          "deflt": "-1 -1 -1 1"
        },
        {
          "type": "float",
          "name": "_AmbientScaleHDR",
          "title": "Ambient Scale (HDR)",
          "description": "Amount to scale the ambient light by when compiling for hdr.",
          "deflt": "1"
        },
        {
          "type": "integer",
          "name": "pitch",
          "title": "Pitch",
          "description": "The downward pitch of the light from the sun. 0 is horizontal, -90 is straight down.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "SunSpreadAngle",
          "title": "Sun Spread Angle",
          "description": "The angular extent of the sun for casting soft shadows. Higher numbers are more diffuse. 5 is a good starting value.",
          "deflt": 0
        },
        {
          "type": "target_source",
          "name": "targetname",
          "title": "Name (Read notes)",
          "description": "The name that other entities refer to this entity by. Setting this will allow scripts to control this entity, but will also substantially increase filesize of the map."
        }
      ]
    },
    {
      "name": "light_spot",
      "type": "PointClass",
      "description": "An invisible and directional spotlight.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles",
            "Light"
          ]
        },
        {
          "name": "lightprop",
          "values": [
            "models/editor/spot.mdl"
          ]
        },
        {
          "name": "lightcone",
          "values": []
        },
        {
          "name": "sphere",
          "values": [
            "_fifty_percent_distance"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "_zero_percent_distance"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Entity to point at",
          "description": "The name of an entity in the map that the spotlight will point at. This will override the spotlight's angles."
        },
        {
          "type": "integer",
          "name": "_inner_cone",
          "title": "Inner (bright) angle",
          "deflt": 30
        },
        {
          "type": "integer",
          "name": "_cone",
          "title": "Outer (fading) angle",
          "deflt": 45
        },
        {
          "type": "integer",
          "name": "_exponent",
          "title": "Focus",
          "deflt": 1
        },
        {
          "type": "integer",
          "name": "_distance",
          "title": "Maximum distance",
          "description": "This is the distance that light is allowed to cast, in inches.",
          "deflt": 0
        },
        {
          "type": "angle_negative_pitch",
          "name": "pitch",
          "title": "Pitch",
          "deflt": -90
        }
      ],
      "flags": [
        {
          "title": "Initially dark",
          "value": 1,
          "enabled": false
        }
      ]
    },
    {
      "name": "light_dynamic",
      "type": "PointClass",
      "description": "An invisible lightsource that changes in some way over time.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/light.vmt"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "distance"
          ]
        },
        {
          "name": "lightcone",
          "values": []
        },
        {
          "name": "size",
          "values": [
            -4,
            -4,
            -4,
            4,
            4,
            4
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Entity to point at",
          "description": "The name of an entity in the map that the dynamic light will point at."
        },
        {
          "type": "color255",
          "name": "_light",
          "title": "Light color",
          "deflt": "255 255 255 200"
        },
        {
          "type": "integer",
          "name": "brightness",
          "title": "Light brightness",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "_inner_cone",
          "title": "Inner (bright) angle",
          "deflt": 30
        },
        {
          "type": "integer",
          "name": "_cone",
          "title": "Outer (fading) angle",
          "deflt": 45
        },
        {
          "type": "integer",
          "name": "pitch",
          "title": "Pitch",
          "deflt": -90
        },
        {
          "type": "float",
          "name": "distance",
          "title": "Maximum distance",
          "description": "This is the distance that light is allowed to cast, in inches.",
          "deflt": 120
        },
        {
          "type": "float",
          "name": "spotlight_radius",
          "title": "Spotlight end radius",
          "description": "This is the radius of the light, in inches, at the object that it is hitting.",
          "deflt": 80
        },
        {
          "type": "choices",
          "name": "style",
          "title": "Appearance",
          "deflt": 0,
          "choices": {
            "0": "Normal",
            "1": "Flicker A",
            "2": "Slow, strong pulse",
            "3": "Candle A",
            "4": "Fast strobe",
            "5": "Gentle pulse",
            "6": "Flicker B",
            "7": "Candle B",
            "8": "Candle C",
            "9": "Slow strobe",
            "10": "Fluorescent flicker",
            "11": "Slow pulse, noblack"
          }
        }
      ],
      "flags": [
        {
          "title": "Do not light world (better perf)",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Do not light models",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Add Displacement Alpha",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Subtract Displacement Alpha",
          "value": 8,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Color",
          "description": "Set the light's render color (R G B).",
          "type": "color255"
        },
        {
          "name": "brightness",
          "description": "Set the light brightness.",
          "type": "integer"
        },
        {
          "name": "distance",
          "description": "Set the maximum light distance.",
          "type": "float"
        },
        {
          "name": "_inner_cone",
          "description": "Set the inner (bright) angle.",
          "type": "integer"
        },
        {
          "name": "_cone",
          "description": "Set the outer (fading) angle.",
          "type": "integer"
        },
        {
          "name": "spotlight_radius",
          "description": "Set the radius of the spotlight at the end point.",
          "type": "float"
        },
        {
          "name": "style",
          "description": "Change the lightstyle (see Appearance field for possible values).",
          "type": "integer"
        },
        {
          "name": "TurnOn",
          "description": "Turn the light off.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turn the light on.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle the light on/off.",
          "type": "void"
        }
      ]
    },
    {
      "name": "shadow_control",
      "type": "PointClass",
      "description": "An entity to control the shadows in the map.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/shadow_control.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "angles",
          "title": "Pitch Yaw Roll (Y Z X)",
          "description": "This is the shadow direction. Pitch is rotation around the Y axis, yaw is the rotation around the Z axis, and roll is the rotation around the X axis.",
          "deflt": "80 30 0"
        },
        {
          "type": "color255",
          "name": "color",
          "title": "Shadow Color",
          "description": "This is the color of the shadows.",
          "deflt": "128 128 128"
        },
        {
          "type": "float",
          "name": "distance",
          "title": "Maximum Distance",
          "description": "This is the maximum distance the shadow is allowed to cast, in inches.",
          "deflt": 75
        },
        {
          "type": "choices",
          "name": "disableallshadows",
          "title": "All Shadows Disabled",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "enableshadowsfromlocallights",
          "title": "Enable Local Light Shadows",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "color",
          "description": "Set the shadow color.",
          "type": "color255"
        },
        {
          "name": "direction",
          "description": "Set the shadow direction.",
          "type": "vector"
        },
        {
          "name": "SetDistance",
          "description": "Set the maximum shadow cast distance.",
          "type": "float"
        },
        {
          "name": "SetAngles",
          "description": "Set the shadow direction.",
          "type": "string"
        },
        {
          "name": "SetShadowsDisabled",
          "description": "Set shadows disabled state.",
          "type": "integer"
        },
        {
          "name": "SetShadowsFromLocalLightsEnabled",
          "description": "Set local light shadows enabled state.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "color_correction",
      "type": "PointClass",
      "description": "An entity to control the color correction in the map.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "EnableDisable"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "minfalloff"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "maxfalloff"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/color_correction.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "minfalloff",
          "title": "Lookup Falloff Start Distance",
          "description": "This is the distance to the start of the falloff region (-1 = everywhere)",
          "deflt": "0.0"
        },
        {
          "type": "float",
          "name": "maxfalloff",
          "title": "Lookup Falloff End Distance",
          "description": "This is the distance to the end of the falloff region (-1 = everywhere)",
          "deflt": "200.0"
        },
        {
          "type": "float",
          "name": "maxweight",
          "title": "Maximum Weight",
          "description": "This is the maximum weight for this lookup",
          "deflt": "1.0"
        },
        {
          "type": "string",
          "name": "filename",
          "title": "Lookup Table Filename",
          "description": "This is the lookup table filename",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "fadeInDuration",
          "title": "Lookup Fade In Duration",
          "description": "Duration of fade in on when enabled.",
          "deflt": "0.0"
        },
        {
          "type": "float",
          "name": "fadeOutDuration",
          "title": "Lookup Fade out Duration",
          "description": "Dration of fade out on when disabled.",
          "deflt": "0.0"
        }
      ],
      "inputs": [
        {
          "name": "SetFadeInDuration",
          "description": "Sets the 'fadeInDuration' variable, used to fade cc lookup usage when entity is enabled.",
          "type": "float"
        },
        {
          "name": "SetFadeOutDuration",
          "description": "Sets the 'fadeOutDuration' variable, used to fade cc lookup usage when entity is disabled.",
          "type": "float"
        }
      ]
    },
    {
      "name": "color_correction_volume",
      "type": "SolidClass",
      "description": "An entity to control the color correction in the map.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "EnableDisable"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "fadeDuration",
          "title": "Lookup Fade Duration",
          "description": "This is the duration for the lookup to fade in/out on extry/exit",
          "deflt": "10.0"
        },
        {
          "type": "float",
          "name": "maxweight",
          "title": "Maximum Weight",
          "description": "This is the maximum weight for this lookup",
          "deflt": "1.0"
        },
        {
          "type": "string",
          "name": "filename",
          "title": "Lookup Table Filename",
          "description": "This is the lookup table filename, relative to the base game folder, where materials/ folder is.",
          "deflt": ""
        }
      ]
    },
    {
      "name": "KeyFrame",
      "type": "BaseClass",
      "properties": [
        {
          "type": "target_destination",
          "name": "NextKey",
          "title": "Next KeyFrame",
          "description": "Name of the next keyframe along this keyframe path."
        },
        {
          "type": "integer",
          "name": "MoveSpeed",
          "title": "Speed (units per second)",
          "deflt": 64
        }
      ]
    },
    {
      "name": "Mover",
      "type": "BaseClass",
      "properties": [
        {
          "type": "choices",
          "name": "PositionInterpolator",
          "title": "Position Interpolator",
          "deflt": 0,
          "choices": {
            "0": "Linear",
            "1": "Catmull-Rom Spline"
          }
        }
      ]
    },
    {
      "name": "func_movelinear",
      "type": "SolidClass",
      "description": "A brush entity that moves linearly along a given distance, in a given direction.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Origin",
            "RenderFields",
            "GMODSandbox"
          ]
        }
      ],
      "properties": [
        {
          "type": "angle",
          "name": "movedir",
          "title": "Move Direction (Pitch Yaw Roll)",
          "description": "The direction the brushes will move, when told to.",
          "deflt": "0 0 0"
        },
        {
          "type": "float",
          "name": "startposition",
          "title": "Start Position",
          "description": "Position of brush when spawned. The range is a value between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position + (move direction * move distance).",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "speed",
          "title": "Speed",
          "description": "The speed that the brush moves, in inches per second.",
          "deflt": 100
        },
        {
          "type": "float",
          "name": "movedistance",
          "title": "Move Distance",
          "description": "The distance from the starting point that the brush should move, in inches.",
          "deflt": 100
        },
        {
          "type": "float",
          "name": "blockdamage",
          "title": "Block Damage",
          "description": "The amount of damage to do to any entity that blocks the brushes, per frame.",
          "deflt": 0
        },
        {
          "type": "sound",
          "name": "startsound",
          "title": "Sound played when the brush starts moving."
        },
        {
          "type": "sound",
          "name": "stopsound",
          "title": "Sound played when the brush stops moving."
        }
      ],
      "flags": [
        {
          "title": "Not Solid",
          "value": 8,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Open",
          "description": "Move the brush to the end position (starting position + (move direction * move distance)).",
          "type": "void"
        },
        {
          "name": "Close",
          "description": "Move the brush to the starting position.",
          "type": "void"
        },
        {
          "name": "SetPosition",
          "description": "Move the brush to a specific position between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position + (move direction * move distance).",
          "type": "string"
        },
        {
          "name": "SetSpeed",
          "description": "Set the speed and update immediately.",
          "type": "float"
        }
      ],
      "outputs": [
        {
          "name": "OnFullyOpen",
          "description": "Fired when the brush reaches the end position (starting position + (move direction * move distance)).",
          "type": "void"
        },
        {
          "name": "OnFullyClosed",
          "description": "Fired when the brush reaches the starting position.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_water_analog",
      "type": "SolidClass",
      "description": "A water brush entity that moves linearly along a given distance, in a given direction",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Origin"
          ]
        }
      ],
      "properties": [
        {
          "type": "angle",
          "name": "movedir",
          "title": "Move Direction (Pitch Yaw Roll)",
          "description": "The direction the water will move, when told to 'Open'.",
          "deflt": "0 0 0"
        },
        {
          "type": "float",
          "name": "startposition",
          "title": "Start Position",
          "description": "Position of the water brush when spawned. The range is a value between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position + (move direction * move distance).",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "speed",
          "title": "Speed",
          "description": "The speed that the water brush moves, in inches per second.",
          "deflt": 100
        },
        {
          "type": "float",
          "name": "movedistance",
          "title": "Move Distance",
          "description": "The distance from the starting point that the water brush should move, in inches.",
          "deflt": 100
        },
        {
          "type": "sound",
          "name": "startsound",
          "title": "Sound played when the water brush starts moving."
        },
        {
          "type": "sound",
          "name": "stopsound",
          "title": "Sound played when the water brush stops moving."
        },
        {
          "type": "string",
          "name": "WaveHeight",
          "title": "Wave Height",
          "deflt": "3.0"
        }
      ],
      "inputs": [
        {
          "name": "Open",
          "description": "Move the water brush to the end position (starting position + (move direction * move distance)).",
          "type": "void"
        },
        {
          "name": "Close",
          "description": "Move the water brush to the starting position.",
          "type": "void"
        },
        {
          "name": "SetPosition",
          "description": "Move the water brush to a specific position between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position + (move direction * move distance).",
          "type": "string"
        }
      ],
      "outputs": [
        {
          "name": "OnFullyOpen",
          "description": "Fired when the water brush reaches the end position (starting position + (move direction * move distance)).",
          "type": "void"
        },
        {
          "name": "OnFullyClosed",
          "description": "Fired when the water brush reaches the starting position.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_rotating",
      "type": "SolidClass",
      "description": "A rotating brush entity.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Origin",
            "Angles",
            "RenderFields",
            "Shadow",
            "GMODSandbox"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "maxspeed",
          "title": "Max Rotation Speed",
          "description": "The maximum rotation speed of the brushes, in degrees per second.",
          "deflt": 100
        },
        {
          "type": "integer",
          "name": "fanfriction",
          "title": "Friction (0 - 100%)",
          "description": "The amount of rotational friction. Value must be between 0 and 100 %.",
          "deflt": 20
        },
        {
          "type": "sound",
          "name": "message",
          "title": "Rotating sound WAV",
          "description": "Sound to play while rotating."
        },
        {
          "type": "integer",
          "name": "volume",
          "title": "Volume (10 = loudest)",
          "description": "The volume of the rotation sound.",
          "deflt": 10
        },
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        },
        {
          "type": "integer",
          "name": "dmg",
          "title": "Blocking Damage",
          "description": "Damage done to any entity that blocks the rotation, per frame.",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "solidbsp",
          "title": "Solid Type",
          "deflt": 0,
          "choices": {
            "0": "VPhysics",
            "1": "BSP"
          }
        }
      ],
      "flags": [
        {
          "title": "Start ON",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Reverse Direction",
          "value": 2,
          "enabled": false
        },
        {
          "title": "X Axis",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Y Axis",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Acc/Dcc",
          "value": 16,
          "enabled": false
        },
        {
          "title": "Fan Pain",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Not Solid",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Small Sound Radius",
          "value": 128,
          "enabled": false
        },
        {
          "title": "Medium Sound Radius",
          "value": 256,
          "enabled": false
        },
        {
          "title": "Large Sound Radius",
          "value": 512,
          "enabled": true
        }
      ],
      "inputs": [
        {
          "name": "SetSpeed",
          "description": "Set the speed as a ratio of the specified Max Rotation Speed, where 0 is stopped and 1 is the Max Rotation Speed..",
          "type": "integer"
        },
        {
          "name": "Start",
          "description": "Start the rotator rotating.",
          "type": "void"
        },
        {
          "name": "Stop",
          "description": "Stop the rotator from rotating.",
          "type": "void"
        },
        {
          "name": "StopAtStartPos",
          "description": "Stop the rotator from rotating when it gets around to the start position again (on its rotation axis).",
          "type": "void"
        },
        {
          "name": "StartForward",
          "description": "Start the rotator rotating forward.",
          "type": "void"
        },
        {
          "name": "StartBackward",
          "description": "Start the rotator rotating backward.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle the rotator between rotating and not rotating.",
          "type": "void"
        },
        {
          "name": "Reverse",
          "description": "Reverse the direction of rotation of the rotator.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_platrot",
      "type": "SolidClass",
      "description": "A brush entity that moves vertically, and can rotate while doing so.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Origin",
            "Angles",
            "RenderFields",
            "BasePlat",
            "Shadow",
            "GMODSandbox"
          ]
        }
      ],
      "flags": [
        {
          "title": "Toggle",
          "value": 1,
          "enabled": true
        },
        {
          "title": "X Axis",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Y Axis",
          "value": 128,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "sound",
          "name": "noise1",
          "title": "Movement Sound",
          "description": "The sound to play when the brush moves."
        },
        {
          "type": "sound",
          "name": "noise2",
          "title": "Stop Sound",
          "description": "The sound to play when the brush stops moving."
        },
        {
          "type": "integer",
          "name": "speed",
          "title": "Speed of Rotation",
          "description": "Speed at which the brush rotates, in degrees per second.",
          "deflt": 50
        },
        {
          "type": "integer",
          "name": "height",
          "title": "Travel Altitude",
          "description": "The vertical distance from the starting position that this platform moves. If negative, the platform will lower.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "rotation",
          "title": "Spin amount",
          "description": "The amount this platform should rotate as it moves, in degrees.",
          "deflt": 0
        },
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        }
      ]
    },
    {
      "name": "keyframe_track",
      "type": "KeyFrameClass",
      "description": "Animation KeyFrame",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles",
            "KeyFrame"
          ]
        },
        {
          "name": "size",
          "values": [
            -6,
            -6,
            -6,
            6,
            6,
            6
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            200,
            0
          ]
        },
        {
          "name": "keyframe",
          "values": []
        }
      ]
    },
    {
      "name": "move_keyframed",
      "type": "MoveClass",
      "description": "Keyframed Move Behavior",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "KeyFrame",
            "Mover"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            170,
            0
          ]
        },
        {
          "name": "animator",
          "values": []
        }
      ]
    },
    {
      "name": "move_track",
      "type": "MoveClass",
      "description": "Track Move Behavior",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Mover",
            "KeyFrame"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            0,
            0
          ]
        },
        {
          "name": "animator",
          "values": []
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "WheelBaseLength",
          "title": "Distance between the wheels",
          "deflt": 50
        },
        {
          "type": "integer",
          "name": "Damage",
          "title": "Damage done to blocking entities",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "NoRotate",
          "title": "Turn to face down path",
          "deflt": 0,
          "choices": {
            "0": "Yes",
            "1": "No"
          }
        }
      ]
    },
    {
      "name": "RopeKeyFrame",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "DXLevelChoice"
          ]
        }
      ],
      "flags": [
        {
          "title": "Auto Resize",
          "value": 1,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "Slack",
          "title": "Slack",
          "description": "How much extra length the rope has (by default it has the length between its two endpoints in the editor).",
          "deflt": 25
        },
        {
          "type": "choices",
          "name": "Type",
          "title": "Type",
          "deflt": 0,
          "choices": {
            "0": "Rope",
            "1": "Semi-rigid",
            "2": "Rigid"
          }
        },
        {
          "type": "integer",
          "name": "Subdiv",
          "title": "Subdivision",
          "description": "Number of subdivisions between each rope segment. Maximum value is 8. Higher values make smoother ropes, but are slower to render.",
          "deflt": 2
        },
        {
          "type": "choices",
          "name": "Barbed",
          "title": "Barbed",
          "description": "Test effect that makes the rope look sharper and more barbed.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "string",
          "name": "Width",
          "title": "Width (1-64)",
          "description": "Width of the rope.",
          "deflt": "2"
        },
        {
          "type": "string",
          "name": "TextureScale",
          "title": "Texture Scale",
          "description": "This changes the texture resolution. The default resolution is 4 pixels per inch. Larger values stretch the texture and smaller values scrunch it up.",
          "deflt": "1"
        },
        {
          "type": "choices",
          "name": "Collide",
          "title": "Collide with world",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "Dangling",
          "title": "Start Dangling",
          "description": "When set to Yes, the rope starts out detached from its target endpoint.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "Breakable",
          "title": "Breakable",
          "description": "When set to yes, the rope can be detached from either endpoint when shot.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "material",
          "name": "RopeMaterial",
          "title": "Rope Material",
          "description": "The material to use when rendering the rope.",
          "deflt": "cable/cable.vmt"
        },
        {
          "type": "choices",
          "name": "NoWind",
          "title": "Disable Wind",
          "description": "When set to Yes, the rope will no longer act as though it's being affected by wind.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "SetScrollSpeed",
          "description": "Set the speed at which the texture scrolls.",
          "type": "float"
        },
        {
          "name": "SetForce",
          "description": "Apply a force instantaneously to the rope. The parameter should be a vector containing the force to be applied (X Y Z).",
          "type": "string"
        },
        {
          "name": "Break",
          "description": "Break the rope, if it's marked to do so.",
          "type": "void"
        }
      ]
    },
    {
      "name": "keyframe_rope",
      "type": "KeyFrameClass",
      "description": "A node entity that marks a point in a rope. The first node in the rope should be a move_rope, followed by 1 or more keyframe_ropes.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "KeyFrame",
            "RopeKeyFrame"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/axis_helper_thick.mdl"
          ]
        },
        {
          "name": "keyframe",
          "values": []
        }
      ]
    },
    {
      "name": "move_rope",
      "type": "MoveClass",
      "description": "The first node in set of nodes that are used to place ropes in the world. It should connect to 1 or more keyframe_rope entities.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "KeyFrame",
            "RopeKeyFrame"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/axis_helper.mdl"
          ]
        },
        {
          "name": "animator",
          "values": []
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "PositionInterpolator",
          "title": "Position Interpolator",
          "description": "Curve Type. Currently only type 2 (Rope) is fully supported.",
          "deflt": 2,
          "choices": {
            "0": "Linear",
            "1": "Catmull-Rom Spline",
            "2": "Rope"
          }
        }
      ]
    },
    {
      "name": "Button",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "GMODSandbox"
          ]
        }
      ],
      "inputs": [
        {
          "name": "Lock",
          "description": "Lock the button, preventing it from functioning.",
          "type": "void"
        },
        {
          "name": "Unlock",
          "description": "Unlock the button, allowing it to function.",
          "type": "void"
        },
        {
          "name": "Press",
          "description": "Activate the button as if it was pressed.",
          "type": "void"
        },
        {
          "name": "PressIn",
          "description": "Activate the button as if it was pressed, sending it to the bottom position.",
          "type": "void"
        },
        {
          "name": "PressOut",
          "description": "Unpress the button, sending it to the top position.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnDamaged",
          "description": "Fired when the button is damaged.",
          "type": "void"
        },
        {
          "name": "OnPressed",
          "description": "Fired when the button is pressed.",
          "type": "void"
        },
        {
          "name": "OnUseLocked",
          "description": "Fired when the button is used while locked.",
          "type": "void"
        },
        {
          "name": "OnIn",
          "description": "Fired when the button reaches the in/pressed position.",
          "type": "void"
        },
        {
          "name": "OnOut",
          "description": "Fired when the button reaches the out/released position.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_button",
      "type": "SolidClass",
      "description": "A brush entity that's designed to be used for a player-useable button. When used by the player, it moves to a pressed position.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Origin",
            "RenderFields",
            "DamageFilter",
            "Button"
          ]
        }
      ],
      "properties": [
        {
          "type": "angle",
          "name": "movedir",
          "title": "Move Direction (Pitch Yaw Roll)",
          "description": "Specifies the direction of motion to move when the button is used.",
          "deflt": "0 0 0"
        },
        {
          "type": "integer",
          "name": "speed",
          "title": "Speed",
          "description": "The speed that the button moves, in inches per second.",
          "deflt": 5
        },
        {
          "type": "integer",
          "name": "health",
          "title": "Health (Obsolete)",
          "description": "Legacy method of specifying whether or not the button can be shot to activate it. Use the 'Damage Activates' spawnflag instead.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "lip",
          "title": "Lip",
          "description": "The amount, in inches, of the button to leave sticking out of the wall it recedes into when pressed. Negative values make the button recede even further into the wall.",
          "deflt": 0
        },
        {
          "type": "string",
          "name": "master",
          "title": "Master (Obsolete)",
          "description": "Legacy support: The name of a master entity. If the master hasn't been activated, this button cannot be pressed."
        },
        {
          "type": "choices",
          "name": "sounds",
          "title": "Sounds",
          "deflt": 0,
          "choices": {
            "0": "None (Silent)",
            "1": "Big zap & Warmup",
            "2": "Access Denied",
            "3": "Access Granted",
            "4": "Quick Combolock",
            "5": "Power Deadbolt 1",
            "6": "Power Deadbolt 2",
            "7": "Plunger",
            "8": "Small zap",
            "9": "Keycard Sound",
            "10": "Buzz",
            "11": "Buzz Off",
            "12": "latch locked",
            "13": "Latch Unlocked",
            "14": "Lightswitch",
            "15": "small bleek",
            "16": "small deny",
            "17": "small doop",
            "18": "small tech deny",
            "19": "click and combine screen fuzz",
            "20": "roomy beep",
            "21": "lever or wheel: turn + move sqeek",
            "22": "lever or wheel: latch + release gas",
            "23": "lever or wheel: ratchet + sqeek",
            "24": "lever or wheel: large ratchet",
            "25": "lever or wheel: clanky + gas release",
            "26": "lever or wheel: latch + large metal thud",
            "27": "lever or wheel: smaller ratchet",
            "28": "lever or wheel: smaller lever move",
            "31": "shock buzz",
            "32": "clickbeep",
            "33": "tech blip",
            "34": "clickbeepbeep open",
            "35": "small high blip",
            "36": "small tech fuzz blip",
            "37": "small click bleep (change to lightswitch)",
            "40": "combine door lock - locked",
            "41": "combine blip growl",
            "42": "combine squick growl",
            "43": "combine whine purr",
            "44": "combine click talk",
            "45": "combine click growl fizz",
            "46": "combine click fizz (deny)",
            "47": "combine click talker"
          }
        },
        {
          "type": "integer",
          "name": "wait",
          "title": "Delay Before Reset (-1 stay)",
          "description": "Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, it can be used again. If the value is set to -1, the button never returns.",
          "deflt": 3
        },
        {
          "type": "choices",
          "name": "locked_sound",
          "title": "Locked Sound",
          "description": "Sound played when the player tries to use the button, and fails because it's locked.",
          "deflt": 0,
          "choices": {
            "0": "None",
            "2": "Access Denied",
            "8": "Small zap",
            "10": "Buzz",
            "11": "Buzz Off",
            "12": "Latch Locked"
          }
        },
        {
          "type": "choices",
          "name": "unlocked_sound",
          "title": "Unlocked Sound",
          "description": "Sound played when the button is unlocked.",
          "deflt": 0,
          "choices": {
            "0": "None",
            "1": "Big zap & Warmup",
            "3": "Access Granted",
            "4": "Quick Combolock",
            "5": "Power Deadbolt 1",
            "6": "Power Deadbolt 2",
            "7": "Plunger",
            "8": "Small zap",
            "9": "Keycard Sound",
            "10": "Buzz",
            "13": "Latch Unlocked",
            "14": "Lightswitch"
          }
        },
        {
          "type": "choices",
          "name": "locked_sentence",
          "title": "Locked Sentence",
          "description": "A sentence played when the player tries to use the button, and fails because it's locked.",
          "deflt": 0,
          "choices": {
            "0": "None",
            "1": "Gen. Access Denied",
            "2": "Security Lockout",
            "3": "Blast Door",
            "4": "Fire Door",
            "5": "Chemical Door",
            "6": "Radiation Door",
            "7": "Gen. Containment",
            "8": "Maintenance Door",
            "9": "Broken Shut Door"
          }
        },
        {
          "type": "choices",
          "name": "unlocked_sentence",
          "title": "Unlocked Sentence",
          "description": "A sentence played when the button is unlocked.",
          "deflt": 0,
          "choices": {
            "0": "None",
            "1": "Gen. Access Granted",
            "2": "Security Disengaged",
            "3": "Blast Door",
            "4": "Fire Door",
            "5": "Chemical Door",
            "6": "Radiation Door",
            "7": "Gen. Containment",
            "8": "Maintenance area"
          }
        },
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        }
      ],
      "flags": [
        {
          "title": "Don't move",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Toggle",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Touch Activates",
          "value": 256,
          "enabled": false
        },
        {
          "title": "Damage Activates",
          "value": 512,
          "enabled": false
        },
        {
          "title": "Use Activates",
          "value": 1024,
          "enabled": true
        },
        {
          "title": "Starts locked",
          "value": 2048,
          "enabled": false
        },
        {
          "title": "Sparks",
          "value": 4096,
          "enabled": false
        },
        {
          "title": "Non solid",
          "value": 16384,
          "enabled": false
        }
      ]
    },
    {
      "name": "func_rot_button",
      "type": "SolidClass",
      "description": "A brush entity that's designed to be used for a rotating player-useable button. When used by the player, it rotates to a pressed position.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Origin",
            "Angles",
            "Global",
            "Button",
            "EnableDisable"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "master",
          "title": "Master (Obsolete)",
          "description": "Legacy support: The name of a master entity. If the master hasn't been activated, this button cannot be used."
        },
        {
          "type": "integer",
          "name": "speed",
          "title": "Speed",
          "description": "The speed that the button rotates, in degrees per second.",
          "deflt": 50
        },
        {
          "type": "integer",
          "name": "health",
          "title": "Health (Obsolete)",
          "description": "Legacy method of specifying whether or not the button can be shot to activate it. Use the 'Damage Activates' spawnflag instead.",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "sounds",
          "title": "Sounds",
          "deflt": 21,
          "choices": {
            "0": "None (Silent)",
            "21": "Squeaky",
            "22": "Squeaky Pneumatic",
            "23": "Ratchet Groan",
            "24": "Clean Ratchet",
            "25": "Gas Clunk"
          }
        },
        {
          "type": "integer",
          "name": "wait",
          "title": "Delay Before Reset (-1 stay)",
          "description": "Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, it can be used again. If the value is set to -1, the button never returns.",
          "deflt": 3
        },
        {
          "type": "integer",
          "name": "distance",
          "title": "Distance (deg)",
          "description": "The amount, in degrees, that the button should rotate when it's pressed.",
          "deflt": 90
        },
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        }
      ],
      "flags": [
        {
          "title": "Not solid",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Reverse Dir",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Toggle",
          "value": 32,
          "enabled": false
        },
        {
          "title": "X Axis",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Y Axis",
          "value": 128,
          "enabled": false
        },
        {
          "title": "Touch Activates",
          "value": 256,
          "enabled": false
        },
        {
          "title": "Damage Activates",
          "value": 512,
          "enabled": false
        },
        {
          "title": "Use Activates",
          "value": 1024,
          "enabled": false
        },
        {
          "title": "Starts locked",
          "value": 2048,
          "enabled": false
        },
        {
          "title": "Non solid",
          "value": 16384,
          "enabled": false
        }
      ]
    },
    {
      "name": "momentary_rot_button",
      "type": "SolidClass",
      "description": "A brush entity that's designed to be used for rotating wheels, where the player can rotate them to arbitrary positions before stopping.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Origin",
            "Angles",
            "RenderFields"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "speed",
          "title": "Speed (deg/sec)",
          "description": "The amount, in degrees, that the wheel turns per second.",
          "deflt": 50
        },
        {
          "type": "string",
          "name": "master",
          "title": "Master (Obsolete)",
          "description": "Legacy support: The name of a master entity. If the master hasn't been activated, this button cannot be used."
        },
        {
          "type": "choices",
          "name": "sounds",
          "title": "Sounds",
          "deflt": 0,
          "choices": {
            "0": "None",
            "1": "Big zap & Warmup",
            "2": "Access Denied",
            "3": "Access Granted",
            "4": "Quick Combolock",
            "5": "Power Deadbolt 1",
            "6": "Power Deadbolt 2",
            "7": "Plunger",
            "8": "Small zap",
            "9": "Keycard Sound",
            "21": "Squeaky",
            "22": "Squeaky Pneumatic",
            "23": "Ratchet Groan",
            "24": "Clean Ratchet",
            "25": "Gas Clunk"
          }
        },
        {
          "type": "integer",
          "name": "distance",
          "title": "Distance",
          "description": "The maximum amount, in degrees, that the wheel is allowed to rotate.",
          "deflt": 90
        },
        {
          "type": "integer",
          "name": "returnspeed",
          "title": "Auto-return speed",
          "description": "If the 'Toggle' spawnflag is not set, the speed at which the wheel auto-returns when left alone, in degrees per second.",
          "deflt": 0
        },
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        },
        {
          "type": "float",
          "name": "startposition",
          "title": "Start Position",
          "description": "Postion when spawned. The value is a range between 0.0 and 1.0, where 0 is the unrotated position and 1 is the rotated position + 'Distance'.",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "startdirection",
          "title": "Start Direction",
          "deflt": "Forward",
          "choices": {
            "1": "Backward",
            "-1": "Forward"
          }
        },
        {
          "type": "choices",
          "name": "solidbsp",
          "title": "Solid BSP",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "flags": [
        {
          "title": "Not Solid",
          "value": 1,
          "enabled": true
        },
        {
          "title": "Toggle (Disable Auto Return)",
          "value": 32,
          "enabled": true
        },
        {
          "title": "X Axis",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Y Axis",
          "value": 128,
          "enabled": false
        },
        {
          "title": "Use Activates",
          "value": 1024,
          "enabled": true
        },
        {
          "title": "Starts locked",
          "value": 2048,
          "enabled": false
        },
        {
          "title": "Jiggle when used while locked",
          "value": 8192,
          "enabled": false
        },
        {
          "title": "Non solid",
          "value": 16384,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Lock",
          "description": "Lock the button, preventing it from functioning.",
          "type": "void"
        },
        {
          "name": "Unlock",
          "description": "Unlock the button, allowing it to function.",
          "type": "void"
        },
        {
          "name": "SetPosition",
          "description": "Move to a position. The parameter must be a value between 0 and 1, where 0 is the unrotated position and 1 is the rotated position + 'Distance'.",
          "type": "string"
        },
        {
          "name": "SetPositionImmediately",
          "description": "Immediately teleport to a position. The parameter must be a value between 0 and 1, where 0 is the unrotated position and 1 is the rotated position + 'Distance'.",
          "type": "string"
        }
      ],
      "outputs": [
        {
          "name": "Position",
          "description": "Fired whenever the button moves. The output is the position of button from 0 to 1, where 0 is the unrotated position and 1 is the rotated position + 'Distance'.",
          "type": "integer"
        },
        {
          "name": "OnPressed",
          "description": "Fired when the button is first pressed.",
          "type": "integer"
        },
        {
          "name": "OnUnpressed",
          "description": "Fired when the button is first released from being pressed.",
          "type": "integer"
        },
        {
          "name": "OnFullyClosed",
          "description": "Fired when the button has reached position 1, the rotated position + 'Distance'.",
          "type": "void"
        },
        {
          "name": "OnFullyOpen",
          "description": "Fired when the button has reached position 0, the unrotated starting position.",
          "type": "void"
        },
        {
          "name": "OnReachedPosition",
          "description": "Fired whenever the button reaches a goal position: i.e. when it becomes open, becomes closed, or reaches the point specified by a 'SetPosition' input.",
          "type": "void"
        }
      ]
    },
    {
      "name": "Door",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "RenderFields",
            "Global",
            "Shadow",
            "GMODSandbox"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "speed",
          "title": "Speed",
          "description": "The speed at which the door moves.",
          "deflt": 100
        },
        {
          "type": "string",
          "name": "master",
          "title": "Master (Obsolete)",
          "description": "Legacy support: The name of a master entity. If the master hasn't been activated, this button cannot be used."
        },
        {
          "type": "sound",
          "name": "noise1",
          "title": "Start Sound",
          "description": "Sound to play when the door starts moving."
        },
        {
          "type": "sound",
          "name": "noise2",
          "title": "Stop Sound",
          "description": "Sound to play when the door stops moving."
        },
        {
          "type": "sound",
          "name": "startclosesound",
          "title": "Start Close Sound",
          "description": "(Optional) Sound to play when the door starts closing."
        },
        {
          "type": "sound",
          "name": "closesound",
          "title": "Stop Close Sound",
          "description": "(Optional) Sound to play when the door stops closing."
        },
        {
          "type": "integer",
          "name": "wait",
          "title": "Delay Before Reset (-1 stay)",
          "description": "Amount of time, in seconds, after the door has opened before it closes. Once it has closed, it can be used again. If the value is set to -1, the door never closes itself.",
          "deflt": 4
        },
        {
          "type": "integer",
          "name": "lip",
          "title": "Lip",
          "description": "The amount, in inches, of the button to leave sticking out of the wall it recedes into when pressed. Negative values make the button recede even further into the wall.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "dmg",
          "title": "Blocking Damage",
          "description": "Amount of damage done to entities that block the movement of this door, per frame.",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "forceclosed",
          "title": "Force Closed",
          "description": "If set, this door will close no matter what. Useful for doors that have to close even if the player tries to block them with objects.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "ignoredebris",
          "title": "Ignore Debris",
          "description": "If set this will change the door's collision group to one that ignore collisions with debris objects (note that this is not compatible with the non-solid-to-player spawnflag).",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "string",
          "name": "message",
          "title": "Message If Triggered"
        },
        {
          "type": "integer",
          "name": "health",
          "title": "Health (shoot open)",
          "deflt": 0
        },
        {
          "type": "sound",
          "name": "locked_sound",
          "title": "Locked Sound",
          "description": "Sound played when the player tries to use the door, and fails because it's locked."
        },
        {
          "type": "sound",
          "name": "unlocked_sound",
          "title": "Unlocked Sound",
          "description": "Sound played when the button is door."
        },
        {
          "type": "choices",
          "name": "spawnpos",
          "title": "Spawn Position",
          "deflt": 0,
          "choices": {
            "0": "Closed",
            "1": "Open"
          }
        },
        {
          "type": "choices",
          "name": "locked_sentence",
          "title": "Locked Sentence",
          "description": "A sentence played when the player tries to use the door, and fails because it's locked.",
          "deflt": 0,
          "choices": {
            "0": "None",
            "1": "Gen. Access Denied",
            "2": "Security Lockout",
            "3": "Blast Door",
            "4": "Fire Door",
            "5": "Chemical Door",
            "6": "Radiation Door",
            "7": "Gen. Containment",
            "8": "Maintenance Door",
            "9": "Broken Shut Door"
          }
        },
        {
          "type": "choices",
          "name": "unlocked_sentence",
          "title": "Unlocked Sentence",
          "description": "A sentence played when the door is unlocked.",
          "deflt": 0,
          "choices": {
            "0": "None",
            "1": "Gen. Access Granted",
            "2": "Security Disengaged",
            "3": "Blast Door",
            "4": "Fire Door",
            "5": "Chemical Door",
            "6": "Radiation Door",
            "7": "Gen. Containment",
            "8": "Maintenance area"
          }
        },
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        },
        {
          "type": "choices",
          "name": "loopmovesound",
          "title": "Loop Moving Sound?",
          "description": "If set to true, the door's 'Start Sound' will be continually looped until the door finishes moving.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "flags": [
        {
          "title": "Starts Open - OBSOLETE, use 'Spawn Position' key instead",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Non-solid to Player",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Passable",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Toggle",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Use Opens",
          "value": 256,
          "enabled": false
        },
        {
          "title": "NPCs Can't",
          "value": 512,
          "enabled": false
        },
        {
          "title": "Touch Opens",
          "value": 1024,
          "enabled": true
        },
        {
          "title": "Starts locked",
          "value": 2048,
          "enabled": false
        },
        {
          "title": "Door Silent",
          "value": 4096,
          "enabled": false
        }
      ],
      "outputs": [
        {
          "name": "OnClose",
          "description": "Fired when the door starts closing.",
          "type": "void"
        },
        {
          "name": "OnOpen",
          "description": "Fired when the door starts opening.",
          "type": "void"
        },
        {
          "name": "OnFullyOpen",
          "description": "Fired when the door reaches the fully open position. Reversed if 'Start Open' flag is set.",
          "type": "void"
        },
        {
          "name": "OnFullyClosed",
          "description": "Fired when the door reaches the fully closed position. Reversed if 'Start Open' flag is set.",
          "type": "void"
        },
        {
          "name": "OnBlockedClosing",
          "description": "Fired when the door is blocked while closing.",
          "type": "void"
        },
        {
          "name": "OnBlockedOpening",
          "description": "Fired when the door is blocked while opening.",
          "type": "void"
        },
        {
          "name": "OnUnblockedClosing",
          "description": "Fired when the door is unblocked while closing.",
          "type": "void"
        },
        {
          "name": "OnUnblockedOpening",
          "description": "Fired when the door is unblocked while opening.",
          "type": "void"
        },
        {
          "name": "OnLockedUse",
          "description": "Fired when the player uses the door, but it is locked.",
          "type": "void"
        }
      ],
      "inputs": [
        {
          "name": "Open",
          "description": "Open the door, if it is not fully open.",
          "type": "void"
        },
        {
          "name": "Close",
          "description": "Close the door, if it is not fully closed.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle the door between open and closed.",
          "type": "void"
        },
        {
          "name": "Lock",
          "description": "Lock the door.",
          "type": "void"
        },
        {
          "name": "Unlock",
          "description": "Unlock the door.",
          "type": "void"
        },
        {
          "name": "SetSpeed",
          "description": "Set the door speed.",
          "type": "float"
        }
      ]
    },
    {
      "name": "func_door",
      "type": "SolidClass",
      "description": "A brush entity for use as a player-useable door.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Door",
            "Origin"
          ]
        }
      ],
      "properties": [
        {
          "type": "angle",
          "name": "movedir",
          "title": "Move Direction (Pitch Yaw Roll)",
          "description": "The direction the door will move, when it opens.",
          "deflt": "0 0 0"
        },
        {
          "type": "filterclass",
          "name": "filtername",
          "title": "Block Filter Name",
          "description": "Filter to use to determine entities that block the door. ( Half-Life: Source port only )"
        }
      ]
    },
    {
      "name": "func_door_rotating",
      "type": "SolidClass",
      "description": "A brush entity for use as a rotating player-useable door.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Door",
            "Origin",
            "Angles"
          ]
        }
      ],
      "flags": [
        {
          "title": "Reverse Dir",
          "value": 2,
          "enabled": false
        },
        {
          "title": "One-way",
          "value": 16,
          "enabled": false
        },
        {
          "title": "X Axis",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Y Axis",
          "value": 128,
          "enabled": false
        },
        {
          "title": "New func_door +USE rules (NOT for prop_doors!!)",
          "value": 65536,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "distance",
          "title": "Distance",
          "description": "The amount, in degrees, that the button should rotate when it's pressed.",
          "deflt": 90
        },
        {
          "type": "choices",
          "name": "solidbsp",
          "title": "Solid Type",
          "deflt": 0,
          "choices": {
            "0": "VPhysics",
            "1": "BSP"
          }
        }
      ]
    },
    {
      "name": "BaseFadeProp",
      "type": "BaseClass",
      "properties": [
        {
          "type": "float",
          "name": "fademindist",
          "title": "Start Fade Dist",
          "description": "Distance at which the prop starts to fade (<0 = use fademaxdist).",
          "deflt": -1
        },
        {
          "type": "float",
          "name": "fademaxdist",
          "title": "End Fade Dist",
          "description": "Max fade distance at which the prop is visible (0 = don't fade out)",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "fadescale",
          "title": "Fade Scale",
          "description": "If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified. This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades. Numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances.",
          "deflt": 1
        }
      ]
    },
    {
      "name": "prop_door_rotating",
      "type": "PointClass",
      "description": "An entity used to place a door in the world.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles",
            "Global",
            "Studiomodel",
            "BaseFadeProp"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fademindist"
          ]
        },
        {
          "name": "studioprop",
          "values": []
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "slavename",
          "title": "Slave Name",
          "description": "The name of any doors that should be slaved to this door (i.e. should open when this one opens, and close when this one closes)."
        },
        {
          "type": "choices",
          "name": "hardware",
          "title": "Hardware Type",
          "deflt": 1,
          "choices": {
            "0": "<None>",
            "1": "Lever",
            "2": "Push bar",
            "3": "Keypad"
          }
        },
        {
          "type": "angle",
          "name": "ajarangles",
          "title": "Ajar Angles (Pitch Yaw Roll)",
          "description": "If the door 'Spawn Position' is set to Ajar, these are the angles to spawn at, instead of being open or closed.",
          "deflt": "0 0 0"
        },
        {
          "type": "choices",
          "name": "spawnpos",
          "title": "Spawn Position",
          "deflt": 0,
          "choices": {
            "0": "Closed",
            "1": "Open forward",
            "2": "Open back",
            "3": "Ajar (use Ajar Angles)"
          }
        },
        {
          "type": "axis",
          "name": "axis",
          "title": "Hinge Axis (Non functional)",
          "description": "This field does not function."
        },
        {
          "type": "float",
          "name": "distance",
          "title": "Rotation Distance (deg)",
          "description": "The amount, in degrees, that the door should rotate when opened.",
          "deflt": 90
        },
        {
          "type": "integer",
          "name": "speed",
          "title": "Speed",
          "description": "The speed at which the door moves.",
          "deflt": 100
        },
        {
          "type": "sound",
          "name": "soundopenoverride",
          "title": "Fully Open Sound",
          "description": "Sound played when the door has finished opening."
        },
        {
          "type": "sound",
          "name": "soundcloseoverride",
          "title": "Fully Closed Sound",
          "description": "Sound played when the door has finished closing."
        },
        {
          "type": "sound",
          "name": "soundmoveoverride",
          "title": "Moving Sound",
          "description": "Sound played when the door starts to move."
        },
        {
          "type": "integer",
          "name": "returndelay",
          "title": "Delay Before close (-1 stay open)",
          "description": "Amount of time, in seconds, after the door has opened before it closes. If the value is set to -1, the door never closes itself.",
          "deflt": -1
        },
        {
          "type": "integer",
          "name": "dmg",
          "title": "Damage Inflicted When Blocked",
          "description": "Amount of damage done to entities that block the movement of this door, per frame.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "health",
          "title": "Health (0 = Unbreakable)",
          "deflt": 0
        },
        {
          "type": "sound",
          "name": "soundlockedoverride",
          "title": "Locked Sound",
          "description": "Sound played when the player tries to open the door, and fails because it's locked."
        },
        {
          "type": "sound",
          "name": "soundunlockedoverride",
          "title": "Unlocked Sound",
          "description": "Sound played when the door is unlocked."
        },
        {
          "type": "choices",
          "name": "forceclosed",
          "title": "Force Closed",
          "description": "If set, this door will close no matter what. Useful for doors that have to close even if the player tries to block them with objects.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "opendir",
          "title": "Open Direction",
          "description": "Force the door to open only forwards or only backwards. Both directions is the standard door behavior.",
          "deflt": 0,
          "choices": {
            "0": "Open Both Directions",
            "1": "Open Forward Only",
            "2": "Open Backward Only"
          }
        }
      ],
      "flags": [
        {
          "title": "Starts Open",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Starts locked",
          "value": 2048,
          "enabled": false
        },
        {
          "title": "Door silent (No sound, and does not alert NPCs)",
          "value": 4096,
          "enabled": false
        },
        {
          "title": "Use closes",
          "value": 8192,
          "enabled": true
        },
        {
          "title": "Door silent to NPCS (Does not alert NPCs)",
          "value": 16384,
          "enabled": false
        },
        {
          "title": "Ignore player +USE",
          "value": 32768,
          "enabled": false
        },
        {
          "title": "Start Breakable",
          "value": 524288,
          "enabled": false
        }
      ],
      "outputs": [
        {
          "name": "OnClose",
          "description": "Fired when the door is told to close.",
          "type": "void"
        },
        {
          "name": "OnOpen",
          "description": "Fired when the door is told to open.",
          "type": "void"
        },
        {
          "name": "OnFullyOpen",
          "description": "Fired when the door reaches the fully open position.",
          "type": "void"
        },
        {
          "name": "OnFullyClosed",
          "description": "Fired when the door reaches the fully closed position.",
          "type": "void"
        },
        {
          "name": "OnBlockedClosing",
          "description": "Fired when the door is blocked while closing.",
          "type": "void"
        },
        {
          "name": "OnBlockedOpening",
          "description": "Fired when the door is blocked while opening.",
          "type": "void"
        },
        {
          "name": "OnUnblockedClosing",
          "description": "Fired when the door is unblocked while closing.",
          "type": "void"
        },
        {
          "name": "OnUnblockedOpening",
          "description": "Fired when the door is unblocked while opening.",
          "type": "void"
        },
        {
          "name": "OnLockedUse",
          "description": "Fired when the player uses the door, but it is locked.",
          "type": "void"
        },
        {
          "name": "OnRotationDone",
          "description": "Fired when the door arrives at it's goal angle.",
          "type": "void"
        }
      ],
      "inputs": [
        {
          "name": "Open",
          "description": "Open the door, if it is not fully open.",
          "type": "void"
        },
        {
          "name": "OpenAwayFrom",
          "description": "Open the door away from the specified entity.",
          "type": "string"
        },
        {
          "name": "Close",
          "description": "Close the door, if it is not fully closed.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle the door between open and closed.",
          "type": "void"
        },
        {
          "name": "Lock",
          "description": "Lock the door.",
          "type": "void"
        },
        {
          "name": "Unlock",
          "description": "Unlock the door.",
          "type": "void"
        },
        {
          "name": "SetRotationDistance",
          "description": "Set the distance (in degrees) between Open and Closed.",
          "type": "float"
        },
        {
          "name": "MoveToRotationDistance",
          "description": "Sets the open distance (in degrees) and moves there.",
          "type": "float"
        },
        {
          "name": "SetSpeed",
          "description": "Set the speed at which the door rotates. 100 is default.",
          "type": "float"
        }
      ]
    },
    {
      "name": "env_cubemap",
      "type": "PointClass",
      "description": "An entity that creates a sample point for the Cubic Environment Map.",
      "parameters": [
        {
          "name": "color",
          "values": [
            0,
            0,
            255
          ]
        },
        {
          "name": "sidelist",
          "values": [
            "sides"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_cubemap.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "cubemapsize",
          "title": "Cubemap Size",
          "deflt": 0,
          "choices": {
            "0": "Default",
            "1": "1x1",
            "2": "2x2",
            "3": "4x4",
            "4": "8x8",
            "5": "16x16",
            "6": "32x32",
            "7": "64x64",
            "8": "128x128",
            "9": "256x256"
          }
        },
        {
          "type": "sidelist",
          "name": "sides",
          "title": "Brush faces",
          "description": "(Optional) Brushes faces to directly attach to the env_cubemap. Press Pick then click on faces in the 3D View to select them. Use CTRL while clicking to add or remove from the selection."
        }
      ]
    },
    {
      "name": "BModelParticleSpawner",
      "type": "BaseClass",
      "properties": [
        {
          "type": "choices",
          "name": "StartDisabled",
          "title": "Start Disabled",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "color255",
          "name": "Color",
          "title": "Particle Color (R G B)",
          "deflt": "255 255 255"
        },
        {
          "type": "integer",
          "name": "SpawnRate",
          "title": "Particle Per Second",
          "description": "Number of particles to spawn, per second.",
          "deflt": 40
        },
        {
          "type": "string",
          "name": "SpeedMax",
          "title": "Maximum Particle Speed",
          "description": "Maximum speed that the particles can move after spawning.",
          "deflt": 13
        },
        {
          "type": "string",
          "name": "LifetimeMin",
          "title": "Minimum Particle Lifetime",
          "description": "Minimum number of seconds until each particle dies. Particles live for a random duration between this and 'Maximum Particle Lifetime'.",
          "deflt": 3
        },
        {
          "type": "string",
          "name": "LifetimeMax",
          "title": "Maximum Particle Lifetime",
          "description": "Maximum number of seconds until each particle dies. Particles live for a random duration between 'Minimum Particle Lifetime' and this.",
          "deflt": 5
        },
        {
          "type": "integer",
          "name": "DistMax",
          "title": "Maximum Visible Distance",
          "description": "Maximum distance at which particles are visible. They fade to translucent at this distance.",
          "deflt": 1024
        },
        {
          "type": "choices",
          "name": "Frozen",
          "title": "Frozen",
          "description": "When set, this entity spawns the number of particles in SpawnRate immediately, and then goes inactive.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Turn on.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turn off.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_dustmotes",
      "type": "SolidClass",
      "description": "A brush entity that spawns sparkling dust motes within its volume.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "BModelParticleSpawner"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "SizeMin",
          "title": "Minimum Particle Size",
          "deflt": 10
        },
        {
          "type": "string",
          "name": "SizeMax",
          "title": "Maximum Particle Size",
          "deflt": 20
        },
        {
          "type": "integer",
          "name": "Alpha",
          "title": "Alpha",
          "deflt": 255
        }
      ]
    },
    {
      "name": "func_smokevolume",
      "type": "SolidClass",
      "description": "A brush entity that spawns smoke particles within its volume.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "flags": [
        {
          "title": "Emissive",
          "value": 1,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "color255",
          "name": "Color1",
          "title": "Particle Color1 (R G B)",
          "deflt": "255 255 255"
        },
        {
          "type": "color255",
          "name": "Color2",
          "title": "Particle Color2 (R G B)",
          "deflt": "255 255 255"
        },
        {
          "type": "material",
          "name": "material",
          "title": "Material",
          "description": "The material to use for the particles",
          "deflt": "particle/particle_smokegrenade"
        },
        {
          "type": "float",
          "name": "ParticleDrawWidth",
          "title": "Particle Draw Width (units)",
          "description": "The size of the particles, in units/inches.",
          "deflt": 120
        },
        {
          "type": "float",
          "name": "ParticleSpacingDistance",
          "title": "Particle Spacing Distance (units)",
          "description": "The distance between the particles inside the volume. The lower the number, the denser the particles, and the more overdraw there will be. It is best to keep it as high as you can without it looking bad.",
          "deflt": 80
        },
        {
          "type": "float",
          "name": "DensityRampSpeed",
          "title": "Density Ramp Speed (seconds)",
          "description": "Time to go from density 0 to density 1, in seconds.",
          "deflt": 1
        },
        {
          "type": "float",
          "name": "RotationSpeed",
          "title": "Rotation Speed (degrees/sec)",
          "description": "The speed that the particles should rotate, in degrees per second.",
          "deflt": 10
        },
        {
          "type": "float",
          "name": "MovementSpeed",
          "title": "Movement Speed (units/sec)",
          "description": "The speed that the particles should move around, in units/inches per second.",
          "deflt": 10
        },
        {
          "type": "float",
          "name": "Density",
          "title": "Density [0..1]",
          "deflt": 1
        }
      ],
      "inputs": [
        {
          "name": "SetRotationSpeed",
          "description": "Set the particle rotation speed (in degrees per second).",
          "type": "float"
        },
        {
          "name": "SetMovementSpeed",
          "description": "Set the particle movement speed (in inches per second).",
          "type": "float"
        },
        {
          "name": "SetDensity",
          "description": "Set the particle density. It should be a range from 0 to 1.",
          "type": "float"
        }
      ]
    },
    {
      "name": "func_dustcloud",
      "type": "SolidClass",
      "description": "A brush entity that spawns a translucent dust cloud within its volume.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "BModelParticleSpawner"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "Alpha",
          "title": "Alpha",
          "deflt": 30
        },
        {
          "type": "string",
          "name": "SizeMin",
          "title": "Minimum Particle Size",
          "deflt": 100
        },
        {
          "type": "string",
          "name": "SizeMax",
          "title": "Maximum Particle Size",
          "deflt": 200
        }
      ]
    },
    {
      "name": "env_dustpuff",
      "type": "PointClass",
      "description": "An entity that can emit dust puffs.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "scale",
          "title": "Scale",
          "description": "Size of the dust puff.",
          "deflt": 8
        },
        {
          "type": "float",
          "name": "speed",
          "title": "Speed",
          "description": "Speed at which the dust particles should move.",
          "deflt": 16
        },
        {
          "type": "color255",
          "name": "color",
          "title": "Dust color",
          "deflt": "128 128 128"
        }
      ],
      "inputs": [
        {
          "name": "SpawnDust",
          "description": "Spawn a dust puff.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_particlescript",
      "type": "PointClass",
      "description": "An entity that has special animation events that can be fired by a model with an animation inside its .qc designed foruse by this entity.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "studio",
          "name": "model",
          "title": "Script Model",
          "description": "Model to use for animation sequences.",
          "deflt": "models/Ambient_citadel_paths.mdl"
        }
      ],
      "inputs": [
        {
          "name": "SetSequence",
          "description": "Sets the script model's sequence.",
          "type": "string"
        }
      ]
    },
    {
      "name": "env_effectscript",
      "type": "PointClass",
      "description": "An entity that allows you to script special visual effects via a script file.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "studio",
          "name": "model",
          "title": "Script Model",
          "description": "Model to use for animation sequences.",
          "deflt": "models/Effects/teleporttrail.mdl"
        },
        {
          "type": "string",
          "name": "scriptfile",
          "title": "Script File",
          "description": "Name of the script to use for this model.",
          "deflt": "scripts/effects/testeffect.txt"
        }
      ],
      "inputs": [
        {
          "name": "SetSequence",
          "description": "Sets the script model's sequence.",
          "type": "string"
        }
      ]
    },
    {
      "name": "logic_auto",
      "type": "PointClass",
      "description": "Fires outputs when a map spawns. If 'Remove on fire' flag is set the logic_auto is deleted after firing. It can be set to check a global state before firing. This allows you to only fire events based on what took place in a previous map.",
      "parameters": [
        {
          "name": "iconsprite",
          "values": [
            "editor/logic_auto.vmt"
          ]
        }
      ],
      "flags": [
        {
          "title": "Remove on fire",
          "value": 1,
          "enabled": true
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "globalstate",
          "title": "Global State to Read",
          "description": "If set, this specifies a global state to check before firing. The OnMapSpawn output will only fire if the global state is set.",
          "choices": {
            "": "--- None ---",
            "gordon_precriminal": "Gordon pre-criminal",
            "antlion_allied": "Antlions are player allies",
            "suit_no_sprint": "Suit sprint function not yet enabled",
            "super_phys_gun": "Super Gravity Gun is enabled",
            "friendly_encounter": "Friendly encounter sequence (lower weapons, etc.)",
            "gordon_invulnerable": "Gordon is invulnerable",
            "no_seagulls_on_jeep": "Don't spawn seagulls on the jeep",
            "is_console": "Game is running on a console",
            "is_pc": "Game is running on a PC"
          }
        }
      ],
      "outputs": [
        {
          "name": "OnMapSpawn",
          "description": "Fired when the map is loaded for any reason.",
          "type": "void"
        },
        {
          "name": "OnNewGame",
          "description": "Fired when the map is loaded to start a new game.",
          "type": "void"
        },
        {
          "name": "OnLoadGame",
          "description": "Fired when the map is loaded from a saved game.",
          "type": "void"
        },
        {
          "name": "OnMapTransition",
          "description": "Fired when the map is loaded due to a level transition.",
          "type": "void"
        },
        {
          "name": "OnBackgroundMap",
          "description": "Fired when the map is loaded as a background to the main menu.",
          "type": "void"
        },
        {
          "name": "OnMultiNewMap",
          "description": "Fired only in multiplayer, when a new map is loaded.",
          "type": "void"
        },
        {
          "name": "OnMultiNewRound",
          "description": "Fired only in multiplayer, when a new round is started. Only fired in multiplayer games that use round-based gameplay.",
          "type": "void"
        }
      ]
    },
    {
      "name": "point_viewcontrol",
      "type": "PointClass",
      "description": "A camera entity that controls the player's view. While it's active, the player will see out of the camera.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles",
            "Parentname"
          ]
        },
        {
          "name": "studioprop",
          "values": [
            "models/editor/camera.mdl"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Entity to Look At",
          "description": "Name of the entity that the camera should point at and track while active."
        },
        {
          "type": "string",
          "name": "targetattachment",
          "title": "Target Attachment Name",
          "description": "If set, the camera will focus on the specified attachment on the 'Entity to Look At'."
        },
        {
          "type": "integer",
          "name": "wait",
          "title": "Hold Time",
          "description": "The amount of time the camera should control the player's view for, after which it deactivates itself. If the camera should stay active until told to deactive, set the 'Infinite Hold Time' spawnflag.",
          "deflt": 10
        },
        {
          "type": "target_destination",
          "name": "moveto",
          "title": "Path Corner",
          "description": "The first path corner in a track that the camera should move along once it's activated. If not specified, the camera won't move."
        },
        {
          "type": "choices",
          "name": "interpolatepositiontoplayer",
          "title": "Interpolate Position To Player",
          "description": "Gradually interpolate player's position to here on start. (Episodic only)",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "float",
          "name": "trackspeed",
          "title": "Tracking Speed of the camera",
          "description": "The speed that the camera tries to follow it's look target.",
          "deflt": "40"
        },
        {
          "type": "float",
          "name": "fov",
          "title": "FOV",
          "description": "The FOV when using this camera.",
          "deflt": "90"
        },
        {
          "type": "float",
          "name": "fov_rate",
          "title": "FOV rate",
          "description": "How fast we change to the new fov.",
          "deflt": "1"
        },
        {
          "type": "string",
          "name": "speed",
          "title": "Initial Speed",
          "description": "The starting speed that the camera moves at, if it's on a path track.",
          "deflt": "0"
        },
        {
          "type": "string",
          "name": "acceleration",
          "title": "Acceleration units/sec^2",
          "description": "The speed at which the camera accelerates to path corner's desired speeds.",
          "deflt": "500"
        },
        {
          "type": "string",
          "name": "deceleration",
          "title": "Stop Deceleration units/sec^2",
          "description": "The speed at which the camera decelerates to path corner's desired speeds.",
          "deflt": "500"
        }
      ],
      "flags": [
        {
          "title": "Start At Player",
          "value": 1,
          "enabled": true
        },
        {
          "title": "Follow Player",
          "value": 2,
          "enabled": true
        },
        {
          "title": "Freeze Player",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Infinite Hold Time",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Snap to goal angles",
          "value": 16,
          "enabled": false
        },
        {
          "title": "Make Player non-solid",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Interruptable by Player",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Set Fov",
          "value": 128,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Enable",
          "description": "Enable the point_viewcontrol, and start controlling the player's view.",
          "type": "void"
        },
        {
          "name": "Disable",
          "description": "Disable the point_viewcontrol, and stop controlling the player's view.",
          "type": "void"
        },
        {
          "name": "SetTarget",
          "description": "Set a new target for the camera to point at.",
          "type": "string"
        },
        {
          "name": "SetTargetAttachment",
          "description": "Set a new attachment on the target for the camera to point at.",
          "type": "string"
        },
        {
          "name": "ReturnToEyes",
          "description": "Return the camera view to the player's eyes.",
          "type": "void"
        },
        {
          "name": "TeleportToView",
          "description": "Teleport the player to the current position of the camera.",
          "type": "void"
        },
        {
          "name": "SetTrackSpeed",
          "description": "Set the speed that the camera will try to track it's target.",
          "type": "float"
        },
        {
          "name": "SetPath",
          "description": "Have the camera start following a new path.",
          "type": "string"
        }
      ],
      "outputs": [
        {
          "name": "OnEndFollow",
          "description": "Fired when the point_viewcontrol deactivates, due to the Disable input being received, the Entity to Look At being destroyed, or the Hold Time expiring.",
          "type": "void"
        }
      ]
    },
    {
      "name": "point_posecontroller",
      "type": "PointClass",
      "description": "An entity that controls a pose parameter of a prop and cycles the pose clientside.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "PropName",
          "title": "Prop Name",
          "description": "Name of the prop to control."
        },
        {
          "type": "string",
          "name": "PoseParameterName",
          "title": "Pose Parameter Name",
          "description": "Name of the pose parameter to control."
        },
        {
          "type": "float",
          "name": "PoseValue",
          "title": "Pose Parameter Value",
          "description": "Normalized value for the pose parameter from 0.0 and 1.0 (maps to min and max range).",
          "deflt": "0.0"
        },
        {
          "type": "float",
          "name": "InterpolationTime",
          "title": "Interpolation Time",
          "description": "Number of seconds (0.0 to 10.0) for client to match absolue pose values.",
          "deflt": "0.0"
        },
        {
          "type": "choices",
          "name": "InterpolationWrap",
          "title": "Should wrap from 0.0 to 1.0 when interpolating.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "float",
          "name": "CycleFrequency",
          "title": "Cycle Frequency",
          "description": "Base cycles per second from -10.0 to 10.0.",
          "deflt": "0.0"
        },
        {
          "type": "choices",
          "name": "FModulationType",
          "title": "Frequency Modulation Type",
          "deflt": 0,
          "choices": {
            "0": "None",
            "1": "Sine",
            "2": "Square",
            "3": "Triangle",
            "4": "Sawtooth",
            "5": "Noise"
          }
        },
        {
          "type": "float",
          "name": "FModTimeOffset",
          "title": "Frequency Modulation Time Offset",
          "description": "Modulation time offset from -1.0f to 1.0.",
          "deflt": "0.0"
        },
        {
          "type": "float",
          "name": "FModRate",
          "title": "Frequency Modulation Rate",
          "description": "Modulation cycles per second from -10.0f to 10.0.",
          "deflt": "0.0"
        },
        {
          "type": "float",
          "name": "FModAmplitude",
          "title": "Frequency Modulation Amplitude",
          "description": "Modulation extents from 0.0f to 10.0.",
          "deflt": "0.0"
        }
      ],
      "inputs": [
        {
          "name": "SetPoseParameterName",
          "description": "Sets the pose parameter to control.",
          "type": "string"
        },
        {
          "name": "SetPoseValue",
          "description": "Set the pose parameter to a normalized value between 0.0 and 1.0 (maps to min and max range).",
          "type": "float"
        },
        {
          "name": "SetInterpolationTime",
          "description": "Set the interpolation time to a number of seconds between 0.0 and 10.0.",
          "type": "float"
        },
        {
          "name": "SetCycleFrequency",
          "description": "Set the pose parameter's base cycles per second from -10.0f to 10.0.",
          "type": "float"
        },
        {
          "name": "SetFModType",
          "description": "Set the type of frequency modulation.",
          "type": "integer"
        },
        {
          "name": "SetFModTimeOffset",
          "description": "Set the modulation time offset from -1.0f to 1.0.",
          "type": "float"
        },
        {
          "name": "SetFModRate",
          "description": "Set the modulation cycles per second from -10.0f to 10.0.",
          "type": "float"
        },
        {
          "name": "SetFModAmplitude",
          "description": "Set the modulation extents from 0.0f to 10.0.",
          "type": "float"
        },
        {
          "name": "RandomizeFMod",
          "description": "Randomize the frequency modulation by an extremeness of 0.0 to 1.0.",
          "type": "float"
        }
      ]
    },
    {
      "name": "logic_compare",
      "type": "PointClass",
      "description": "Compares an input value to another value. If the input value is less than the compare value, the OnLessThan output is fired with the input value. If the input value is equal to the compare value, the OnEqualTo output is fired with the input value. If the input value is greater than the compare value, the OnGreaterThan output is fired with the input value.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/logic_compare.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "InitialValue",
          "title": "Initial value",
          "description": "Initial value for the input value."
        },
        {
          "type": "integer",
          "name": "CompareValue",
          "title": "Compare value",
          "description": "The value to compare against."
        }
      ],
      "inputs": [
        {
          "name": "SetValue",
          "description": "Set the value that will be compared against the compare value.",
          "type": "float"
        },
        {
          "name": "SetValueCompare",
          "description": "Set the value that will be compared against the compare value and performs the comparison.",
          "type": "float"
        },
        {
          "name": "SetCompareValue",
          "description": "Set the compare value.",
          "type": "float"
        },
        {
          "name": "Compare",
          "description": "Force a compare of the input value with the compare value.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnLessThan",
          "description": "Fired when the input value is less than the compare value. Sends the input value as data.",
          "type": "float"
        },
        {
          "name": "OnEqualTo",
          "description": "Fired when the input value is equal to the compare value. Sends the input value as data.",
          "type": "float"
        },
        {
          "name": "OnNotEqualTo",
          "description": "Fired when the input value is different from the compare value. Sends the input value as data.",
          "type": "float"
        },
        {
          "name": "OnGreaterThan",
          "description": "Fired when the input value is greater than the compare value. Sends the input value as data.",
          "type": "float"
        }
      ]
    },
    {
      "name": "logic_branch",
      "type": "PointClass",
      "description": "Tests a boolean value and fires an output based on whether the value is true or false. Use this entity to branch between two potential sets of events.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/logic_branch.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "InitialValue",
          "title": "Initial value",
          "description": "Initial value for the boolean value (0 or 1)."
        }
      ],
      "inputs": [
        {
          "name": "SetValue",
          "description": "Set the boolean value without performing the comparison. Use this to hold a value for a future test.",
          "type": "bool"
        },
        {
          "name": "SetValueTest",
          "description": "Set the boolean value and test it, firing OnTrue or OnFalse based on the new value.",
          "type": "bool"
        },
        {
          "name": "Toggle",
          "description": "Toggle the boolean value between true and false.",
          "type": "void"
        },
        {
          "name": "ToggleTest",
          "description": "Toggle the boolean value and tests it, firing OnTrue or OnFalse based on the new value.",
          "type": "void"
        },
        {
          "name": "Test",
          "description": "Test the input value and fire OnTrue or OnFalse based on the value.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnTrue",
          "description": "Fired when the input value is true (nonzero).",
          "type": "bool"
        },
        {
          "name": "OnFalse",
          "description": "Fired when the input value is false (zero).",
          "type": "bool"
        }
      ]
    },
    {
      "name": "logic_branch_listener",
      "type": "PointClass",
      "description": "Contains a list of logic_branch entities and fires outputs when the state of any of the logic_branches changes.\\n\\nThis entity is used to fire an event when a set of conditions are all satisfied.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "Branch01",
          "title": "Logic Branch 01",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch02",
          "title": "Logic Branch 02",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch03",
          "title": "Logic Branch 03",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch04",
          "title": "Logic Branch 04",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch05",
          "title": "Logic Branch 05",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch06",
          "title": "Logic Branch 06",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch07",
          "title": "Logic Branch 07",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch08",
          "title": "Logic Branch 08",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch09",
          "title": "Logic Branch 09",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch10",
          "title": "Logic Branch 10",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch11",
          "title": "Logic Branch 11",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch12",
          "title": "Logic Branch 12",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch13",
          "title": "Logic Branch 13",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch14",
          "title": "Logic Branch 14",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch15",
          "title": "Logic Branch 15",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        },
        {
          "type": "target_destination",
          "name": "Branch16",
          "title": "Logic Branch 16",
          "description": "The name of one or more logic_branches (wildcards allowed)."
        }
      ],
      "inputs": [
        {
          "name": "Test",
          "description": "Tests the state of all the logic_branches in the list and fires the appropriate output.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnAllTrue",
          "description": "Fired when all the logic_branches in the list become true.",
          "type": "void"
        },
        {
          "name": "OnAllFalse",
          "description": "Fired when all the logic_branches in the list become false.",
          "type": "void"
        },
        {
          "name": "OnMixed",
          "description": "Fired when one of the logic branches in the list changes, but some are true and some are false.",
          "type": "void"
        }
      ]
    },
    {
      "name": "logic_case",
      "type": "PointClass",
      "description": "Compares an input to up to 16 preset values. If the input value is the same as any of the preset values, an output corresponding to that value is fired.\\n\\nFor example: if Case01 is set to 2 and Case02 is set to 5, and the input value is 5, the OnCase02 output will be fired.\\n\\nThis entity can also be used to select from a number of random targets via the PickRandom input. One of the OnCase outputs that is connected to another entity will be picked at random and fired.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/logic_case.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "Case01",
          "title": "Case 01"
        },
        {
          "type": "string",
          "name": "Case02",
          "title": "Case 02"
        },
        {
          "type": "string",
          "name": "Case03",
          "title": "Case 03"
        },
        {
          "type": "string",
          "name": "Case04",
          "title": "Case 04"
        },
        {
          "type": "string",
          "name": "Case05",
          "title": "Case 05"
        },
        {
          "type": "string",
          "name": "Case06",
          "title": "Case 06"
        },
        {
          "type": "string",
          "name": "Case07",
          "title": "Case 07"
        },
        {
          "type": "string",
          "name": "Case08",
          "title": "Case 08"
        },
        {
          "type": "string",
          "name": "Case09",
          "title": "Case 09"
        },
        {
          "type": "string",
          "name": "Case10",
          "title": "Case 10"
        },
        {
          "type": "string",
          "name": "Case11",
          "title": "Case 11"
        },
        {
          "type": "string",
          "name": "Case12",
          "title": "Case 12"
        },
        {
          "type": "string",
          "name": "Case13",
          "title": "Case 13"
        },
        {
          "type": "string",
          "name": "Case14",
          "title": "Case 14"
        },
        {
          "type": "string",
          "name": "Case15",
          "title": "Case 15"
        },
        {
          "type": "string",
          "name": "Case16",
          "title": "Case 16"
        }
      ],
      "inputs": [
        {
          "name": "InValue",
          "description": "Compares the Input value to the case values, and fires the appropriate output, if any.",
          "type": "string"
        },
        {
          "name": "PickRandom",
          "description": "Fires a random OnCase output with at least one connection.",
          "type": "void"
        },
        {
          "name": "PickRandomShuffle",
          "description": "Fires a random OnCase output with at least one connection, with no repeats until all cases have been picked, at which point the shuffle starts over.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnCase01",
          "description": "Fired when the input value equals the Case01 value.",
          "type": "void"
        },
        {
          "name": "OnCase02",
          "description": "Fired when the input value equals the Case02 value.",
          "type": "void"
        },
        {
          "name": "OnCase03",
          "description": "Fired when the input value equals the Case03 value.",
          "type": "void"
        },
        {
          "name": "OnCase04",
          "description": "Fired when the input value equals the Case04 value.",
          "type": "void"
        },
        {
          "name": "OnCase05",
          "description": "Fired when the input value equals the Case05 value.",
          "type": "void"
        },
        {
          "name": "OnCase06",
          "description": "Fired when the input value equals the Case06 value.",
          "type": "void"
        },
        {
          "name": "OnCase07",
          "description": "Fired when the input value equals the Case07 value.",
          "type": "void"
        },
        {
          "name": "OnCase08",
          "description": "Fired when the input value equals the Case08 value.",
          "type": "void"
        },
        {
          "name": "OnCase09",
          "description": "Fired when the input value equals the Case09 value.",
          "type": "void"
        },
        {
          "name": "OnCase10",
          "description": "Fired when the input value equals the Case10 value.",
          "type": "void"
        },
        {
          "name": "OnCase11",
          "description": "Fired when the input value equals the Case11 value.",
          "type": "void"
        },
        {
          "name": "OnCase12",
          "description": "Fired when the input value equals the Case12 value.",
          "type": "void"
        },
        {
          "name": "OnCase13",
          "description": "Fired when the input value equals the Case13 value.",
          "type": "void"
        },
        {
          "name": "OnCase14",
          "description": "Fired when the input value equals the Case14 value.",
          "type": "void"
        },
        {
          "name": "OnCase15",
          "description": "Fired when the input value equals the Case15 value.",
          "type": "void"
        },
        {
          "name": "OnCase16",
          "description": "Fired when the input value equals the Case16 value.",
          "type": "void"
        },
        {
          "name": "OnDefault",
          "description": "Fired when the input value does not equal any of the Case values.",
          "type": "void"
        }
      ]
    },
    {
      "name": "logic_multicompare",
      "type": "PointClass",
      "description": "Compares a set of inputs to each other. If they are all the same, fires an OnEqual output. If any are different, fires the OnNotEqual output.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/logic_multicompare.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "IntegerValue",
          "title": "Integer Value (optional)"
        },
        {
          "type": "choices",
          "name": "ShouldComparetoValue",
          "title": "Should use Integer Value",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "InputValue",
          "description": "Input value",
          "type": "integer"
        },
        {
          "name": "CompareValues",
          "description": "Compares the values and fires appropriate outputs",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnEqual",
          "description": "Fires if the values are equal",
          "type": "void"
        },
        {
          "name": "OnNotEqual",
          "description": "Fires if the values are not equal",
          "type": "void"
        }
      ]
    },
    {
      "name": "logic_relay",
      "type": "PointClass",
      "description": "A message forwarder. Fires an OnTrigger output when triggered, and can be disabled to prevent forwarding outputs.\\n\\nUseful as an intermediary between one entity and another for turning on or off an I/O connection, or as a container for holding a set of outputs that can be triggered from multiple places.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "EnableDisable"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/logic_relay.vmt"
          ]
        }
      ],
      "flags": [
        {
          "title": "Only trigger once",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Allow fast retrigger",
          "value": 2,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Trigger",
          "description": "Trigger the relay, causing its OnTrigger output to fire if it is enabled.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle the relay between enabled and disabled.",
          "type": "void"
        },
        {
          "name": "CancelPending",
          "description": "Cancel any events fired by this relay that are currently pending in the I/O event queue.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnSpawn",
          "description": "Fired when the relay is spawned. If the relay is set to only trigger once, it will delete itself after firing this output.",
          "type": "void"
        },
        {
          "name": "OnTrigger",
          "description": "Fired when the relay is triggered. If the relay is set to only trigger once, it will delete itself after firing this output.",
          "type": "void"
        }
      ]
    },
    {
      "name": "logic_timer",
      "type": "PointClass",
      "description": "An entity that fires a timer event at regular, or random, intervals. It can also be set to oscillate betweena high and low end, in which case it will fire alternating high/low outputs each time it fires.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "EnableDisable"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/logic_timer.vmt"
          ]
        }
      ],
      "flags": [
        {
          "title": "Oscillator (alternates between OnTimerHigh and OnTimerLow outputs)",
          "value": 1,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "UseRandomTime",
          "title": "Use Random Time",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "string",
          "name": "LowerRandomBound",
          "title": "Minimum Random Interval",
          "description": "If 'Use Random Time' is set, this is the minimum time between timer fires. The time will be a random number between this and the 'Maximum Random Interval'."
        },
        {
          "type": "string",
          "name": "UpperRandomBound",
          "title": "Maximum Random Interval",
          "description": "If 'Use Random Time' is set, this is the maximum time between timer fires. The time will be a random number between the 'Minimum Random Interval' and this."
        },
        {
          "type": "string",
          "name": "RefireTime",
          "title": "Refire Interval",
          "description": "If 'Use Random Time' isn't set, this is the time between timer fires, in seconds."
        }
      ],
      "inputs": [
        {
          "name": "RefireTime",
          "description": "Set a new Refire Interval.",
          "type": "integer"
        },
        {
          "name": "ResetTimer",
          "description": "Reset the timer. It will fire after the Refire Interval expires.",
          "type": "void"
        },
        {
          "name": "FireTimer",
          "description": "Force the timer to fire immediately.",
          "type": "void"
        },
        {
          "name": "Enable",
          "description": "Enable the timer.",
          "type": "void"
        },
        {
          "name": "Disable",
          "description": "Disable the timer.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle the timer on/off.",
          "type": "void"
        },
        {
          "name": "LowerRandomBound",
          "description": "Set a new Minimum Random Interval.",
          "type": "float"
        },
        {
          "name": "UpperRandomBound",
          "description": "Set a new Maximum Random Interval.",
          "type": "float"
        },
        {
          "name": "AddToTimer",
          "description": "Add time to the timer if it is currently enabled.  Does not change the Refire Interval.",
          "type": "float"
        },
        {
          "name": "SubtractFromTimer",
          "description": "Subtract time from the timer if it is currently enabled.  Does not change the Refire Interval.",
          "type": "float"
        }
      ],
      "outputs": [
        {
          "name": "OnTimer",
          "description": "Fired when the timer expires.",
          "type": "void"
        },
        {
          "name": "OnTimerHigh",
          "description": "Fired every other time for an oscillating timer.",
          "type": "void"
        },
        {
          "name": "OnTimerLow",
          "description": "Fired every other time for an oscillating timer.",
          "type": "void"
        }
      ]
    },
    {
      "name": "hammer_updateignorelist",
      "type": "PointClass",
      "description": "Specifies entities that are to be ignored by the hammer_update_safe_entities console command. Enter the targetnames of entities that you want to exclude into the list of fields here. Several of these may exist in a map.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "IgnoredName01",
          "title": "IgnoredName 01",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName02",
          "title": "IgnoredName 02",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName03",
          "title": "IgnoredName 03",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName04",
          "title": "IgnoredName 04",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName05",
          "title": "IgnoredName 05",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName06",
          "title": "IgnoredName 06",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName07",
          "title": "IgnoredName 07",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName08",
          "title": "IgnoredName 08",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName09",
          "title": "IgnoredName 09",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName10",
          "title": "IgnoredName 10",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName11",
          "title": "IgnoredName 11",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName12",
          "title": "IgnoredName 12",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName13",
          "title": "IgnoredName 13",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName14",
          "title": "IgnoredName 14",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName15",
          "title": "IgnoredName 15",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "IgnoredName16",
          "title": "IgnoredName 16",
          "description": "Do not send this entity's information back to hammer during hammer_update_safe_entities",
          "deflt": ""
        }
      ]
    },
    {
      "name": "logic_collision_pair",
      "type": "PointClass",
      "description": "An entity that can be used to enables/disable vphysics collisions between two target entities.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -4,
            -4,
            -4,
            4,
            4,
            4
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            255,
            0
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "attach1",
          "title": "Attachment 1",
          "description": "The first entity.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "attach2",
          "title": "Attachment 2",
          "description": "The second entity.",
          "deflt": ""
        },
        {
          "type": "choices",
          "name": "startdisabled",
          "title": "Start with collisions disabled",
          "deflt": 1,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "EnableCollisions",
          "description": "Enable collisions between the first and second entity.",
          "type": "void"
        },
        {
          "name": "DisableCollisions",
          "description": "Disable collisions between the first and second entity.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_microphone",
      "type": "PointClass",
      "description": "An entity that acts as a microphone. It works in one of two modes. If it has a 'Speaker' set, it picks up all sounds within the specified sound range, and rebroadcasts them through the Speaker entity. In this Speaker mode, it ignores the Hears X spawnflags and does not fire the SoundLevel output. If it has no Speaker set, it measures the sound level at a point, and outputs the sound level as a value between 0 and 1. In Measuring mode, it only hears sounds that match the Hear X spawnflags.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "EnableDisable"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/env_microphone.vmt"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "MaxRange"
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            0,
            255
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Measure target",
          "description": "If the speaker is in Measuring mode, this is the name of the entity where the sound level is to be measured."
        },
        {
          "type": "target_destination",
          "name": "SpeakerName",
          "title": "Speaker target",
          "description": "The name of an info_target entity through which to play any sounds heard by this microphone. If specified, the microphone will consider itself in Speaker mode.",
          "deflt": ""
        },
        {
          "type": "filterclass",
          "name": "ListenFilter",
          "title": "Listen Filter",
          "description": "The name of an filter entity which specifies the only entities the microphone can hear. Sounds emitted by other entities will not be heard.",
          "deflt": ""
        },
        {
          "type": "choices",
          "name": "speaker_dsp_preset",
          "title": "Speaker DSP Preset",
          "description": "Only useful in Speaker mode. If specified, when the microphone is enabled, it'll set the global dsp_speaker preset to this value. Sounds played back through speakers will then be affected by the selected DSP.",
          "deflt": 0,
          "choices": {
            "0": "Use Default",
            "50": "1 NO EFFECT",
            "51": "2 (DUPLICATE OF 1)",
            "52": "3 (DUPLICATE OF 1)",
            "53": "4 (DUPLICATE OF 1)",
            "54": "5 (DUPLICATE OF 1)",
            "55": "6 SPEAKER, LOUDER",
            "56": "7 SPEAKER VERY SMALL",
            "57": "8 LOUDSPEAKER, ECHO",
            "58": "9 SPEAKER SMALL",
            "59": "10 SPEAKER TINY"
          }
        },
        {
          "type": "float",
          "name": "Sensitivity",
          "title": "Sensitivity (0 - 10)",
          "description": "Microphone sensitivity, 0=deaf, 1=default, 10=extremely sensitive). Only applicable in Measuring mode.",
          "deflt": 1
        },
        {
          "type": "float",
          "name": "SmoothFactor",
          "title": "Smoothing (0 - 1)",
          "description": "Smoothing factor, 0=no smoothing, 1=maximum smoothing). Only applicable in Measuring mode.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "MaxRange",
          "title": "Maximum hearing range (0=infinite)",
          "description": "Sounds beyond this range won't be heard, irrelevant of attenuation. WARNING: setting this to zero (or a value > 1024) when the microphone is in Speaker mode can be very bad for performance!!",
          "deflt": 240
        }
      ],
      "flags": [
        {
          "title": "Hears combat sounds",
          "value": 1,
          "enabled": true
        },
        {
          "title": "Hears world sounds",
          "value": 2,
          "enabled": true
        },
        {
          "title": "Hears player sounds",
          "value": 4,
          "enabled": true
        },
        {
          "title": "Hears bullet impacts",
          "value": 8,
          "enabled": true
        },
        {
          "title": "Swallows sounds routed through speakers",
          "value": 16,
          "enabled": false
        },
        {
          "title": "Hears explosions",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Ignores non-attenuated sounds",
          "value": 64,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "SetSpeakerName",
          "description": "Set the microphone to output through a different speaker entity.",
          "type": "string"
        }
      ],
      "outputs": [
        {
          "name": "SoundLevel",
          "description": "Fired in Measuring mode whenever the sound level changes.",
          "type": "float"
        },
        {
          "name": "OnRoutedSound",
          "description": "Fired whenever a sound is routed out through the specified speaker (if any).",
          "type": "void"
        },
        {
          "name": "OnHeardSound",
          "description": "Fired whenever this microphone hears any sound it cares about.",
          "type": "void"
        }
      ]
    },
    {
      "name": "math_remap",
      "type": "PointClass",
      "description": "An entity that remaps a range of input values to a given range of output values.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "EnableDisable"
          ]
        }
      ],
      "flags": [
        {
          "title": "Ignore out of range input values",
          "value": 1,
          "enabled": true
        },
        {
          "title": "Clamp output to output range",
          "value": 2,
          "enabled": true
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "in1",
          "title": "Minimum Valid Input Value",
          "description": "Input values below this value will be ignored.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "in2",
          "title": "Maximum Valid Input Value",
          "description": "Input values above this value will be ignored.",
          "deflt": 1
        },
        {
          "type": "integer",
          "name": "out1",
          "title": "Output Value When Input Is Min.",
          "description": "When the input value is equal to 'Minimum Valid Input Value', this is the output value."
        },
        {
          "type": "integer",
          "name": "out2",
          "title": "Output Value When Input Is Max.",
          "description": "When the input value is equal to 'Maximum Valid Input Value', this is the output value."
        }
      ],
      "inputs": [
        {
          "name": "InValue",
          "description": "Input value and fire the output with the remapped value.",
          "type": "float"
        }
      ],
      "outputs": [
        {
          "name": "OutValue",
          "description": "Fired when the InValue input is received, with the remapped input value as the parameter.",
          "type": "float"
        }
      ]
    },
    {
      "name": "math_colorblend",
      "type": "PointClass",
      "description": "Used to create a blend between two colors for controlling the color of another entity.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "flags": [
        {
          "title": "Ignore out of range input values",
          "value": 1,
          "enabled": true
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "inmin",
          "title": "Minimum Valid Input Value",
          "description": "Input values below this value will be ignored.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "inmax",
          "title": "Maximum Valid Input Value",
          "description": "Input values above this value will be ignored.",
          "deflt": 1
        },
        {
          "type": "color255",
          "name": "colormin",
          "title": "Output RGB color when input is min.",
          "description": "When the input value is equal to 'Minimum Valid Input Value', this is the output RGB color.",
          "deflt": "0 0 0"
        },
        {
          "type": "color255",
          "name": "colormax",
          "title": "Output RGB color when input is max.",
          "description": "When the input value is equal to 'Maximum Valid Input Value', this is the output RGB color.",
          "deflt": "255 255 255"
        }
      ],
      "inputs": [
        {
          "name": "InValue",
          "description": "Input value and fire the output with the remapped value.",
          "type": "float"
        }
      ],
      "outputs": [
        {
          "name": "OutColor",
          "description": "Fired when the InValue input is received, with the remapped RGB color as the parameter.",
          "type": "color255"
        }
      ]
    },
    {
      "name": "math_counter",
      "type": "PointClass",
      "description": "Holds a numeric value and performs arithmetic operations upon it. If either the minimum or maximum legal value is nonzero, OutValue will be clamped to the legal range, and the OnHitMin/OnHitMax outputs will be fired at the appropriate times. If both min and max are set to zero, no clamping is performed and only the OutValue output will be fired.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "EnableDisable"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/math_counter.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "startvalue",
          "title": "Initial Value",
          "description": "Starting value for the counter.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "min",
          "title": "Minimum Legal Value",
          "description": "Minimum legal value for the counter. If min=0 and max=0, no clamping is performed.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "max",
          "title": "Maximum Legal Value",
          "description": "Maximum legal value for the counter. If min=0 and max=0, no clamping is performed.",
          "deflt": 0
        }
      ],
      "inputs": [
        {
          "name": "Add",
          "description": "Add an amount to the counter and fire the OutValue output with the result.",
          "type": "integer"
        },
        {
          "name": "Divide",
          "description": "Divide the counter by an amount and fire the OutValue output with the result.",
          "type": "integer"
        },
        {
          "name": "Multiply",
          "description": "Multiply the counter by an amount and fire the OutValue output with the result.",
          "type": "integer"
        },
        {
          "name": "SetValue",
          "description": "Set the counter to a new value and fire the OutValue output with the result.",
          "type": "integer"
        },
        {
          "name": "SetValueNoFire",
          "description": "Set the counter to a new value without firing any outputs.",
          "type": "integer"
        },
        {
          "name": "Subtract",
          "description": "Subtract an amount from the counter and fire the OutValue output with the result.",
          "type": "integer"
        },
        {
          "name": "SetHitMax",
          "description": "Set the upper bound of the counter and fire the OutValue output with the current value.",
          "type": "integer"
        },
        {
          "name": "SetHitMin",
          "description": "Set the lower bound of the counter and fire the OutValue output with the current value.",
          "type": "integer"
        },
        {
          "name": "GetValue",
          "description": "Causes the counter fire its OnGetValue output with the current value of the counter. Used for polling the counter when you don't want constant updates from the OutValue output.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OutValue",
          "description": "Fired when the counter value changes.",
          "type": "integer"
        },
        {
          "name": "OnHitMin",
          "description": "Fired when the counter value meets or goes below the min value. The counter must go back above the min value before the output will fire again.",
          "type": "void"
        },
        {
          "name": "OnHitMax",
          "description": "Fired when the counter value meets or exceeds the max value. The counter must go below the max value before the output will fire again.",
          "type": "void"
        },
        {
          "name": "OnGetValue",
          "description": "Fired in response to the GetValue input. Used for polling the counter when you don't want constant updates from the OutValue output.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "logic_lineto",
      "type": "PointClass",
      "description": "An entity that calculates and outputs a vector from one entity to another.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "source",
          "title": "Start entity",
          "description": "Name of the entity the line should start from."
        },
        {
          "type": "target_destination",
          "name": "target",
          "title": "End entity",
          "description": "Name of the entity that line should end at."
        }
      ],
      "outputs": [
        {
          "name": "Line",
          "description": "Fired when the vector, from the start entity to the end entity, changes. Passes along the vector as a parameter.",
          "type": "vector"
        }
      ]
    },
    {
      "name": "logic_navigation",
      "type": "PointClass",
      "description": "An entity that is used to set navigation properties on other entities. Useful to make NPCs ignore physics props in their way that they can easily push.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Navigation Entity",
          "deflt": "Name of the entity to set navigation properties on."
        },
        {
          "type": "choices",
          "name": "navprop",
          "title": "Nav Property",
          "deflt": "Ignore",
          "choices": {
            "Ignore": "NPCs Ignore this when navigating (they'll bump into it)"
          }
        }
      ],
      "flags": [
        {
          "title": "Start On",
          "value": 1,
          "enabled": true
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Turn on. The Navigation Entity will have its navigation properties set.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turn off. The Navigation Entity will have its navigation properties returned to the default settings.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle on/off.",
          "type": "void"
        }
      ]
    },
    {
      "name": "logic_autosave",
      "type": "PointClass",
      "description": "An entity that is used to force an autosave.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "NewLevelUnit",
          "title": "Force New Level Unit",
          "description": "If set, the save will discard any savedata from previous levels, for the purpose of keeping savegame filesizes down. Can only be safely used if there is no way for the player to return to previous levels.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "integer",
          "name": "MinimumHitPoints",
          "title": "Minimum Hit Points",
          "description": "Don't save dangerous when player has less than this many hitpoints.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "MinHitPointsToCommit",
          "title": "Minimum Hit Points to Commit",
          "description": "Minimum hitpoints required to commit to save. The save will be made if you have at least Minimum Hit Points, but when the autosave timer expires, the autosave is only kept if you have at least Min Hitpoints to Commit.",
          "deflt": 0
        }
      ],
      "inputs": [
        {
          "name": "Save",
          "description": "Force an autosave.",
          "type": "void"
        },
        {
          "name": "SaveDangerous",
          "description": "Force an autosave as autosavedangerous.sav. If the player is alive after the passed number of seconds it replaces the standard auto save.",
          "type": "float"
        },
        {
          "name": "SetMinHitpointsThreshold",
          "description": "Set MinimumHitPoints to this.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "logic_active_autosave",
      "type": "PointClass",
      "description": "An entity that is used to look for opportunities to autosave.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "MinimumHitPoints",
          "title": "Initiation Hit Points",
          "description": "Start looking for an opportunity to save if player drops below this hitpoint level.",
          "deflt": 30
        },
        {
          "type": "integer",
          "name": "TriggerHitPoints",
          "title": "Trigger Hit Points",
          "description": "If started looking for an opportunity, save when hitpoints reach this level.",
          "deflt": 75
        },
        {
          "type": "float",
          "name": "TimeToTrigget",
          "title": "Time to trigger",
          "description": "If > 0, how long to try and get a save off before giving up",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "DangerousTime",
          "title": "Dangerous time",
          "description": "If 0, just autosave. Otherwise, do an autosavedangerous with this time threshold",
          "deflt": 10
        }
      ],
      "inputs": [
        {
          "name": "Enable",
          "description": "Enable the entity",
          "type": "void"
        },
        {
          "name": "Disable",
          "description": "Enable the entity",
          "type": "void"
        }
      ]
    },
    {
      "name": "point_template",
      "type": "PointClass",
      "description": "Turns an entity, or set of entities, into a single template that can be instanced anywhere, and multiple times. If there are interdependencies (entity I/O, hierarchy, or other name references) between the entities in the template, the entities in the template will have their names changed and the interdependencies will be reconnected to the changes names. The name change format is as follows: '<original name>&0000', where the 0000 will be replaced with the current global template instance, so wildcard searches for '<original name>*' will still find them.\\nIf you don't want the name fixup to happen, because you're only spawning the template once, or you want inputs to trigger all instances of the template, check the 'Preserve entity names' spawnflag. \\nTo spawn the template in other places, use an env_entity_maker.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/point_template.vmt"
          ]
        }
      ],
      "flags": [
        {
          "title": "Don't remove template entities",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Preserve entity names (Don't do name fixup)",
          "value": 2,
          "enabled": true
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "Template01",
          "title": "Template 1"
        },
        {
          "type": "target_destination",
          "name": "Template02",
          "title": "Template 2"
        },
        {
          "type": "target_destination",
          "name": "Template03",
          "title": "Template 3"
        },
        {
          "type": "target_destination",
          "name": "Template04",
          "title": "Template 4"
        },
        {
          "type": "target_destination",
          "name": "Template05",
          "title": "Template 5"
        },
        {
          "type": "target_destination",
          "name": "Template06",
          "title": "Template 6"
        },
        {
          "type": "target_destination",
          "name": "Template07",
          "title": "Template 7"
        },
        {
          "type": "target_destination",
          "name": "Template08",
          "title": "Template 8"
        },
        {
          "type": "target_destination",
          "name": "Template09",
          "title": "Template 9"
        },
        {
          "type": "target_destination",
          "name": "Template10",
          "title": "Template 10"
        },
        {
          "type": "target_destination",
          "name": "Template11",
          "title": "Template 11"
        },
        {
          "type": "target_destination",
          "name": "Template12",
          "title": "Template 12"
        },
        {
          "type": "target_destination",
          "name": "Template13",
          "title": "Template 13"
        },
        {
          "type": "target_destination",
          "name": "Template14",
          "title": "Template 14"
        },
        {
          "type": "target_destination",
          "name": "Template15",
          "title": "Template 15"
        },
        {
          "type": "target_destination",
          "name": "Template16",
          "title": "Template 16"
        }
      ],
      "inputs": [
        {
          "name": "ForceSpawn",
          "description": "Spawn an instance of the template at the original position.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnEntitySpawned",
          "description": "Fired after spawning an instance of this template.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_entity_maker",
      "type": "PointClass",
      "description": "Spawns the specified entity template at its origin. If set to auto-spawn, it will spawn the template whenever there's room and the player is looking elsewhere.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        }
      ],
      "flags": [
        {
          "title": "Enable AutoSpawn (will spawn whenever there's room)",
          "value": 1,
          "enabled": false
        },
        {
          "title": "AutoSpawn: Wait for entity destruction",
          "value": 2,
          "enabled": false
        },
        {
          "title": "AutoSpawn: Even if the player is looking",
          "value": 4,
          "enabled": false
        },
        {
          "title": "ForceSpawn: Only if there's room",
          "value": 8,
          "enabled": false
        },
        {
          "title": "ForceSpawn: Only if the player isn't looking",
          "value": 16,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "EntityTemplate",
          "title": "Point_template To Spawn",
          "description": "Name of the point_template to spawn here.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "PostSpawnSpeed",
          "title": "PostSpawn Movement Speed",
          "description": "If specified, all the entities created in the template will move this fast in the specified PostSpawn Movement Direction.",
          "deflt": "0"
        },
        {
          "type": "angle",
          "name": "PostSpawnDirection",
          "title": "PostSpawn Movement Direction",
          "description": "If a PostSpawn Movement Speed is specified, all the entities created in the template will move in this direction.",
          "deflt": "0 0 0"
        },
        {
          "type": "float",
          "name": "PostSpawnDirectionVariance",
          "title": "PostSpawn Direction Variance",
          "description": "This variance is applied to the PostSpawn Movement Direction for each spawned entity in the template. Use it to apply some randomness to the directions.",
          "deflt": "0.15"
        },
        {
          "type": "choices",
          "name": "PostSpawnInheritAngles",
          "title": "PostSpawn Inherit Angles",
          "description": "If in hierarchy, is spawn direction in world space, or object local space of parent",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "ForceSpawn",
          "description": "Spawn an instance of the template at this origin and angle.",
          "type": "void"
        },
        {
          "name": "ForceSpawnAtEntityOrigin",
          "description": "Spawn an instance of the template that the same origin and angle as the specified entity (specify by targetname in parameters)",
          "type": "target_destination"
        }
      ],
      "outputs": [
        {
          "name": "OnEntitySpawned",
          "description": "Fired when an instance of the entity template has been spawned.",
          "type": "void"
        },
        {
          "name": "OnEntityFailedSpawn",
          "description": "Fired when a ForceSpawn input failed to spawn the template, either due to lack of space or being in player's view, depending on the spawnflags.",
          "type": "void"
        }
      ]
    },
    {
      "name": "BaseFilter",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "Negated",
          "title": "Filter mode",
          "description": "If set to Allow, only entities who match the criteria will pass the filter. If set to Disallow, only entities who do NOT match the criteria will pass the filter.",
          "deflt": "Allow entities that match criteria",
          "choices": {
            "0": "Allow entities that match criteria",
            "1": "Disallow entities that match criteria"
          }
        }
      ],
      "inputs": [
        {
          "name": "TestActivator",
          "description": "Test the activator against the filter and fires OnPass or OnFail output.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnPass",
          "description": "Fired in response to TestActivator input if the activator passes the filter.",
          "type": "void"
        },
        {
          "name": "OnFail",
          "description": "Fired in response to TestActivator input if the activator fails to pass the filter.",
          "type": "void"
        }
      ]
    },
    {
      "name": "filter_multi",
      "type": "FilterClass",
      "description": "A filter that tests the activator against multiple filters. This allows you to build more complex filters, such as'Allow anyone on Team 1 who is also class engineer', or 'Allow everyone except classes npc_zombie and npc_headcrab'.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BaseFilter"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/filter_multiple.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "filtertype",
          "title": "Logic Type",
          "deflt": 0,
          "choices": {
            "0": "AND (all filters must pass)",
            "1": "OR (any filter must pass)"
          }
        },
        {
          "type": "choices",
          "name": "Negated",
          "title": "Negate Outcome",
          "description": "Whether to negate the result of the subfilters, after combining them using the Logic Type chosen.\\nNegating the outcome using the AND logic type means that any subfilter must fail for this filter to pass.\\nNegating the outcome using the OR logic type means that all subfilters must fail for this filter to pass.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "filterclass",
          "name": "Filter01",
          "title": "Filter 1",
          "description": "Activator filter to test."
        },
        {
          "type": "filterclass",
          "name": "Filter02",
          "title": "Filter 2",
          "description": "Activator filter to test."
        },
        {
          "type": "filterclass",
          "name": "Filter03",
          "title": "Filter 3",
          "description": "Activator filter to test."
        },
        {
          "type": "filterclass",
          "name": "Filter04",
          "title": "Filter 4",
          "description": "Activator filter to test."
        },
        {
          "type": "filterclass",
          "name": "Filter05",
          "title": "Filter 5",
          "description": "Activator filter to test."
        }
      ]
    },
    {
      "name": "filter_activator_name",
      "type": "FilterClass",
      "description": "A filter that filters by the name of the activator.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BaseFilter"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/filter_name.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "filtername",
          "title": "Filter Name",
          "description": "The name to filter by. If the filter mode is Allow, only entities whose name matches the given string will pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose name matches the string will pass the filter."
        }
      ]
    },
    {
      "name": "filter_activator_class",
      "type": "FilterClass",
      "description": "A filter that filters by the class name of the activator.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BaseFilter"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/filter_class.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "filterclass",
          "title": "Filter Classname",
          "description": "The class name to filter by. If the filter mode is Allow, only entities whose class name matches the given string will pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose class name matches the given string will pass the filter."
        }
      ]
    },
    {
      "name": "filter_activator_mass_greater",
      "type": "FilterClass",
      "description": "A filter that filters by the mass of the activator.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BaseFilter"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/filter_class.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "filtermass",
          "title": "Filter Mass",
          "description": "The mass to filter by. If the filter mode is Allow, only entities whose mass is greater than the give float will pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose mass is greater than the given float will pass the filter."
        }
      ]
    },
    {
      "name": "filter_damage_type",
      "type": "FilterClass",
      "description": "A damage filter that filters by the type of damage inflicted. This can only be used as a damage filter, not as an activator filter.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BaseFilter"
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "damagetype",
          "title": "Damage type",
          "description": "The damage type to filter by. If the filter mode is Allow, only damage types that match will pass the filter. If the filter mode is Disallow, all damage types EXCEPT those who match will pass the filter.",
          "deflt": 64,
          "choices": {
            "0": "GENERIC",
            "1": "CRUSH",
            "2": "BULLET",
            "4": "SLASH",
            "8": "BURN",
            "16": "FREEZE",
            "32": "FALL",
            "64": "BLAST",
            "128": "CLUB",
            "256": "SHOCK",
            "512": "SONIC",
            "1024": "ENERGYBEAM",
            "16384": "DROWN",
            "32768": "PARALYSE",
            "65536": "NERVEGAS",
            "131072": "POISON",
            "262144": "RADIATION",
            "524288": "DROWNRECOVER",
            "1048576": "CHEMICAL",
            "2097152": "SLOWBURN",
            "4194304": "SLOWFREEZE"
          }
        }
      ]
    },
    {
      "name": "filter_enemy",
      "type": "FilterClass",
      "description": "A filter that filters a potential enemy entity by a set of criteria.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BaseFilter"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/filter_class.vmt"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "filter_radius"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "filter_outer_radius"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "filtername",
          "title": "Name/Classname",
          "description": "The classname or entity name to filter by. If the filter mode is Allow, only entities whose class name matches the given string will pass the filter. If the filter mode is Disallow, all entities EXCEPT those whose class name matches the given string will pass the filter."
        },
        {
          "type": "float",
          "name": "filter_radius",
          "title": "Radius",
          "description": "Radius by which to test the proximity of the enemy.  If the filter mode is Allow, only entities whose distance is equal to or closer than the radius will pass the filter. If the filter mode is Disallow, all entities outside the radius will pass the filter.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "filter_outer_radius",
          "title": "Outer Radius",
          "description": "Enemies outside this radius are considered invalid if Allow is set and valid if Disallow is set.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "filter_max_per_enemy",
          "title": "Max Squadmates Per Enemy",
          "description": "Maximum number of squadmates allowed to target any given entity.",
          "deflt": 0
        }
      ],
      "flags": [
        {
          "title": "Do not lose target if already aquired but filter failed.",
          "value": 1,
          "enabled": false
        }
      ]
    },
    {
      "name": "point_anglesensor",
      "type": "PointClass",
      "description": "An entity that detects if another entity points in a given direction for a period of time.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "EnableDisable"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Target Entity Name",
          "description": "Name of the entity whose angles will be sensed."
        },
        {
          "type": "target_destination",
          "name": "lookatname",
          "title": "Look At Entity",
          "description": "The entity we want to check to see if the Target Entity is looking at."
        },
        {
          "type": "float",
          "name": "duration",
          "title": "Duration",
          "description": "The amount of time the Target Entity must look at the 'Look at Entity' to trigger this entity, in seconds."
        },
        {
          "type": "integer",
          "name": "tolerance",
          "title": "Tolerance",
          "description": "The tolerance, in degrees, in the checking to determine when the Target Entity is looking at the Look At Entity."
        }
      ],
      "flags": [
        {
          "title": "Use target entity's angles (NOT position)",
          "value": 1,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Toggle",
          "description": "Toggle the sensor between enabled and disabled.",
          "type": "void"
        },
        {
          "name": "Test",
          "description": "Check to see if the Target Entity is facing the Look At Entity within the specified tolerance, firing either the OnFacingLookat or OnNotFacingLookat output based on the result.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "TargetDir",
          "description": "Fired when the forward direction of the Target Entity changes. Passes the new forward direction as a parameter.",
          "type": "vector"
        },
        {
          "name": "OnFacingLookat",
          "description": "Fired when the Target Entity points at the Look At Entity for more than the specified Duration, or in response to a Test input.",
          "type": "void"
        },
        {
          "name": "OnNotFacingLookat",
          "description": "Fires in response to a Test input when the Target Entity is not pointing at the Look At Entity.",
          "type": "void"
        },
        {
          "name": "FacingPercentage",
          "description": "Normalized value (0..1) where 1 is facing directly at target and 0 is at or beyond the angle of tolerance.",
          "type": "float"
        }
      ]
    },
    {
      "name": "point_angularvelocitysensor",
      "type": "PointClass",
      "description": "An entity that detects if another entity's angular velocity meets or exceeds a threshold value.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Target Entity Name",
          "description": "Name of the entity whose angular velocity will be sensed."
        },
        {
          "type": "float",
          "name": "threshold",
          "title": "Threshold Velocity",
          "description": "The threshold angular velocity to compare against, in degrees per second.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "fireinterval",
          "title": "Fire Interval",
          "description": "Angular velocity must cross the threshold for at least this long to fire.",
          "deflt": "0.2"
        },
        {
          "type": "vecline",
          "name": "axis",
          "title": "Axis"
        },
        {
          "type": "choices",
          "name": "usehelper",
          "title": "Use Axis Helper",
          "description": "Use axis helper to determine rotation values (clockwise/counter-clockwise).",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "Test",
          "description": "Checks to see if the Target Entity's angular velocity meets or exceeds the Threshold Velocity, firing either the OnGreaterThanOrEqualTo or OnLessThan output based on the result.",
          "type": "void"
        },
        {
          "name": "TestWithInterval",
          "description": "Checks to see if the Target Entity's angular velocity meets or exceeds the Threshold Velocity. Once the Fire Interval expires, fires the appropriate test result output if the result is stable throughout the Fire Interval.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "AngularVelocity",
          "description": "Fired when the Target's Angular Velocity changes, passing the new magnitude of the angular velocity.",
          "type": "float"
        },
        {
          "name": "OnGreaterThan",
          "description": "Fired when the Target Entity goes from slower than the threshold angular velocity to faster than the threshold angular velocity.",
          "type": "void"
        },
        {
          "name": "OnGreaterThanOrEqualTo",
          "description": "Fired when the Target Entity goes from slower than the threshold angular velocity to faster than the threshold angular velocity.",
          "type": "void"
        },
        {
          "name": "OnLessThan",
          "description": "Fired when the Target Entity goes from faster than the threshold angular velocity to slower than the threshold angular velocity.",
          "type": "void"
        },
        {
          "name": "OnLessThanOrEqualTo",
          "description": "Fired when the Target Entity goes from faster than the threshold angular velocity to slower than the threshold angular velocity.",
          "type": "void"
        },
        {
          "name": "OnEqualTo",
          "description": "Fired when the Target Entity reaches the threshold angular velocity from a different velocity.",
          "type": "void"
        }
      ]
    },
    {
      "name": "point_velocitysensor",
      "type": "PointClass",
      "description": "An entity that detects and outputs an entity's velocity.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Target Entity Name",
          "description": "Name of the entity whose velocity will be sensed."
        },
        {
          "type": "vecline",
          "name": "axis",
          "title": "Measurement Axis"
        },
        {
          "type": "choices",
          "name": "enabled",
          "title": "Start Enabled",
          "description": "Whether or not to start enabled and active.",
          "deflt": 1,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "outputs": [
        {
          "name": "Velocity",
          "description": "Fired when the Target's Velocity changes, passing the new magnitude of the velocity.",
          "type": "float"
        }
      ],
      "inputs": [
        {
          "name": "Enable",
          "description": "Enable the sensor.",
          "type": "void"
        },
        {
          "name": "Disable",
          "description": "Disable the sensor.",
          "type": "void"
        }
      ]
    },
    {
      "name": "point_proximity_sensor",
      "type": "PointClass",
      "description": "An entity that detects another entity's proximity to a target position.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "EnableDisable",
            "Angles"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Target Entity Name",
          "description": "Name of the entity whose angles will be sensed."
        }
      ],
      "flags": [
        {
          "title": "Test the distance as measured along the axis specified by our direction.",
          "value": 1,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Toggle",
          "description": "Toggle the sensor between enabled and disabled.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "Distance",
          "description": "Distance of the target entity away from this entity.",
          "type": "float"
        }
      ]
    },
    {
      "name": "point_teleport",
      "type": "PointClass",
      "description": "An entity that teleports a target entity to this position and angles. If 'Teleport Home' spawn flag is set, teleports the target entity to its spawn position instead.If object is physically simulated, simulation is turned off when teleported.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Entity To Teleport",
          "description": "Name of the entity that will be teleported."
        }
      ],
      "flags": [
        {
          "title": "Teleport Home",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Into Duck (episodic)",
          "value": 2,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Teleport",
          "description": "Teleport the target entity.",
          "type": "void"
        },
        {
          "name": "TeleportToCurrentPos",
          "description": "Teleport the target entity to wherever the point_teleport entity is currently. The Teleport input teleports to the initial position of the point_teleport, so this input was added to avoid breaking old content.",
          "type": "void"
        },
        {
          "name": "TeleportEntity",
          "description": "Teleport the entity specified by the parameter override. Use this to teleport an entity other than the one specified in the Entity To Teleport field.",
          "type": "target_destination"
        }
      ]
    },
    {
      "name": "point_hurt",
      "type": "PointClass",
      "description": "An entity that does damage to all entities in a radius around itself, with a specified delay.If 'Target Entity' is specified, the damage is only done to that entity.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "DamageRadius"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "DamageTarget",
          "title": "Target Entity",
          "description": "If specified, only this entity will take damage. Otherwise, all entities within the Radius will take damage.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "DamageRadius",
          "title": "Radius",
          "description": "All entities within this radius of this entity will take damage. If a 'Target Entity' is specified, only that entity will take damage.",
          "deflt": 256
        },
        {
          "type": "integer",
          "name": "Damage",
          "title": "Damage",
          "description": "Damage done to all affected entities each time this entity fires.",
          "deflt": 5
        },
        {
          "type": "float",
          "name": "DamageDelay",
          "title": "Delay",
          "description": "Delay between refires, in seconds.",
          "deflt": 1
        },
        {
          "type": "choices",
          "name": "DamageType",
          "title": "Damage Type",
          "description": "Type of damage to inflict on entities damaged.",
          "deflt": 0,
          "choices": {
            "0": "GENERIC",
            "1": "CRUSH",
            "2": "BULLET",
            "4": "SLASH",
            "8": "BURN",
            "16": "FREEZE",
            "32": "FALL",
            "64": "BLAST",
            "128": "CLUB",
            "256": "SHOCK",
            "512": "SONIC",
            "1024": "ENERGYBEAM",
            "16384": "DROWN",
            "32768": "PARALYSE",
            "65536": "NERVEGAS",
            "131072": "POISON",
            "262144": "RADIATION",
            "524288": "DROWNRECOVER",
            "1048576": "CHEMICAL",
            "2097152": "SLOWBURN",
            "4194304": "SLOWFREEZE"
          }
        }
      ],
      "inputs": [
        {
          "name": "Hurt",
          "description": "Force a single fire, damaging either the Target Entity or all entities within the radius.",
          "type": "void"
        },
        {
          "name": "TurnOn",
          "description": "Enable this entity. It will start damaging entities everytime it fires, and refire based upon the specified Delay.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Disable this entity. It will stop damaging entities.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle this entity between On/Off state.",
          "type": "void"
        }
      ]
    },
    {
      "name": "point_playermoveconstraint",
      "type": "PointClass",
      "description": "An entity that constrains players to a radius around itself, slowing them down the closer they get to the edge of the radius.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "radius",
          "title": "Radius",
          "description": "Radius to constrain players to.",
          "deflt": 256
        },
        {
          "type": "float",
          "name": "width",
          "title": "Constraint Width",
          "description": "Width of the constraint edge. This is the distance in which to start slowing players down as they approach the edge of the radius.",
          "deflt": "75.0"
        },
        {
          "type": "float",
          "name": "speedfactor",
          "title": "Speed Factor",
          "description": "Factor applied to the player's max speed as they approach the radius edge.",
          "deflt": "0.15"
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Start constraining any players within the radius.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Stop constraining any players previously constrained.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnConstraintBroken",
          "description": "Fired when a player breaks through the constraint.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_physbox",
      "type": "SolidClass",
      "description": "A brush entity that's physically simulated.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BreakableBrush",
            "Targetname",
            "Origin",
            "RenderFields",
            "Shadow"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        },
        {
          "type": "choices",
          "name": "Damagetype",
          "title": "Impact Damage Type",
          "deflt": 0,
          "choices": {
            "0": "Blunt",
            "1": "Sharp"
          }
        },
        {
          "type": "float",
          "name": "massScale",
          "title": "Mass Scale",
          "description": "A scale multiplier for the object's mass.",
          "deflt": "0"
        },
        {
          "type": "string",
          "name": "overridescript",
          "title": "Override Parameters",
          "description": "A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.",
          "deflt": ""
        },
        {
          "type": "integer",
          "name": "damagetoenablemotion",
          "title": "Health Level to Override Motion",
          "description": "If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "forcetoenablemotion",
          "title": "Physics Impact Force to Override Motion",
          "description": "If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "health",
          "title": "Strength",
          "description": "Number of points of damage to take before breaking.  0 means don't break.",
          "deflt": 0
        },
        {
          "type": "vector",
          "name": "preferredcarryangles",
          "title": "Preferred Player-carry Angles",
          "description": "If the 'Use Preferred Carry Angles' spawnflag is set, this angle is the angle which the object should orient to when the player picks it up, with the Gravity Gun or +USE.",
          "deflt": "0 0 0"
        },
        {
          "type": "choices",
          "name": "notsolid",
          "title": "Not solid to world",
          "deflt": 0,
          "choices": {
            "0": "Solid to World",
            "1": "Passes through World"
          }
        }
      ],
      "flags": [
        {
          "title": "Start Asleep",
          "value": 4096,
          "enabled": false
        },
        {
          "title": "Ignore +USE for Pickup",
          "value": 8192,
          "enabled": false
        },
        {
          "title": "Debris - Don't collide with the player or other debris",
          "value": 16384,
          "enabled": false
        },
        {
          "title": "Motion Disabled",
          "value": 32768,
          "enabled": false
        },
        {
          "title": "Use Preferred Carry Angles",
          "value": 65536,
          "enabled": false
        },
        {
          "title": "Enable motion on Gravity Gun grab",
          "value": 131072,
          "enabled": false
        },
        {
          "title": "Not affected by rotor wash",
          "value": 262144,
          "enabled": false
        },
        {
          "title": "Generate output on +USE ",
          "value": 524288,
          "enabled": true
        },
        {
          "title": "Gravity Gun can ALWAYS pick up. No matter what.",
          "value": 1048576,
          "enabled": false
        },
        {
          "title": "Gravity Gun is NOT allowed to pick this up.",
          "value": 2097152,
          "enabled": false
        },
        {
          "title": "Gravity Gun is NOT allowed to punt this object.",
          "value": 4194304,
          "enabled": false
        },
        {
          "title": "Prevent motion enable on player bump",
          "value": 8388608,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Wake",
          "description": "Wake up this physics object, if it is sleeping.",
          "type": "void"
        },
        {
          "name": "Sleep",
          "description": "Put this physics object to sleep. It will wake if given the Wake input, or if force is applied to it. Note that physics objects go to sleep automatically after coming to rest for a while, so you don't really need to use this.",
          "type": "void"
        },
        {
          "name": "EnableMotion",
          "description": "Enable physics motion/collision response.",
          "type": "void"
        },
        {
          "name": "DisableMotion",
          "description": "Disable physics motion/collision response.",
          "type": "void"
        },
        {
          "name": "ForceDrop",
          "description": "If this object is being carried by a player, with the Gravity Gun or +USE, force it to be dropped.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnDamaged",
          "description": "Fired when this entity is damaged.",
          "type": "void"
        },
        {
          "name": "OnAwakened",
          "description": "Fired when this entity becomes awake (collision/force is applied).",
          "type": "void"
        },
        {
          "name": "OnMotionEnabled",
          "description": "Fired when motion is enabled due to damage/Gravity Gun/force.",
          "type": "void"
        },
        {
          "name": "OnPhysGunPickup",
          "description": "Fired when a player picks this object up, either with the Gravity Gun or +USE.",
          "type": "void"
        },
        {
          "name": "OnPhysGunPunt",
          "description": "Fired when a player punts this object with the Gravity Gun.",
          "type": "void"
        },
        {
          "name": "OnPhysGunOnlyPickup",
          "description": "Fired when a player picks this object up WITH THE GRAVITY GUN. +USE pickups do not fire this output.",
          "type": "void"
        },
        {
          "name": "OnPhysGunDrop",
          "description": "Fired when a player drops this object.",
          "type": "void"
        },
        {
          "name": "OnPlayerUse",
          "description": "Fired when the player tries to +USE the physbox. This output will fire only if the Generate output on +USE spawnflag is set.",
          "type": "void"
        }
      ]
    },
    {
      "name": "TwoObjectPhysics",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "flags": [
        {
          "title": "No Collision until break",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Start inactive",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Change mass to keep stable attachment to world",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Do not connect entities until turned on",
          "value": 16,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "attach1",
          "title": "Entity 1",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "attach2",
          "title": "Entity 2",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "constraintsystem",
          "title": "Constraint System Manager",
          "description": "The name of a phys_constraintsystem that this constraint should be a part of. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "forcelimit",
          "title": "Force Limit to Break (lbs)",
          "description": "The amount of force an impact must apply to the constraint to break it. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the constrainted objects.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "torquelimit",
          "title": "Torque Limit to Break (lbs * distance)",
          "description": "The amount of torque required to break the constraint. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint.",
          "deflt": "0"
        },
        {
          "type": "sound",
          "name": "breaksound",
          "title": "Play Sound on Break",
          "description": "A sound played when the constraint is broken.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "teleportfollowdistance",
          "title": "Follow teleport distance",
          "description": "If one object teleports more than this many units away it will cause the other constrained object to teleport to an appropriate relative position.",
          "deflt": "0"
        }
      ],
      "inputs": [
        {
          "name": "Break",
          "description": "Force the constraint to break.",
          "type": "void"
        },
        {
          "name": "TurnOn",
          "description": "Enable the constraint.  Do this when the objects don't exist when the constraint spawns - or when you have deactivated the constraint.  Broken constraints can NOT be turned on.  They have been deleted.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Disable this constraint.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnBreak",
          "description": "Fired when the constraint breaks.",
          "type": "void"
        }
      ]
    },
    {
      "name": "phys_constraintsystem",
      "type": "PointClass",
      "description": "An entity used to manage a group of interacting constraints and keep them stable. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "additionaliterations",
          "title": "Additional System Iterations",
          "description": "Adding iterations makes the interactions among constraints in a system tighter.  It will not compensate for errors due to collision, but will help in cases where objects of disparate mass are constrained to each other.",
          "deflt": 0
        }
      ]
    },
    {
      "name": "phys_keepupright",
      "type": "PointClass",
      "description": "A controller that tries to keep an entity facing a particular direction.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles"
          ]
        }
      ],
      "flags": [
        {
          "title": "Start inactive",
          "value": 1,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "attach1",
          "title": "Target Entity",
          "description": "The entity to align to the desired angles.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "angularlimit",
          "title": "Angular Limit",
          "description": "The maximum angular velocity that this controller can compensate for, in degrees per second.",
          "deflt": "15"
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Enable the controller.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Disable the controller.",
          "type": "void"
        }
      ]
    },
    {
      "name": "physics_cannister",
      "type": "PointClass",
      "description": "A physically simulated gas cannister that can have its cap shot off, at which point gas will start escaping and cause the cannister to fly around. If it takes enough damage, it will explode.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Angles"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "expradius"
          ]
        },
        {
          "name": "studioprop",
          "values": []
        }
      ],
      "properties": [
        {
          "type": "studio",
          "name": "model",
          "title": "World model",
          "deflt": "models/fire_equipment/w_weldtank.mdl"
        },
        {
          "type": "string",
          "name": "expdamage",
          "title": "Explosion Damage",
          "description": "The amount of damage done by the explosion created when the cannister blows up.",
          "deflt": "200.0"
        },
        {
          "type": "string",
          "name": "expradius",
          "title": "Explosion Radius",
          "description": "The radius of the explosion to create when the cannister blows up.",
          "deflt": "250.0"
        },
        {
          "type": "integer",
          "name": "health",
          "title": "Health",
          "description": "The amount of damage the cannister takes before exploding.",
          "deflt": 25
        },
        {
          "type": "string",
          "name": "thrust",
          "title": "Thrust",
          "description": "When the cap has been blown off, and the escaping gas is thrusting the cannister about, this is the amount of thrust generated.",
          "deflt": "3000.0"
        },
        {
          "type": "string",
          "name": "fuel",
          "title": "Fuel Seconds",
          "description": "The amount of time that gas leaks from the cannister before being considered empty.",
          "deflt": "12.0"
        },
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "Smoke Color (R G B)",
          "deflt": "255 255 255"
        },
        {
          "type": "integer",
          "name": "renderamt",
          "title": "Smoke Alpha (0 - 255)",
          "deflt": 128
        },
        {
          "type": "sound",
          "name": "gassound",
          "title": "Thruster Sound",
          "description": "The sound played when the gas is escaping from the cannister.",
          "deflt": "ambient/objects/cannister_loop.wav"
        }
      ],
      "flags": [
        {
          "title": "Start Asleep",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Explodes",
          "value": 2,
          "enabled": true
        }
      ],
      "inputs": [
        {
          "name": "Activate",
          "description": "Start gas escaping from the cannister.",
          "type": "string"
        },
        {
          "name": "Deactivate",
          "description": "Stop gas escaping from the cannister.",
          "type": "string"
        },
        {
          "name": "Explode",
          "description": "Force the cannister to explode.",
          "type": "string"
        },
        {
          "name": "Wake",
          "description": "Wakes up the cannister, if it is sleeping.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnActivate",
          "description": "Fired when gas starts to escape from the cannister.",
          "type": "void"
        },
        {
          "name": "OnAwakened",
          "description": "Fired when this entity becomes awake (collision/force is applied).",
          "type": "void"
        }
      ]
    },
    {
      "name": "info_constraint_anchor",
      "type": "PointClass",
      "description": "An entity used to attach constraints to a local position on an entity. Usually constraints will attach to the center of mass of an object. Attach the desired constraint to this entity, and then parent this entity to the entity you want the constraint to apply to.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        },
        {
          "name": "size",
          "values": [
            -4,
            -4,
            -4,
            4,
            4,
            4
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "massScale",
          "title": "Amount to scale the mass of this body in the constraint solver",
          "deflt": "1"
        }
      ]
    },
    {
      "name": "info_mass_center",
      "type": "PointClass",
      "description": "An entity that overrides the mass center of the target physics prop, or func_physbox, by moving it to the info_mass_center's location.",
      "parameters": [
        {
          "name": "size",
          "values": [
            -4,
            -4,
            -4,
            4,
            4,
            4
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Target object",
          "description": "The entity whose mass center will be overridden.",
          "deflt": ""
        }
      ]
    },
    {
      "name": "phys_spring",
      "type": "PointClass",
      "description": "A physically simulated spring. 'Length' is what's known as the 'natural spring length'. This is how long the spring would be if it was at rest (nothing hanging on it or attached). When you attach something to the spring, it will stretch longer than its 'natural length'. The amount of stretch is determined by the 'Sprint Constant'. The larger the spring constant the less stretch the spring.",
      "parameters": [
        {
          "name": "halfgridsnap",
          "values": []
        },
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "flags": [
        {
          "title": "Force only on stretch",
          "value": 1,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "attach1",
          "title": "Entity 1",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "attach2",
          "title": "Entity 2",
          "deflt": ""
        },
        {
          "type": "vecline",
          "name": "springaxis",
          "title": "Spring Axis",
          "description": "Use the helper. Drag it out to match the virtual spring.",
          "deflt": ""
        },
        {
          "type": "string",
          "name": "length",
          "title": "Spring Length",
          "description": "How long the spring would be if it was at rest (nothing hanging on it or attached). 0 means the length of the brush.",
          "deflt": "0"
        },
        {
          "type": "string",
          "name": "constant",
          "title": "Spring Constant",
          "description": "Stiffness of the spring.  The larger the number the less the spring will stretch.",
          "deflt": "50"
        },
        {
          "type": "string",
          "name": "damping",
          "title": "Damping Constant",
          "description": "How much energy the spring loses.  The larger the number, the less bouncy the spring.",
          "deflt": "2.0"
        },
        {
          "type": "string",
          "name": "relativedamping",
          "title": "Relative Damping Constant",
          "description": "The amount of energy the spring loses proportional to the relative velocity of the two objects the spring is attached to.",
          "deflt": "0.1"
        },
        {
          "type": "string",
          "name": "breaklength",
          "title": "Break on Length",
          "description": "If the spring's length ever exceeds this length, the spring breaks.",
          "deflt": "0"
        }
      ],
      "inputs": [
        {
          "name": "SetSpringConstant",
          "description": "Set the Spring Constant.",
          "type": "float"
        },
        {
          "name": "SetSpringLength",
          "description": "Set the Spring Length.",
          "type": "float"
        },
        {
          "name": "SetSpringDamping",
          "description": "Set the Spring Damping.",
          "type": "float"
        }
      ]
    },
    {
      "name": "phys_hinge",
      "type": "PointClass",
      "description": "A physically simulated hinge. Use the helper to define the axis of rotation.",
      "parameters": [
        {
          "name": "halfgridsnap",
          "values": []
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        },
        {
          "name": "base",
          "values": [
            "TwoObjectPhysics"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "hingefriction",
          "title": "Friction",
          "description": "Resistance/friction in the hinge",
          "deflt": "0"
        },
        {
          "type": "vecline",
          "name": "hingeaxis",
          "title": "Hinge Axis"
        },
        {
          "type": "float",
          "name": "SystemLoadScale",
          "title": "Load Scale",
          "description": "Scale of the load connected to this hinge (1=just the objects directly connected)",
          "deflt": "1"
        },
        {
          "type": "float",
          "name": "minSoundThreshold",
          "title": "Minimum Sound Velocity",
          "description": "When travelling below this many units/sec, will not play any sound.",
          "deflt": "6"
        },
        {
          "type": "float",
          "name": "maxSoundThreshold",
          "title": "Full Sound Velocity",
          "description": "When travelling at this speed or above, will play sound at full volume.",
          "deflt": "80"
        },
        {
          "type": "sound",
          "name": "slidesoundfwd",
          "title": "Travel sound (forward)",
          "description": "Play this sound when travelling forward on helper axis",
          "deflt": ""
        },
        {
          "type": "sound",
          "name": "slidesoundback",
          "title": "Travel sound (backward)",
          "description": "Play this sound when travelling backward on helper axis",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "reversalsoundthresholdSmall",
          "title": "Reversal sound threshold (small)",
          "description": "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the small reversal sound.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "reversalsoundthresholdMedium",
          "title": "Reversal sound threshold (medium)",
          "description": "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the medium reversal sound.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "reversalsoundthresholdLarge",
          "title": "Reversal sound threshold (large)",
          "description": "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the large reversal sound.",
          "deflt": "0"
        },
        {
          "type": "sound",
          "name": "reversalsoundSmall",
          "title": "Reversal sound (small)",
          "description": "Play this sound when making a hard reverse over the small threshold but less than medium",
          "deflt": ""
        },
        {
          "type": "sound",
          "name": "reversalsoundMedium",
          "title": "Reversal sound (medium)",
          "description": "Play this sound when making a hard reverse over the medium threshold but less than large",
          "deflt": ""
        },
        {
          "type": "sound",
          "name": "reversalsoundLarge",
          "title": "Reversal sound (large)",
          "description": "Play this sound when making a hard reverse over the large threshold",
          "deflt": ""
        }
      ],
      "inputs": [
        {
          "name": "SetAngularVelocity",
          "description": "Set angular velocity around the hinge (motor) in deg/sec",
          "type": "float"
        }
      ]
    },
    {
      "name": "phys_ballsocket",
      "type": "PointClass",
      "description": "A constraint that keeps the position of two objects fixed, relative to the constraint's origin. It does not affect rotation.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "TwoObjectPhysics"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/phys_ballsocket.vmt"
          ]
        }
      ],
      "flags": []
    },
    {
      "name": "phys_constraint",
      "type": "PointClass",
      "description": "A constraint that keeps the relative position and orientation of two objects fixed.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "TwoObjectPhysics"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/axis_helper.mdl"
          ]
        }
      ]
    },
    {
      "name": "phys_pulleyconstraint",
      "type": "PointClass",
      "description": "A constraint that is essentially two length constraints and two points. Imagine it as a virtual rope connected to two objects, each suspended from a pulley above them.The constraint keeps the sum of the distances between the pulley points and their suspended objects constant.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "TwoObjectPhysics"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/axis_helper.mdl"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "addlength",
          "title": "Additional Length",
          "description": "Add (or subtract) this amount to the rest length of the pulley rope.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "gearratio",
          "title": "Pulley Gear Ratio",
          "description": "Add (or subtract) this amount to the rest length of the pulley rope.",
          "deflt": "1"
        },
        {
          "type": "vecline",
          "name": "position2",
          "title": "Pulley Position 2",
          "description": "The position of the pulley for Entity 2. The pulley for Entity 1 is the origin of this constraint entity. Entity 1 is always suspended from pulley point 1, and Entity 2 is always suspended from pulley point 2."
        }
      ],
      "flags": [
        {
          "title": "No Collision until break",
          "value": 1,
          "enabled": true
        },
        {
          "title": "Keep Rigid",
          "value": 2,
          "enabled": false
        }
      ]
    },
    {
      "name": "phys_slideconstraint",
      "type": "PointClass",
      "description": "A constraint that constrains an entity along a line segment.",
      "parameters": [
        {
          "name": "halfgridsnap",
          "values": []
        },
        {
          "name": "base",
          "values": [
            "TwoObjectPhysics"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/axis_helper.mdl"
          ]
        }
      ],
      "flags": [
        {
          "title": "No Collision until break",
          "value": 1,
          "enabled": true
        },
        {
          "title": "Limit Endpoints",
          "value": 2,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "vecline",
          "name": "slideaxis",
          "title": "Sliding Axis"
        },
        {
          "type": "float",
          "name": "slidefriction",
          "title": "Friction",
          "description": "Resistance/friction in the constraint",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "SystemLoadScale",
          "title": "Load Scale",
          "description": "Scale of the mass load connected to this constraint (1=just the objects directly connected)",
          "deflt": "1"
        },
        {
          "type": "float",
          "name": "minSoundThreshold",
          "title": "Minimum Sound Velocity",
          "description": "When travelling below this many units/sec, will not play any sound.",
          "deflt": "6"
        },
        {
          "type": "float",
          "name": "maxSoundThreshold",
          "title": "Full Sound Velocity",
          "description": "When travelling at this speed or above, will play sound at full volume.",
          "deflt": "80"
        },
        {
          "type": "sound",
          "name": "slidesoundfwd",
          "title": "Travel sound (forward)",
          "description": "Play this sound when travelling forward on helper axis",
          "deflt": ""
        },
        {
          "type": "sound",
          "name": "slidesoundback",
          "title": "Travel sound (backward)",
          "description": "Play this sound when travelling backward on helper axis",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "reversalsoundthresholdSmall",
          "title": "Reversal sound threshold (small)",
          "description": "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the small reversal sound.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "reversalsoundthresholdMedium",
          "title": "Reversal sound threshold (medium)",
          "description": "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the medium reversal sound.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "reversalsoundthresholdLarge",
          "title": "Reversal sound threshold (large)",
          "description": "When accelerating by more than this many units/sec^2 opposite to direction of travel, play the large reversal sound.",
          "deflt": "0"
        },
        {
          "type": "sound",
          "name": "reversalsoundSmall",
          "title": "Reversal sound (small)",
          "description": "Play this sound when making a hard reverse over the small threshold but less than medium",
          "deflt": ""
        },
        {
          "type": "sound",
          "name": "reversalsoundMedium",
          "title": "Reversal sound (medium)",
          "description": "Play this sound when making a hard reverse over the medium threshold but less than large",
          "deflt": ""
        },
        {
          "type": "sound",
          "name": "reversalsoundLarge",
          "title": "Reversal sound (large)",
          "description": "Play this sound when making a hard reverse over the large threshold",
          "deflt": ""
        }
      ],
      "inputs": [
        {
          "name": "SetVelocity",
          "description": "Set linear velocity along the constraint",
          "type": "float"
        }
      ]
    },
    {
      "name": "phys_lengthconstraint",
      "type": "PointClass",
      "description": "A constraint that preserves the distance between two entities. If the 'Keep Rigid' flag is set, think of it as a rod. If not, think off it as a virtual rope.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "TwoObjectPhysics"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/axis_helper.mdl"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "addlength",
          "title": "Additional Length",
          "description": "Add (or subtract) this amount to the rest length of the rope.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "minlength",
          "title": "Minimum Length",
          "description": "If the constraint is not rigid, this is the minimum length it can be.",
          "deflt": "0"
        },
        {
          "type": "vecline",
          "name": "attachpoint",
          "title": "Attached object 2 point",
          "deflt": "The position the rope attaches to object 2"
        }
      ],
      "flags": [
        {
          "title": "No Collision until break",
          "value": 1,
          "enabled": true
        },
        {
          "title": "Keep Rigid",
          "value": 2,
          "enabled": false
        }
      ]
    },
    {
      "name": "phys_ragdollconstraint",
      "type": "PointClass",
      "description": "A constraint that fixes the position of two entities, relative to this constraint's origin. Also allows for limits on the rotation around each axis, in the space of this constraint.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "TwoObjectPhysics"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/axis_helper.mdl"
          ]
        }
      ],
      "flags": [
        {
          "title": "No Collision until break",
          "value": 1,
          "enabled": true
        },
        {
          "title": "Only limit rotation (free movement)",
          "value": 2,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "xmin",
          "title": "X axis min limit",
          "description": "-180 min and 180 max = no constraint on this axis.",
          "deflt": "-90"
        },
        {
          "type": "float",
          "name": "xmax",
          "title": "X axis max limit",
          "description": "-180 min and 180 max = no constraint on this axis.",
          "deflt": "90"
        },
        {
          "type": "float",
          "name": "ymin",
          "title": "Y axis min limit",
          "description": "-180 min and 180 max = no constraint on this axis.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "ymax",
          "title": "Y axis max limit",
          "description": "-180 min and 180 max = no constraint on this axis.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "zmin",
          "title": "Z axis min limit",
          "description": "-180 min and 180 max = no constraint on this axis.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "zmax",
          "title": "Z axis max limit",
          "description": "-180 min and 180 max = no constraint on this axis.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "xfriction",
          "title": "X axis friction",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "yfriction",
          "title": "Y axis friction",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "zfriction",
          "title": "Z axis friction",
          "deflt": "0"
        }
      ]
    },
    {
      "name": "phys_convert",
      "type": "PointClass",
      "description": "Turns an arbitrary entity into a physically simulated entity. i.e. brush entities will behave like func_physbox, model entities behave like prop_physics.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            0,
            255
          ]
        }
      ],
      "flags": [
        {
          "title": "Convert Asleep",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Convert As Debris",
          "value": 2,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Entity to convert",
          "description": "Name of the entity that will be converted to a physics object when the ConvertTarget input is fired."
        },
        {
          "type": "string",
          "name": "swapmodel",
          "title": "Model Swap Entity"
        },
        {
          "type": "float",
          "name": "massoverride",
          "title": "Mass Override",
          "description": "Sets the mass when the object(s) are converted (0 means auto-calculate)",
          "deflt": "0"
        }
      ],
      "outputs": [
        {
          "name": "OnConvert",
          "description": "Fires after the conversion has taken place.",
          "type": "void"
        }
      ],
      "inputs": [
        {
          "name": "ConvertTarget",
          "description": "Converts this entity's target to a physically simulated object.",
          "type": "void"
        }
      ]
    },
    {
      "name": "ForceController",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "flags": [
        {
          "title": "Start On",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Apply Force",
          "value": 2,
          "enabled": true
        },
        {
          "title": "Apply Torque",
          "value": 4,
          "enabled": true
        },
        {
          "title": "Orient Locally",
          "value": 8,
          "enabled": true
        },
        {
          "title": "Ignore Mass",
          "value": 16,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "attach1",
          "title": "Attached Object",
          "description": "Object to apply the force to.",
          "deflt": ""
        },
        {
          "type": "string",
          "name": "forcetime",
          "title": "Time of Force (0=inf)",
          "description": "Automatic shut-off after this time has passed (0 = stay on forever or until deactivated)",
          "deflt": "0"
        }
      ],
      "inputs": [
        {
          "name": "Activate",
          "description": "Turn the force on",
          "type": "void"
        },
        {
          "name": "Deactivate",
          "description": "Turn the force off",
          "type": "void"
        },
        {
          "name": "Scale",
          "description": "Set Force Scale",
          "type": "string"
        }
      ]
    },
    {
      "name": "phys_thruster",
      "type": "PointClass",
      "description": "An entity used to apply constant acceleration to a physics object. The force and torque is calculated using the position and direction of the thruster as an impulse. So moving those off the object's center will cause torque as well. Torque can be removed by unchecking the 'apply torque' flag. The position of the thruster can be forced to be at the object's center by checking to 'ignore pos' flag.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Angles",
            "ForceController"
          ]
        }
      ],
      "flags": [
        {
          "title": "Ignore Pos",
          "value": 32,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "force",
          "title": "Force",
          "description": "Force (will be integrated, units are force kg*in/s^2)",
          "deflt": "0"
        }
      ]
    },
    {
      "name": "phys_torque",
      "type": "PointClass",
      "description": "An angular thruster. Use it to apply angular force to an entity.",
      "parameters": [
        {
          "name": "halfgridsnap",
          "values": []
        },
        {
          "name": "base",
          "values": [
            "ForceController"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "force",
          "title": "Angular Acceleration",
          "deflt": "0"
        },
        {
          "type": "vecline",
          "name": "axis",
          "title": "Rotation Axis",
          "deflt": ""
        }
      ]
    },
    {
      "name": "phys_motor",
      "type": "PointClass",
      "description": "An entity that tries to spin a target entity at a particular speed.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "halfgridsnap",
          "values": []
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "speed",
          "title": "Rotation Speed",
          "description": "Angular speed (units are degress/second)",
          "deflt": "0"
        },
        {
          "type": "string",
          "name": "spinup",
          "title": "Spin up time",
          "description": "spin up time in seconds (also affects the rate at which speed changes happen)",
          "deflt": "1"
        },
        {
          "type": "float",
          "name": "inertiafactor",
          "title": "System Interia Scale",
          "description": "Make this larger if the object being driven is constrained to a set of heavier objects.",
          "deflt": "1.0"
        },
        {
          "type": "vecline",
          "name": "axis",
          "title": "Rotation Axis",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "attach1",
          "title": "Attached Object",
          "description": "Object to apply the force to",
          "deflt": ""
        }
      ],
      "flags": [
        {
          "title": "Start On",
          "value": 1,
          "enabled": true
        },
        {
          "title": "No world collision",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Hinge Object",
          "value": 4,
          "enabled": true
        }
      ],
      "inputs": [
        {
          "name": "SetSpeed",
          "description": "Sets target speed",
          "type": "float"
        },
        {
          "name": "TurnOn",
          "description": "Turns motor on",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turns motor off",
          "type": "void"
        }
      ]
    },
    {
      "name": "phys_magnet",
      "type": "PointClass",
      "description": "An entity that acts like a magnet, attaching metallic physics objects to itself when they touch it.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles",
            "Studiomodel"
          ]
        },
        {
          "name": "studio",
          "values": []
        }
      ],
      "flags": [
        {
          "title": "Start Asleep",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Motion Disabled",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Suck On Touch",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Allow Attached Rotation",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Coast jeep pickup hack",
          "value": 16,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "forcelimit",
          "title": "Force Limit to Break (lbs)",
          "description": "The amount of force necessary to break a stuck object off the magnet. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the magnet.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "torquelimit",
          "title": "Torque Limit to Break (lbs * distance)",
          "description": "The amount of torque necessary to break a stuck object off the magnet. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint.",
          "deflt": "0"
        },
        {
          "type": "float",
          "name": "massScale",
          "title": "Mass Scale",
          "description": "A scale multiplier for the object's mass.",
          "deflt": "0"
        },
        {
          "type": "string",
          "name": "overridescript",
          "title": "Override parameters",
          "description": "A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.",
          "deflt": ""
        },
        {
          "type": "integer",
          "name": "maxobjects",
          "title": "Maximum Attached Objects",
          "description": "The maximum number of physics objects that can be stuck to the magnet at once. 0 = no limit.",
          "deflt": 0
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Turn the magnet on.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "The the magnet off. This will detach anything current stuck to the magnet.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnAttach",
          "description": "Fired when an entity is grabbed by the magnet.",
          "type": "void"
        },
        {
          "name": "OnDetach",
          "description": "Fired when an entity is released by the magnet.",
          "type": "void"
        }
      ]
    },
    {
      "name": "prop_detail_base",
      "type": "BaseClass",
      "properties": [
        {
          "type": "studio",
          "name": "model",
          "title": "World model"
        }
      ]
    },
    {
      "name": "prop_static_base",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Angles",
            "DXLevelChoice"
          ]
        }
      ],
      "properties": [
        {
          "type": "studio",
          "name": "model",
          "title": "World Model"
        },
        {
          "type": "integer",
          "name": "skin",
          "title": "Skin",
          "description": "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default.",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "solid",
          "title": "Collisions",
          "deflt": 6,
          "choices": {
            "0": "Not Solid",
            "2": "Use Bounding Box",
            "6": "Use VPhysics"
          }
        },
        {
          "type": "choices",
          "name": "disableshadows",
          "title": "Disable Shadows",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "screenspacefade",
          "title": "Screen Space Fade",
          "description": "The method by which the fading distance should be determined. If 'No', the fade distances is the distance from the player's view to the object, in inches. If 'Yes', the fade distance is the size of the object onscreen, in pixels.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "float",
          "name": "fademindist",
          "title": "Start Fade Dist/Pixels",
          "description": "Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade.",
          "deflt": -1
        },
        {
          "type": "float",
          "name": "fademaxdist",
          "title": "End Fade Dist/Pixels",
          "description": "Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "fadescale",
          "title": "Fade Scale",
          "description": "If you specify a fade in the worldspawn, or if the engine is running under dx7 [hl2/ep1/portal] or dx8 [ep2/tf], then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified. This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades. Numbers smaller than 1 cause the prop to fade out at further distances, and greater than 1 cause it to fade out at closer distances.",
          "deflt": 1
        },
        {
          "type": "target_destination",
          "name": "lightingorigin",
          "title": "Lighting Origin",
          "description": "Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin.",
          "deflt": ""
        },
        {
          "type": "choices",
          "name": "disablevertexlighting",
          "title": "Disable Vertex lighting",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "disableselfshadowing",
          "title": "Disable Self-Shadowing with vertex lighting",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "ignorenormals",
          "title": "Ignore surface normal for computing vertex lighting",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ]
    },
    {
      "name": "prop_dynamic_base",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Parentname",
            "Global",
            "Angles",
            "Studiomodel",
            "BreakableProp",
            "DXLevelChoice",
            "BaseFadeProp",
            "RenderFields",
            "GMODLightOrigin"
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "solid",
          "title": "Collisions",
          "deflt": 6,
          "choices": {
            "0": "Not Solid",
            "2": "Use Bounding Box",
            "6": "Use VPhysics"
          }
        },
        {
          "type": "string",
          "name": "DefaultAnim",
          "title": "Default Animation",
          "description": "The name of the idle animation that this prop will revert to whenever it finishes a random or forced animation.",
          "deflt": ""
        },
        {
          "type": "choices",
          "name": "RandomAnimation",
          "title": "Randomly Animate",
          "description": "If set, this prop will randomly choose and play animations, based upon the times specified in 'Min/Max Random Anim Time'. Inbetween the random animations, it will revert to playing the 'Default Animation'.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "float",
          "name": "MinAnimTime",
          "title": "Min Random Anim Time",
          "description": "Minimum time between random animations.",
          "deflt": "5"
        },
        {
          "type": "float",
          "name": "MaxAnimTime",
          "title": "Max Random Anim Time",
          "description": "Maximum time between random animations.",
          "deflt": "10"
        },
        {
          "type": "integer",
          "name": "SetBodyGroup",
          "title": "Body Group",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "DisableBoneFollowers",
          "title": "Disable Bone Followers",
          "description": "If set, this prop won't generate bone followers, even if they're listed in the model's .qc",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "HoldAnimation",
          "title": "Hold Animation",
          "description": "If set, the prop will not loop its animation, but hold the last frame.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "Color (R G B)",
          "deflt": "255 255 255"
        }
      ],
      "flags": [
        {
          "title": "Use Hitboxes for Renderbox",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Start with collision disabled",
          "value": 256,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "SetAnimation",
          "description": "Force the prop to play an animation. The parameter should be the name of the animation.",
          "type": "string"
        },
        {
          "name": "SetAnimationNoReset",
          "description": "Force the prop to play an animation unless the prop is already playing the animation. The parameter should be the name of the animation.",
          "type": "string"
        },
        {
          "name": "SetDefaultAnimation",
          "description": "Set the Default Animation to the one specified in the parameter.",
          "type": "string"
        },
        {
          "name": "SetPlaybackRate",
          "description": "Set the playback rate for the animation.",
          "type": "float"
        },
        {
          "name": "SetBodyGroup",
          "description": "Set the visible bodygroup, by index.",
          "type": "integer"
        },
        {
          "name": "TurnOn",
          "description": "Make the prop visible.",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Make the prop invisible.",
          "type": "void"
        },
        {
          "name": "EnableCollision",
          "description": "Enable collision on the prop.",
          "type": "void"
        },
        {
          "name": "DisableCollision",
          "description": "Disable collision on the prop.",
          "type": "void"
        },
        {
          "name": "BecomeRagdoll",
          "description": "Change into a ragdoll immediately.",
          "type": "void"
        },
        {
          "name": "FadeAndKill",
          "description": "Fade out then remove this prop.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnAnimationBegun",
          "description": "Fired whenever a new animation has begun playing.",
          "type": "void"
        },
        {
          "name": "OnAnimationDone",
          "description": "Fired whenever an animation is complete.",
          "type": "void"
        }
      ]
    },
    {
      "name": "prop_detail",
      "type": "PointClass",
      "description": "Detail Prop",
      "parameters": [
        {
          "name": "base",
          "values": [
            "prop_detail_base"
          ]
        },
        {
          "name": "studioprop",
          "values": []
        }
      ],
      "properties": [
        {
          "type": "studio",
          "name": "model",
          "title": "World model"
        }
      ]
    },
    {
      "name": "prop_static",
      "type": "PointClass",
      "description": "A prop that doesn't move and doesn't animate.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "prop_static_base"
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            255,
            0
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fademindist"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fademaxdist"
          ]
        },
        {
          "name": "studioprop",
          "values": []
        }
      ]
    },
    {
      "name": "prop_dynamic",
      "type": "PointClass",
      "description": "A prop that can be placed in hierarchy and can play animations. It can also be configured to break when it takes enough damage. Note that the health of the object will be overridden by the health inside the model, to ensure consistent health game-wide. If the model used by the prop is configured to be used as a prop_physics (i.e. it should be physically simulated) then it CANNOT be used as a prop_dynamic. Upon level load it will display a warning in the console and remove itself. Use a prop_physics instead.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "prop_dynamic_base",
            "EnableDisable"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fademindist"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fademaxdist"
          ]
        },
        {
          "name": "studioprop",
          "values": []
        }
      ]
    },
    {
      "name": "prop_dynamic_override",
      "type": "PointClass",
      "description": "A prop that can be placed in hierarchy and can play animations. It can also be configured to break when it takes enough damage.\\nprop_dynamic_override is a prototyping entity only. It will allow the use of models designed to be used as prop_physics.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "prop_dynamic_base"
          ]
        },
        {
          "name": "studioprop",
          "values": []
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "health",
          "title": "Health",
          "description": "Number of points of damage to take before breaking.  0 means don't break.",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "AnimateEveryFrame",
          "title": "Animate Every Frame",
          "description": "Force this prop to animate every frame. Don't use this unless you know what you are doing.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ]
    },
    {
      "name": "BasePropPhysics",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Global",
            "Angles",
            "Studiomodel",
            "BreakableProp",
            "DXLevelChoice",
            "BaseFadeProp"
          ]
        }
      ],
      "flags": [
        {
          "title": "Start Asleep",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Don't take physics damage",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Debris - Don't collide with the player or other debris",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Motion Disabled",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Enable motion on Gravity Gun grab",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Not affected by rotor wash",
          "value": 128,
          "enabled": false
        },
        {
          "title": "Generate output on +USE ",
          "value": 256,
          "enabled": true
        },
        {
          "title": "Prevent pickup",
          "value": 512,
          "enabled": false
        },
        {
          "title": "Prevent motion enable on player bump",
          "value": 1024,
          "enabled": false
        },
        {
          "title": "Debris with trigger interaction",
          "value": 4096,
          "enabled": false
        },
        {
          "title": "Force server-side (Multiplayer only)",
          "value": 8192,
          "enabled": false
        },
        {
          "title": "Gravity Gun can ALWAYS pick up. No matter what.",
          "value": 1048576,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "minhealthdmg",
          "title": "Min Damage to Hurt",
          "description": "The prop will ignore any damage events if the damage is less than this amount.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "shadowcastdist",
          "title": "Shadow Cast Distance",
          "description": "Use this to override how far this object casts shadows. 0 = default distance.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "physdamagescale",
          "title": "Physics Impact Damage Scale",
          "description": "Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.",
          "deflt": "0.1"
        },
        {
          "type": "choices",
          "name": "Damagetype",
          "title": "Impact damage type",
          "deflt": 0,
          "choices": {
            "0": "Blunt",
            "1": "Sharp"
          }
        },
        {
          "type": "choices",
          "name": "nodamageforces",
          "title": "Damaging it Doesn't Push It",
          "description": "Used to determine whether or not damage should cause the brush to move.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "float",
          "name": "inertiaScale",
          "title": "Scale Factor For Inertia",
          "description": "Scales the angular mass of an object. Used to hack angular damage and collision response.",
          "deflt": "1.0"
        },
        {
          "type": "float",
          "name": "massScale",
          "title": "Mass Scale",
          "description": "A scale multiplier for the object's mass.",
          "deflt": "0"
        },
        {
          "type": "string",
          "name": "overridescript",
          "title": "Override Parameters",
          "description": "A list of physics key/value pairs that are usually in a physics prop .qc file. Format is 'key,value,key,value,etc'.",
          "deflt": ""
        },
        {
          "type": "integer",
          "name": "damagetoenablemotion",
          "title": "Health Level to Override Motion",
          "description": "If specified, this object will start motion disabled. Once its health has dropped below this specified amount, it will enable motion.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "forcetoenablemotion",
          "title": "Physics Impact Force to Override Motion",
          "description": "If specified, this object will start motion disabled. Any impact that imparts a force greater than this value on the physbox will enable motion.",
          "deflt": 0
        },
        {
          "type": "sound",
          "name": "puntsound",
          "title": "Sound to make when punted"
        }
      ],
      "inputs": [
        {
          "name": "Wake",
          "description": "Wake up this physics object, if it is sleeping.",
          "type": "void"
        },
        {
          "name": "Sleep",
          "description": "Put this physics object to sleep. It will wake if given the Wake input, or if force is applied to it. Note that physics objects go to sleep automatically after coming to rest for a while, so you don't really need to use this.",
          "type": "void"
        },
        {
          "name": "EnableMotion",
          "description": "Enable physics motion/collision response.",
          "type": "void"
        },
        {
          "name": "DisableMotion",
          "description": "Disable physics motion/collision response.",
          "type": "void"
        },
        {
          "name": "DisableFloating",
          "description": "Disable fluid/floating simulation to reduce cost.",
          "type": "void"
        },
        {
          "name": "SetBodyGroup",
          "description": "Set this prop's body group (from 0 - n).",
          "type": "integer"
        },
        {
          "name": "physdamagescale",
          "description": "Set the Physics Impact Damage Scale for this character. NOTE: 0 means this feature is disabled for backwards compatibility.",
          "type": "float"
        },
        {
          "name": "EnableDamageForces",
          "description": "Damaging the entity applies physics forces to it.",
          "type": "void"
        },
        {
          "name": "DisableDamageForces",
          "description": "Damaging the entity does *not* apply physics forces to it.",
          "type": "void"
        },
        {
          "name": "EnablePuntSound",
          "description": "Allow this prop to play its own sound when punted",
          "type": "void"
        },
        {
          "name": "DisablePuntSound",
          "description": "Prevent this prop from playing its own sound when punted",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnMotionEnabled",
          "description": "Fired when motion is enabled on this prop, either via 'Health Level to Override Motion' or from the EnableMotion input.",
          "type": "void"
        },
        {
          "name": "OnAwakened",
          "description": "Fired when this entity becomes awake (collision/force is applied to it while it's asleep).",
          "type": "void"
        },
        {
          "name": "OnPhysGunPickup",
          "description": "Fired when the player picks up the prop with the Gravity Gun or +USE.",
          "type": "void"
        },
        {
          "name": "OnPhysGunPunt",
          "description": "Fired when a player punts this object with the Gravity Gun.",
          "type": "void"
        },
        {
          "name": "OnPhysGunOnlyPickup",
          "description": "Fired when a player picks this object up WITH THE GRAVITY GUN. +USE pickups do not fire this output.",
          "type": "void"
        },
        {
          "name": "OnPhysGunDrop",
          "description": "Fired when the player drops the prop with the Gravity Gun or USE.",
          "type": "void"
        },
        {
          "name": "OnPlayerUse",
          "description": "Fired when the player tries to +USE the prop. This output will fire only if the Generate output on +USE spawnflag is set.",
          "type": "void"
        },
        {
          "name": "OnPlayerPickup",
          "description": "Fired whenever the player picks up this prop (with the Gravity Gun or with +USE).",
          "type": "void"
        },
        {
          "name": "OnOutOfWorld",
          "description": "Fired whenever the prop is out of the allowed world bounds.",
          "type": "void"
        }
      ]
    },
    {
      "name": "prop_physics_override",
      "type": "PointClass",
      "description": "A prop that physically simulates as a single rigid body. It can be constrained to other physics objects using hinges or other constraints. It can also be configured to break when it takes enough damage. Health can be overridden on this version.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BasePropPhysics"
          ]
        },
        {
          "name": "studioprop",
          "values": []
        },
        {
          "name": "sphere",
          "values": [
            "fademindist"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fademaxdist"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "health",
          "title": "Health",
          "description": "Number of points of damage to take before breaking.  0 means don't break.",
          "deflt": 0
        }
      ],
      "inputs": [
        {
          "name": "Ignite",
          "description": "Ignite, burst into flames.",
          "type": "void"
        },
        {
          "name": "IgniteLifetime",
          "description": "Ignite, with a parameter lifetime.",
          "type": "float"
        },
        {
          "name": "IgniteNumHitboxFires",
          "description": "Ignite, with a parameternumber of hitbox fires.",
          "type": "integer"
        },
        {
          "name": "IgniteHitboxFireScale",
          "description": "Ignite, with a parameter hitbox fire scale.",
          "type": "float"
        }
      ]
    },
    {
      "name": "prop_physics",
      "type": "PointClass",
      "description": "A prop that physically simulates as a single rigid body. It can be constrained to other physics objects using hinges or other constraints. It can also be configured to break when it takes enough damage. Note that the health of the object will be overridden by the health inside the model, to ensure consistent health game-wide. If the model used by the prop is configured to be used as a prop_dynamic (i.e. it should not be physically simulated) then it CANNOT be used as a prop_physics. Upon level load it will display a warning in the console and remove itself. Use a prop_dynamic instead.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BasePropPhysics",
            "RenderFields"
          ]
        },
        {
          "name": "studioprop",
          "values": []
        },
        {
          "name": "sphere",
          "values": [
            "fademindist"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fademaxdist"
          ]
        }
      ],
      "inputs": [
        {
          "name": "Ignite",
          "description": "Ignite, burst into flames.",
          "type": "void"
        },
        {
          "name": "IgniteLifetime",
          "description": "Ignite, with a parameter lifetime.",
          "type": "float"
        },
        {
          "name": "IgniteNumHitboxFires",
          "description": "Ignite, with a parameternumber of hitbox fires.",
          "type": "integer"
        },
        {
          "name": "IgniteHitboxFireScale",
          "description": "Ignite, with a parameter hitbox fire scale.",
          "type": "float"
        }
      ]
    },
    {
      "name": "prop_physics_multiplayer",
      "type": "PointClass",
      "description": "This class is the same as prop_physics, except the runtime collisions use a more bouncy method that avoids the prediction errors normal physics objects get.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "prop_physics"
          ]
        },
        {
          "name": "studioprop",
          "values": []
        },
        {
          "name": "sphere",
          "values": [
            "fademindist"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fademaxdist"
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "physicsmode",
          "title": "Physics Mode",
          "deflt": 0,
          "choices": {
            "0": "Auto Detect",
            "1": "Solid, Server-side",
            "2": "Non-Solid, Server-side",
            "3": "Non-Solid, Client-side"
          }
        }
      ]
    },
    {
      "name": "prop_ragdoll",
      "type": "PointClass",
      "description": "A prop that physically simulates and can be articulated with internal joints. The joint constraints are part of the physics model.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Angles",
            "Targetname",
            "Studiomodel",
            "DXLevelChoice",
            "BaseFadeProp",
            "EnableDisable",
            "GMODSandbox"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fademindist"
          ]
        },
        {
          "name": "sphere",
          "values": [
            "fademaxdist"
          ]
        },
        {
          "name": "studioprop",
          "values": []
        }
      ],
      "flags": [
        {
          "title": "Debris - Don't collide with the player or other debris",
          "value": 4,
          "enabled": true
        },
        {
          "title": "Allow Dissolve",
          "value": 8192,
          "enabled": false
        },
        {
          "title": "Motion Disabled",
          "value": 16384,
          "enabled": false
        },
        {
          "title": "Allow stretch",
          "value": 32768,
          "enabled": false
        },
        {
          "title": "Start asleep",
          "value": 65536,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "angleOverride",
          "title": "Override Animation",
          "description": "Filled in by the engine via wc_update_entity, do not edit by hand except to clear.",
          "deflt": ""
        }
      ],
      "inputs": [
        {
          "name": "StartRagdollBoogie",
          "description": "Begins ragdoll boogie effect. Parameter override = number of seconds to boogie.",
          "type": "void"
        },
        {
          "name": "EnableMotion",
          "description": "Enable physics motion/collision response.",
          "type": "void"
        },
        {
          "name": "DisableMotion",
          "description": "Disable physics motion/collision response.",
          "type": "void"
        },
        {
          "name": "FadeAndRemove",
          "description": "Fade out then remove (kill) self. Parameter override = duration of fade",
          "type": "float"
        }
      ]
    },
    {
      "name": "prop_dynamic_ornament",
      "type": "PointClass",
      "description": "A way to attach one studio model to another as an ornament. It will render in the way that player/NPC weapons render.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "prop_dynamic_base"
          ]
        },
        {
          "name": "studioprop",
          "values": []
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "solid",
          "title": "Collisions",
          "deflt": 0,
          "choices": {
            "0": "Not Solid"
          }
        },
        {
          "type": "string",
          "name": "InitialOwner",
          "title": "Target Entity",
          "description": "Name of the entity that this ornament should attach to, at startup."
        }
      ],
      "inputs": [
        {
          "name": "SetAttached",
          "description": "Attach the ornament to a different entity. Parameter should be the name of entity to attach to.",
          "type": "string"
        },
        {
          "name": "Detach",
          "description": "Detach from the Target Entity and become invisible. The ornament can be re-attached with the SetAttached input.",
          "type": "string"
        }
      ]
    },
    {
      "name": "func_areaportal",
      "type": "SolidClass",
      "description": "A portal brush used to manage visibility in maps. Portals define areas, which are spaces that are connected in the map. Both sides of a portal cannot touch the same area, for example, a doughnut shaped map would require at least two portals to divide the map into two areas. A linear map could be divided into two areas with a single area portal.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            255,
            255
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Name of Linked Door",
          "description": "(Optional) The name of a door whose open/closed state controls the on/off state of this area portal."
        },
        {
          "type": "choices",
          "name": "StartOpen",
          "title": "Initial State",
          "deflt": 1,
          "choices": {
            "0": "Closed",
            "1": "Open"
          }
        },
        {
          "type": "integer",
          "name": "PortalVersion",
          "title": "Portal Version",
          "description": "(Don't change). Differentiates between shipping HL2 maps and maps using new engine features.",
          "deflt": 1
        }
      ],
      "inputs": [
        {
          "name": "Open",
          "description": "Open the portal. When the portal is open is can be seen through.",
          "type": "void"
        },
        {
          "name": "Close",
          "description": "Close the portal. When the portal is closed it cannot be seen through.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle the open/closed state of the portal.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_occluder",
      "type": "SolidClass",
      "description": "A occluder brush used to manage dynamic visibility in maps. Occluders are used to dynamically determine what things are behind them, to prevent trying to draw them at all.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            255,
            255
          ]
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "StartActive",
          "title": "Initial State",
          "deflt": 1,
          "choices": {
            "0": "Inactive",
            "1": "Active"
          }
        }
      ],
      "inputs": [
        {
          "name": "Deactivate",
          "description": "Deactivate the occluder, When inactive, it can be seen through.",
          "type": "void"
        },
        {
          "name": "Activate",
          "description": "Activate the occluder. When active, it cannot be seen through.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle the active/inactive state of the occluder.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_breakable",
      "type": "SolidClass",
      "description": "A brush entity that can be broken from damage, or an input.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BreakableBrush",
            "Origin",
            "RenderFields",
            "Shadow"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "minhealthdmg",
          "title": "Min Damage to Hurt",
          "description": "The prop will ignore any damage events if the damage is less than this amount.",
          "deflt": 0
        },
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        },
        {
          "type": "float",
          "name": "physdamagescale",
          "title": "Physics Impact Damage Scale",
          "description": "Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility.\\nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials.",
          "deflt": "1.0"
        }
      ]
    },
    {
      "name": "func_breakable_surf",
      "type": "SolidClass",
      "description": "A breakable surface, for partially breakable glass / tile / etc.  All faces but the desired visible one must be marked as NODRAW and thatface must be 4 sided.  The material applied to the visible face must be set up to be breakable.",
      "parameters": [
        {
          "name": "quadbounds",
          "values": []
        },
        {
          "name": "base",
          "values": [
            "BreakableBrush",
            "RenderFields",
            "Shadow"
          ]
        }
      ],
      "flags": [
        {
          "title": "Physics damage decals",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Take damage from held objects",
          "value": 2,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "health",
          "title": "Health",
          "description": "The amount of damage the surface takes before breaking.",
          "deflt": 5
        },
        {
          "type": "integer",
          "name": "fragility",
          "title": "Fragility",
          "description": "If the 'Surface Type' is set to Glass, this value sets how fragile the glass pieces are after the surface has been broken.",
          "deflt": 100
        },
        {
          "type": "choices",
          "name": "surfacetype",
          "title": "Surface Type",
          "deflt": 0,
          "choices": {
            "0": "Glass",
            "1": "Tile"
          }
        }
      ],
      "inputs": [
        {
          "name": "Shatter",
          "description": "Shatter the window. Input a vector. First two coordinates are the X,Y center of the shattering (as values from from 0-1). The third coordinate is the radius of the shatter, in inches.",
          "type": "vector"
        }
      ]
    },
    {
      "name": "func_conveyor",
      "type": "SolidClass",
      "description": "Conveyor Belt",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "RenderFields",
            "Shadow"
          ]
        }
      ],
      "properties": [
        {
          "type": "angle",
          "name": "movedir",
          "title": "Move Direction (Pitch Yaw Roll)",
          "description": "The direction conveyor moves.",
          "deflt": "0 0 0"
        },
        {
          "type": "string",
          "name": "speed",
          "title": "Conveyor Speed",
          "deflt": "100"
        },
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        }
      ],
      "flags": [
        {
          "title": "No Push",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Not Solid",
          "value": 2,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "ToggleDirection",
          "description": "ToggleDirection",
          "type": "void"
        },
        {
          "name": "SetSpeed",
          "description": "SetSpeed",
          "type": "integer"
        }
      ]
    },
    {
      "name": "func_detail",
      "type": "SolidClass",
      "description": "An entity that turns its brushes into detail brushes. Detail brushes do NOT contribute to visibility in the PVS. World geometry is not clipped to detail brushes, so if you have a small detail clump attached to a wall, the wall won't be cut up by the detail brush.func_detail is great for high-frequency brush geometry that's visual detail only. It is also ideal for reducing map VIS time.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "DXLevelChoice"
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            180,
            0
          ]
        }
      ]
    },
    {
      "name": "func_viscluster",
      "type": "SolidClass",
      "description": "Any leaves touching this brush will have their vis merged together into a single cluster.  Use multiple func_viscluster entities to reduce vis time",
      "parameters": [
        {
          "name": "color",
          "values": [
            180,
            180,
            0
          ]
        }
      ]
    },
    {
      "name": "func_illusionary",
      "type": "SolidClass",
      "description": "Legacy support. Use func_brush instead.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Origin",
            "RenderFields",
            "Shadow"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        }
      ]
    },
    {
      "name": "func_precipitation",
      "type": "SolidClass",
      "description": "A brush entity that creates rain and snow inside its volume.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "renderamt",
          "title": "Density (0-100%)",
          "deflt": 5
        },
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "Color (R G B)",
          "deflt": "100 100 100"
        },
        {
          "type": "choices",
          "name": "preciptype",
          "title": "Precipitation Type",
          "deflt": 0,
          "choices": {
            "0": "Rain",
            "1": "Snow",
            "2": "Ash",
            "3": "Snowfall"
          }
        }
      ]
    },
    {
      "name": "func_wall_toggle",
      "type": "SolidClass",
      "description": "A brush entity that can be toggled on/off. When off, the brush will be non-solid and invisible. Does not cast lightmap shadows.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "func_wall"
          ]
        }
      ],
      "flags": [
        {
          "title": "Starts Invisible",
          "value": 1,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "Toggle",
          "description": "Toggle the brush on/off. When off, the brush will be non-solid and invisible.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_guntarget",
      "type": "SolidClass",
      "description": "This is a moving target that moves along a path of path_tracks. It can be shot and killed.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "RenderFields",
            "Global"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "speed",
          "title": "Speed (units per second)",
          "description": "The speed at which the target moves along its path.",
          "deflt": 100
        },
        {
          "type": "target_destination",
          "name": "target",
          "title": "First stop target",
          "description": "The name of the first path_track entity in the path that this target should follow."
        },
        {
          "type": "integer",
          "name": "health",
          "title": "Damage to Take",
          "description": "The amount of damage taken before this target is killed.",
          "deflt": 0
        },
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        }
      ],
      "inputs": [
        {
          "name": "Start",
          "description": "Start the target moving.",
          "type": "void"
        },
        {
          "name": "Stop",
          "description": "Stop the target from moving.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle the target between moving and stopped.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnDeath",
          "description": "Fires when the target is killed.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_fish_pool",
      "type": "PointClass",
      "description": "Creates a school of interactive fish that swim near this entity.",
      "properties": [
        {
          "type": "studio",
          "name": "model",
          "title": "World model",
          "deflt": "models/Junkola.mdl"
        },
        {
          "type": "integer",
          "name": "fish_count",
          "title": "Fish Count",
          "description": "Number of Fish in this Pool",
          "deflt": 10
        },
        {
          "type": "float",
          "name": "max_range",
          "title": "Max Range",
          "description": "How far away a Fish can wander (max 255)",
          "deflt": 150
        }
      ]
    },
    {
      "name": "PlatSounds",
      "type": "BaseClass",
      "properties": [
        {
          "type": "choices",
          "name": "movesnd",
          "title": "Move Sound",
          "description": "The sound played whenever the platform starts moving.",
          "deflt": 0,
          "choices": {
            "0": "No Sound",
            "1": "big elev 1",
            "2": "big elev 2",
            "3": "tech elev 1",
            "4": "tech elev 2",
            "5": "tech elev 3",
            "6": "freight elev 1",
            "7": "freight elev 2",
            "8": "heavy elev",
            "9": "rack elev",
            "10": "rail elev",
            "11": "squeek elev",
            "12": "odd elev 1",
            "13": "odd elev 2"
          }
        },
        {
          "type": "choices",
          "name": "stopsnd",
          "title": "Stop Sound",
          "description": "The sound played when the platform stops moving.",
          "deflt": 0,
          "choices": {
            "0": "No Sound",
            "1": "big elev stop1",
            "2": "big elev stop2",
            "3": "freight elev stop",
            "4": "heavy elev stop",
            "5": "rack stop",
            "6": "rail stop",
            "7": "squeek stop",
            "8": "quick stop"
          }
        },
        {
          "type": "string",
          "name": "volume",
          "title": "Sound Volume 0.0 - 1.0",
          "deflt": "0.85"
        }
      ]
    },
    {
      "name": "Trackchange",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "RenderFields",
            "Global",
            "PlatSounds"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "height",
          "title": "Travel Altitude",
          "description": "The vertical height above the track that the train moves. Negative values moves the train below.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "rotation",
          "title": "Spin amount",
          "description": "The amount this platform should rotate as it moves, in degrees.",
          "deflt": 0
        },
        {
          "type": "target_destination",
          "name": "train",
          "title": "Train to Switch"
        },
        {
          "type": "target_destination",
          "name": "toptrack",
          "title": "Top Track"
        },
        {
          "type": "target_destination",
          "name": "bottomtrack",
          "title": "Bottom Track"
        },
        {
          "type": "integer",
          "name": "speed",
          "title": "Move/Rotate Speed",
          "deflt": 0
        }
      ],
      "flags": [
        {
          "title": "Auto Activate train",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Relink track",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Start at Bottom",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Rotate Only",
          "value": 16,
          "enabled": false
        },
        {
          "title": "X Axis",
          "value": 64,
          "enabled": false
        },
        {
          "title": "Y Axis",
          "value": 128,
          "enabled": false
        }
      ]
    },
    {
      "name": "BaseTrain",
      "type": "BaseClass",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Origin",
            "RenderFields",
            "Global",
            "Shadow"
          ]
        }
      ],
      "flags": [
        {
          "title": "No Pitch (X-rot)",
          "value": 1,
          "enabled": false
        },
        {
          "title": "No User Control",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Passable",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Fixed Orientation",
          "value": 16,
          "enabled": false
        },
        {
          "title": "HL1 Train",
          "value": 128,
          "enabled": false
        },
        {
          "title": "Use max speed for pitch shifting move sound",
          "value": 256,
          "enabled": false
        },
        {
          "title": "Is unblockable by player",
          "value": 512,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "First Stop Target",
          "description": "The name of the first path_track in the train's path. The train will spawn at this path_track. It will also turn to face direction indicated by the 'Orientation Type' setting.",
          "deflt": ""
        },
        {
          "type": "integer",
          "name": "startspeed",
          "title": "Max Speed (units / second)",
          "description": "The maximum speed that this train can move. Any speeds applied to this train, such as by path_tracks or SetSpeed inputs, will be clipped to this maximum value.",
          "deflt": 100
        },
        {
          "type": "integer",
          "name": "speed",
          "title": "Initial Speed (units / second)",
          "description": "The speed that the train will move at after it spawns, 0 = stopped.",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "velocitytype",
          "title": "Change Velocity",
          "description": "The method through which this train changes its velocity as it moves along the path.",
          "deflt": 0,
          "choices": {
            "0": "Instantaneously",
            "1": "Linear blend",
            "2": "Ease in/ease out"
          }
        },
        {
          "type": "choices",
          "name": "orientationtype",
          "title": "Change angles",
          "description": "The method through which this train changes its orientation as it moves along the path.",
          "deflt": 1,
          "choices": {
            "0": "Never (fixed orientation)",
            "1": "Near path_tracks",
            "2": "Linear blend",
            "3": "Ease in/ease out"
          }
        },
        {
          "type": "integer",
          "name": "wheels",
          "title": "Distance Between the Wheels",
          "description": "Used for turning and stopping.",
          "deflt": 50
        },
        {
          "type": "integer",
          "name": "height",
          "title": "Height above track",
          "description": "The height above the track that this train moves.",
          "deflt": 4
        },
        {
          "type": "string",
          "name": "bank",
          "title": "Bank Angle on Turns",
          "deflt": "0"
        },
        {
          "type": "integer",
          "name": "dmg",
          "title": "Damage on Crush",
          "description": "The amount of damage this train does to entities that block it.",
          "deflt": 0
        },
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        },
        {
          "type": "sound",
          "name": "MoveSound",
          "title": "Move Sound",
          "description": "A sound that is played (and looped) while the train is moving.",
          "deflt": ""
        },
        {
          "type": "sound",
          "name": "MovePingSound",
          "title": "Move Ping Sound",
          "description": "A sound that is played more frequently as the train speeds up.",
          "deflt": ""
        },
        {
          "type": "sound",
          "name": "StartSound",
          "title": "Start Sound",
          "description": "A sound played when the train starts moving.",
          "deflt": ""
        },
        {
          "type": "sound",
          "name": "StopSound",
          "title": "Stop Sound",
          "description": "A sound played when the train stops moving.",
          "deflt": ""
        },
        {
          "type": "integer",
          "name": "volume",
          "title": "Volume (10 = loudest)",
          "deflt": 10
        },
        {
          "type": "integer",
          "name": "MoveSoundMinPitch",
          "title": "Min pitch (1-255, > 100 = higher)",
          "description": "The sound pitch value that the train will approach as it comes to a stop.",
          "deflt": 60
        },
        {
          "type": "integer",
          "name": "MoveSoundMaxPitch",
          "title": "Max pitch (1-255, > 100 = higher)",
          "description": "The sound pitch value that the train will approach as it approaches its max speed (or 1000 inches/second if the 'Use max speed for pitch shifting move sound' flag is not set).",
          "deflt": 200
        },
        {
          "type": "float",
          "name": "MoveSoundMinTime",
          "title": "Min move sound interval",
          "description": "Minimum interval at which to play the move ping sound.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "MoveSoundMaxTime",
          "title": "Max move sound interval",
          "description": "Maximum interval at which to play the move ping sound.",
          "deflt": 0
        }
      ],
      "inputs": [
        {
          "name": "SetSpeed",
          "description": "Set the speed of the train, as a ratio of max speed [0, 1]",
          "type": "float"
        },
        {
          "name": "SetSpeedDir",
          "description": "Set the speed of the train, as a ratio of max speed. Negative values reverse the direction [-1, 1]",
          "type": "float"
        },
        {
          "name": "SetSpeedReal",
          "description": "Set the speed of the train. Must be a positive value from 0 to max speed.",
          "type": "float"
        },
        {
          "name": "Stop",
          "description": "Stop the train.",
          "type": "void"
        },
        {
          "name": "StartForward",
          "description": "Start the train moving forward.",
          "type": "void"
        },
        {
          "name": "StartBackward",
          "description": "Start the train moving backward.",
          "type": "void"
        },
        {
          "name": "Resume",
          "description": "Resume the train moving in the current direction after it was stopped via the 'Stop' or 'Toggle' input.",
          "type": "void"
        },
        {
          "name": "Reverse",
          "description": "Reverse the direction of the train.",
          "type": "void"
        },
        {
          "name": "Toggle",
          "description": "Toggle the train between start and stop.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_trackautochange",
      "type": "SolidClass",
      "description": "An entity that works as a rotating/moving platform that will carry a train to a new track. It must be larger in X-Y planar area than the train, since it must contain the train within these dimensions in order to operate when the train is near it.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Trackchange"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        }
      ],
      "inputs": [
        {
          "name": "Trigger",
          "description": "Trigger the track change.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_trackchange",
      "type": "SolidClass",
      "description": "An entity that works as a rotating/moving platform that will carry a train to a new track. It must be larger in X-Y planar area than the train, since it must contain the train within these dimensions in order to operate when the train is near it.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Trackchange"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "_minlight",
          "title": "Minimum Light Level",
          "description": "The minimum level of ambient light that hits this brush."
        }
      ]
    },
    {
      "name": "func_tracktrain",
      "type": "SolidClass",
      "description": "A moving platform that the player can ride. It follows a path of path_track entities.\\nNOTE: Build your train so that the front of the train is facing down the X axis. When it spawns it will automatically rotate to face the next path_track on the path.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BaseTrain"
          ]
        }
      ],
      "outputs": [
        {
          "name": "OnStart",
          "description": "Fired when the train starts moving in either direction.",
          "type": "void"
        },
        {
          "name": "OnNextPoint",
          "description": "Fires continuously every frame when the train is moving to its next destination.",
          "type": "string"
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "ManualSpeedChanges",
          "title": "Manual Train Speed",
          "description": "Train Speed is controlled through IO, handles accel, decel times.",
          "deflt": 0,
          "choices": {
            "0": "Off",
            "1": "On"
          }
        },
        {
          "type": "float",
          "name": "ManualAccelSpeed",
          "title": "Manual Accel Speed",
          "description": "Units per second to accelerate to target speed.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "ManualDecelSpeed",
          "title": "Manual Decel Speed",
          "description": "Units per second to decelerate to target speed.",
          "deflt": 0
        }
      ],
      "inputs": [
        {
          "name": "SetSpeedDirAccel",
          "description": "Accel/Decel to the specified speed, as a ratio of max speed. Negative values reverse the direction [-1, 1]",
          "type": "float"
        },
        {
          "name": "TeleportToPathTrack",
          "description": "Teleport train to the designated path track.",
          "type": "string"
        },
        {
          "name": "SetSpeedForwardModifier",
          "description": "Applies the given modifier to all forward speeds. [0, 1]",
          "type": "float"
        }
      ]
    },
    {
      "name": "func_tanktrain",
      "type": "SolidClass",
      "description": "A moving train that follows a path of path_track entities, shoots at the player, and can be killed.\\nNOTE: Build your train so that the front of the train is facing down the X axis. When it spawns it will automatically rotate to face the next path_track on the path.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BaseTrain"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "health",
          "title": "Health",
          "deflt": 100
        }
      ],
      "outputs": [
        {
          "name": "OnDeath",
          "description": "Fired when the tank is killed.",
          "type": "void"
        }
      ]
    },
    {
      "name": "func_traincontrols",
      "type": "SolidClass",
      "description": "When used by the player, this entity overrides the player's controls to let them drive a train.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Parentname",
            "Global"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Train Name",
          "description": "The target train to control when the player uses these controls."
        }
      ]
    },
    {
      "name": "tanktrain_aitarget",
      "type": "PointClass",
      "description": "An entity that changes the target of a tanktrain_ai entity.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/tanktrain_aitarget.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Tank AI Entity",
          "description": "The tanktrain_ai entity to change the target of."
        },
        {
          "type": "target_destination",
          "name": "newtarget",
          "title": "New Target Entity",
          "description": "The entity to tell the tanktrain_ai to target."
        }
      ]
    },
    {
      "name": "tanktrain_ai",
      "type": "PointClass",
      "description": "Train chase AI",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/tanktrain_ai.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Train Name"
        },
        {
          "type": "sound",
          "name": "startsound",
          "title": "Start Moving Sound",
          "deflt": "vehicles/diesel_start1.wav"
        },
        {
          "type": "sound",
          "name": "enginesound",
          "title": "Engine Loop Sound",
          "deflt": "vehicles/diesel_turbo_loop1.wav"
        },
        {
          "type": "sound",
          "name": "movementsound",
          "title": "Vehicle Movement Sound",
          "deflt": "vehicles/tank_treads_loop1.wav"
        }
      ]
    },
    {
      "name": "path_track",
      "type": "PointClass",
      "description": "An entity used to build paths for other entities to follow. Each path_track is a node on the path, each holding the name of the next path_track in the path.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "cylinder",
          "values": [
            255,
            255,
            255,
            "targetname",
            "target",
            "radius",
            "targetname",
            "targetname",
            "radius"
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            192,
            0
          ]
        },
        {
          "name": "size",
          "values": [
            16,
            16,
            16
          ]
        }
      ],
      "flags": [
        {
          "title": "Disabled",
          "value": 1,
          "enabled": false
        },
        {
          "title": "Fire once",
          "value": 2,
          "enabled": false
        },
        {
          "title": "Branch Reverse",
          "value": 4,
          "enabled": false
        },
        {
          "title": "Disable train",
          "value": 8,
          "enabled": false
        },
        {
          "title": "Teleport to THIS path track",
          "value": 16,
          "enabled": false
        },
        {
          "title": "Part of an uphill path",
          "value": 32,
          "enabled": false
        },
        {
          "title": "Part of a downhill path",
          "value": 64,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Next Stop Target",
          "description": "The next path_track in the path."
        },
        {
          "type": "target_destination",
          "name": "altpath",
          "title": "Branch Path",
          "description": "An alternative path_track to be the next node in the path. Useful for making branching paths. Use the ToggleAlternatePath / EnableAlternatePath inputs to make the alternative path active."
        },
        {
          "type": "float",
          "name": "speed",
          "title": "New Train Speed",
          "description": "When the train reaches this path_track, it will set its speed to this speed. This speed must be a positive value that is less than the train's max speed. A value of 0 will cause no change in the train's speed.",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "radius",
          "title": "Path radius",
          "description": "Used by NPCs who follow track paths (attack chopper/gunship). This tells them the maximum distance they're allowed to be from the path at this node.",
          "deflt": 0
        },
        {
          "type": "choices",
          "name": "orientationtype",
          "title": "Orientation Type",
          "description": "The way that the path follower faces as it moves through this path track.",
          "deflt": 1,
          "choices": {
            "0": "No change",
            "1": "Face direction of motion",
            "2": "Face this path_track's angles"
          }
        }
      ],
      "inputs": [
        {
          "name": "ToggleAlternatePath",
          "description": "Cause the track to toggle to/from its alternate path.",
          "type": "void"
        },
        {
          "name": "EnableAlternatePath",
          "description": "Enable the alternate path of the track.",
          "type": "void"
        },
        {
          "name": "DisableAlternatePath",
          "description": "Disable the alternate path of the track.",
          "type": "void"
        },
        {
          "name": "TogglePath",
          "description": "Cause the track to toggle on/off/",
          "type": "void"
        },
        {
          "name": "EnablePath",
          "description": "Enable the track.",
          "type": "void"
        },
        {
          "name": "DisablePath",
          "description": "Disable the track.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnPass",
          "description": "Fired when any entity following this path passes this path_track node.",
          "type": "void"
        },
        {
          "name": "OnTeleport",
          "description": "Fired when any entity following this path teleports directly to this path_track node.",
          "type": "void"
        }
      ]
    },
    {
      "name": "test_traceline",
      "type": "PointClass",
      "description": "A debugging tool for testing tracelines.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Angles"
          ]
        },
        {
          "name": "size",
          "values": [
            -16,
            -16,
            -16,
            16,
            16,
            16
          ]
        },
        {
          "name": "color",
          "values": [
            255,
            255,
            255
          ]
        }
      ]
    },
    {
      "name": "trigger_autosave",
      "type": "SolidClass",
      "description": "A trigger volume that autosaves when the player touches it.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "master",
          "title": "Master",
          "description": "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
        },
        {
          "type": "choices",
          "name": "NewLevelUnit",
          "title": "Force New Level Unit",
          "description": "If set, the save will discard any savedata from previous levels, for the purpose of keeping savegame filesizes down. Can only be safely used if there is no way for the player to return to previous levels.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "float",
          "name": "DangerousTimer",
          "title": "Dangerous Timer",
          "description": "The number of seconds the player must survive before this autosave takes effect.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "MinimumHitPoints",
          "title": "Minumum Hit Points",
          "description": "Don't save dangerous when player has less than this many hitpoints.",
          "deflt": 0
        }
      ]
    },
    {
      "name": "trigger_changelevel",
      "type": "SolidClass",
      "description": "An entity that triggers a level change.\\nPlace an info_landmark in both maps that marks the 'same' location in each map.\\nTIPS & TRICKS: To fire events in the next level, use the OnLevelChange output to turn on an env_global in the current level.  Create a logic_auto in the next level that checks for the state set by the env_global.\\n\\nTo control which entities go through the level transition, create one or more trigger_transitions and give them the same name as the landmark. Any entities within the trigger_transition(s) will go to the next map.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "EnableDisable"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_source",
          "name": "targetname",
          "title": "Name"
        },
        {
          "type": "string",
          "name": "map",
          "title": "New Map Name"
        },
        {
          "type": "target_destination",
          "name": "landmark",
          "title": "Landmark Name"
        }
      ],
      "flags": [
        {
          "title": "Disable Touch",
          "value": 2,
          "enabled": false
        },
        {
          "title": "To Previous Chapter",
          "value": 4,
          "enabled": false
        }
      ],
      "inputs": [
        {
          "name": "ChangeLevel",
          "description": "Cause the level change. Use this when triggering the level change with a button, etc.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnChangeLevel",
          "description": "Fired when the level changes.",
          "type": "void"
        }
      ]
    },
    {
      "name": "trigger_gravity",
      "type": "SolidClass",
      "description": "A trigger volume that changes the gravity on any entity that touches it.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Trigger"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "gravity",
          "title": "Gravity (0-1)",
          "deflt": 1
        }
      ]
    },
    {
      "name": "trigger_playermovement",
      "type": "SolidClass",
      "description": "An entity that can be used to disable player's automatic ducking/unducking when jumping.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Trigger"
          ]
        }
      ],
      "flags": [
        {
          "title": "(OBSOLETE, Uncheck me)",
          "value": 16,
          "enabled": false
        },
        {
          "title": "Disable auto player movement",
          "value": 128,
          "enabled": true
        },
        {
          "title": "Auto-duck while in trigger",
          "value": 2048,
          "enabled": false
        }
      ]
    },
    {
      "name": "trigger_soundscape",
      "type": "SolidClass",
      "description": "Soundscape trigger. It is not necessary to create outputs for this trigger. It automatically will trigger the soundscape referred to by its 'Soundscape' property.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Trigger"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_source",
          "name": "soundscape",
          "title": "Soundscape"
        }
      ]
    },
    {
      "name": "trigger_hurt",
      "type": "SolidClass",
      "description": "A trigger volume that damages entities that touch it.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Trigger",
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "master",
          "title": "Master (Obsolete)",
          "description": "Legacy support: The name of a master entity. If the master hasn't been activated, this entity will not activate."
        },
        {
          "type": "integer",
          "name": "damage",
          "title": "Damage",
          "description": "The amount of damage done to entities that touch this trigger. The damage is done every half-second. See also 'Damage Model' for extra details on how damage can be dealt.",
          "deflt": 10
        },
        {
          "type": "integer",
          "name": "damagecap",
          "title": "Damage Cap",
          "description": "Maximum damage dealt per second. This field is only used if you select the Doubling w/Forgiveness damage model, via the spawnflag.",
          "deflt": 20
        },
        {
          "type": "choices",
          "name": "damagetype",
          "title": "Damage Type",
          "deflt": 0,
          "choices": {
            "0": "GENERIC",
            "1": "CRUSH",
            "2": "BULLET",
            "4": "SLASH",
            "8": "BURN",
            "16": "FREEZE",
            "32": "FALL",
            "64": "BLAST",
            "128": "CLUB",
            "256": "SHOCK",
            "512": "SONIC",
            "1024": "ENERGYBEAM",
            "16384": "DROWN",
            "32768": "PARALYSE",
            "65536": "NERVEGAS",
            "131072": "POISON",
            "262144": "RADIATION",
            "524288": "DROWNRECOVER",
            "1048576": "CHEMICAL",
            "2097152": "SLOWBURN",
            "4194304": "SLOWFREEZE"
          }
        },
        {
          "type": "choices",
          "name": "damagemodel",
          "title": "Damage Model",
          "description": "How damage is dealt. Normal always does the specified amount of damage each half second. Doubling starts with the specified amount and doubles it each time it hurts the toucher. Forgiveness means that if the toucher gets out of the trigger the damage will reset to the specified value. Good for making triggers that are deadly over time without having to cause massive damage on each touch.",
          "deflt": 0,
          "choices": {
            "0": "Normal",
            "1": "Doubling w/forgiveness"
          }
        },
        {
          "type": "choices",
          "name": "nodmgforce",
          "title": "Zero Damage Force",
          "description": "Should the damaged entity receive no physics force from this trigger.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        }
      ],
      "inputs": [
        {
          "name": "SetDamage",
          "description": "Set a new amount of damage for this trigger.",
          "type": "float"
        }
      ],
      "outputs": [
        {
          "name": "OnHurt",
          "description": "Fired whenever this trigger hurts something other than a player.",
          "type": "void"
        },
        {
          "name": "OnHurtPlayer",
          "description": "Fired whenever this trigger hurts a player.",
          "type": "void"
        }
      ]
    },
    {
      "name": "trigger_remove",
      "type": "SolidClass",
      "description": "A trigger volume that removes any entities that touch it. Be careful, removing some entities can cause instability. This is not the same as killing entities. i.e. NPCs removed in this manner will not fire their OnKilled outputs.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Trigger",
            "Targetname"
          ]
        }
      ],
      "outputs": [
        {
          "name": "OnRemove",
          "description": "Fired whenever an entity is removed.",
          "type": "void"
        }
      ]
    },
    {
      "name": "trigger_multiple",
      "type": "SolidClass",
      "description": "A trigger volume that can be triggered multiple times.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Trigger"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "wait",
          "title": "Delay Before Reset",
          "description": "Amount of time, in seconds, after the trigger_multiple has triggered before it can be triggered again. If set to -1, it will never trigger again (in which case you should just use a trigger_once).",
          "deflt": 1
        }
      ],
      "inputs": [
        {
          "name": "TouchTest",
          "description": "Tests if the trigger is being touched and fires an output based on whether the value is true or false.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnTrigger",
          "description": "Fired whenever the trigger is activated.",
          "type": "void"
        },
        {
          "name": "OnTouching",
          "description": "Fired when the TestTouch input is true (something is touching the trigger.)",
          "type": "void"
        },
        {
          "name": "OnNotTouching",
          "description": "Fired when the TestTouch input is not true (nothing is touching the trigger.)",
          "type": "void"
        }
      ]
    },
    {
      "name": "trigger_once",
      "type": "SolidClass",
      "description": "A trigger volume that removes itself after it is triggered once.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "TriggerOnce"
          ]
        }
      ],
      "outputs": [
        {
          "name": "OnTrigger",
          "description": "Fired whenever the trigger is activated.",
          "type": "void"
        }
      ]
    },
    {
      "name": "trigger_look",
      "type": "SolidClass",
      "description": "An entity used to trigger something when the player looks at something. It fires 'OnTrigger' when the player looks at a target entity for the given amount of time, while within the trigger volume. If the player leaves the trigger or looks away from the target entity the clock resets. If the 'Use Velocity instead of facing' spawnflag is checked, the trigger uses the player's velocity instead of the player's view, so it determines whenever the player is moving toward the target entity. Useful for triggering when players are driving a vehicle at something.NOTE: Only designed for single-player game. ",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Trigger"
          ]
        }
      ],
      "flags": [
        {
          "title": "Fire Once",
          "value": 128,
          "enabled": true
        },
        {
          "title": "Use Velocity instead of facing",
          "value": 256,
          "enabled": false
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Look Target",
          "description": "The name of the entity to be looked at."
        },
        {
          "type": "string",
          "name": "LookTime",
          "title": "LookTime",
          "description": "The time, in seconds, that the player must look the target before firing the output. Resets if player leaves trigger, or looks outside the Field of View threshold.",
          "deflt": "0.5"
        },
        {
          "type": "string",
          "name": "FieldOfView",
          "title": "FieldOfView",
          "description": "How close the player has to be looking at the target. 1.0 = straight ahead\\n 0.0 = +/- 90 degrees\\n -1.0 = all directions).",
          "deflt": "0.9"
        },
        {
          "type": "float",
          "name": "Timeout",
          "title": "Timeout",
          "description": "The time, in seconds, to wait after player enters the trigger before firing the OnTimeout output, 0 = never.",
          "deflt": "0"
        }
      ],
      "outputs": [
        {
          "name": "OnTrigger",
          "description": "Fired when the trigger is activated.",
          "type": "void"
        },
        {
          "name": "OnTimeout",
          "description": "Fired after the timeout interval expires if the player never looked at the target.",
          "type": "void"
        }
      ]
    },
    {
      "name": "trigger_push",
      "type": "SolidClass",
      "description": "A trigger volume that pushes entities that touch it.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Trigger"
          ]
        }
      ],
      "properties": [
        {
          "type": "angle",
          "name": "pushdir",
          "title": "Push Direction (Pitch Yaw Roll)",
          "description": "Angles indicating the direction to push touched entities.",
          "deflt": "0 0 0"
        },
        {
          "type": "integer",
          "name": "speed",
          "title": "Speed of Push",
          "description": "The speed at which to push entities away, in inches / second.",
          "deflt": 40
        },
        {
          "type": "float",
          "name": "alternateticksfix",
          "title": "Scale force for alternate ticks",
          "description": "If nonzero, scale the force by this amount when running with alternate ticks. This fixes problems with an overly large force due to the longer frametime on when running with sv_alternateticks 1.",
          "deflt": "0"
        },
        {
          "type": "boolean",
          "name": "OnlyFallingPlayers",
          "title": "Only Falling Players",
          "description": "Only affect players if they are falling (and not pressing jump)",
          "deflt": 0
        },
        {
          "type": "float",
          "name": "FallingSpeedThreshold",
          "title": "Player fall speed",
          "description": "Player must be falling this fast for push to happen. This is not an absolute value. It only takes into account player's velocity on the Z axis.",
          "deflt": "-150"
        }
      ],
      "flags": [
        {
          "title": "Once Only",
          "value": 128,
          "enabled": false
        },
        {
          "title": "Affects Ladders (Half-Life 2)",
          "value": 256,
          "enabled": false
        },
        {
          "title": "Disallow Bots / Correctly account for object mass (used to assume 100Kg) and multiple component physobjs (car, blob...)",
          "value": 4096,
          "enabled": true
        }
      ],
      "inputs": [
        {
          "name": "SetPushDirection",
          "description": "Sets the angles indicating the direction to push touched entities.",
          "type": "vector"
        }
      ]
    },
    {
      "name": "trigger_wind",
      "type": "SolidClass",
      "description": "A trigger volume that pushes physics objects that touch it.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Trigger",
            "Angles"
          ]
        }
      ],
      "properties": [
        {
          "type": "integer",
          "name": "Speed",
          "title": "Speed",
          "description": "The baseline for how hard the wind blows.",
          "deflt": 200
        },
        {
          "type": "integer",
          "name": "SpeedNoise",
          "title": "Speed Noise",
          "description": "Noise added to wind speed +/-",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "DirectionNoise",
          "title": "Direction Noise",
          "description": "Noise added to wind direction.",
          "deflt": 10
        },
        {
          "type": "integer",
          "name": "HoldTime",
          "title": "Hold Time",
          "description": "Baseline for how long to wait before changing wind.",
          "deflt": 0
        },
        {
          "type": "integer",
          "name": "HoldNoise",
          "title": "Hold Noise",
          "description": "Noise added to how long to wait before changing wind.",
          "deflt": 0
        }
      ],
      "inputs": [
        {
          "name": "SetSpeed",
          "description": "Set the baseline for how hard the wind blows.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "trigger_impact",
      "type": "SolidClass",
      "description": "A trigger volume that can be told to push all physics objects that are inside of it in the direction specified by this trigger's angles.\\nAlso outputs the force at the time of impact for anyone else that wants to use it.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Origin",
            "Angles"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "Magnitude",
          "title": "Magnitude",
          "description": "The strength of the impact. Negative values reverse the direction.",
          "deflt": 200
        },
        {
          "type": "float",
          "name": "noise",
          "title": "Noise",
          "description": "The amount of directional noise (0-1). 0 = no noise, 1 = random direction.",
          "deflt": "0.1"
        },
        {
          "type": "float",
          "name": "viewkick",
          "title": "Viewkick",
          "description": "The amount to kick player's view if the player is in the trigger.  Proportional to magnitude (0-1).",
          "deflt": "0.05"
        }
      ],
      "inputs": [
        {
          "name": "Impact",
          "description": "Fire the impact, pushing all entities within the volume.",
          "type": "float"
        },
        {
          "name": "SetMagnitude",
          "description": "Set the magnitude of the impact.",
          "type": "float"
        }
      ],
      "outputs": [
        {
          "name": "ImpactForce",
          "description": "Fired after an impact. The parameter passed along is the force of the impact that was generated.",
          "type": "string"
        }
      ]
    },
    {
      "name": "trigger_proximity",
      "type": "SolidClass",
      "description": "Measures the distance of the player within the trigger volume from a given point (and within a given radius). The NearestPlayerDistance output will be 0 when the player is at the center point, and 1 when the player is at the radius.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Trigger"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "measuretarget",
          "title": "Point to Measure From",
          "description": "The name of a target entity who's origin is the point to measure the player's distance from."
        },
        {
          "type": "string",
          "name": "radius",
          "title": "Radius to measure within",
          "description": "The radius to which the distance should be mapped. If the player is outside the radius he will be ignored.",
          "deflt": 256
        }
      ],
      "outputs": [
        {
          "name": "NearestEntityDistance",
          "description": "Fired continuously when entities are touching the trigger volume. The output parameter is the distance from the Point to Measure From to the nearest entity that passed the trigger filters. The distance is mapped to the radius distance, so it will be 0 when the entity is on the point, and 1 when the entity is at the edge of the radius.",
          "type": "integer"
        }
      ]
    },
    {
      "name": "trigger_teleport",
      "type": "SolidClass",
      "description": "A trigger volume that teleports entities that touch it. Entities are teleported to the Remote Destination, and have their angles set to that of the Remote Destination's. If a Local Destination Landmark is specified, teleported entities are offset from the target by their initial offset from the landmark, and their angles are left alone.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Trigger"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Remote Destination",
          "description": "The entity specifying the point to which entities should be teleported."
        },
        {
          "type": "target_destination",
          "name": "landmark",
          "title": "Local Destination Landmark",
          "description": "If specified, then teleported entities are offset from the target by their initial offset from the landmark."
        }
      ],
      "flags": [
        {
          "title": "Preserve angles even when a local landmark is not specified AND only allow clients in vehicles",
          "value": 32,
          "enabled": false
        }
      ]
    },
    {
      "name": "trigger_transition",
      "type": "SolidClass",
      "description": "A volume that's used to control which entities go through the level transition. Create one or more trigger_transitions and give them the same name as the changelevel landmark. Any entities within the trigger_transition(s) will go to the next map.See trigger_changelevel for more info.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ]
    },
    {
      "name": "trigger_serverragdoll",
      "type": "SolidClass",
      "description": "A volume that forces any NPC inside it to create a server side ragdoll instead of a client one.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ]
    },
    {
      "name": "ai_speechfilter",
      "type": "PointClass",
      "description": "An entity that can be used to control the idle speech patterns of a set of NPCs.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "ResponseContext",
            "EnableDisable"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "subject",
          "title": "Subject(s)",
          "description": "This is the NPC(s) whose speech we're filtering. May be a targetname or a classname.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "IdleModifier",
          "title": "Idle modifier.",
          "description": "Multiplier to the percentage chance that our NPC(s) will idle speak. Set to 0 to prevent all idle speech.",
          "deflt": "1.0"
        },
        {
          "type": "choices",
          "name": "NeverSayHello",
          "title": "Greet Player?",
          "description": "If set to Yes, our NPC(s) won't greet the player when they first meet him.",
          "deflt": 0,
          "choices": {
            "0": "Yes",
            "1": "No"
          }
        }
      ],
      "inputs": [
        {
          "name": "SetIdleModifier",
          "description": "Allows designers to change the idle modifier at runtime",
          "type": "float"
        }
      ]
    },
    {
      "name": "water_lod_control",
      "type": "PointClass",
      "description": "An entity used to control the LOD behavior of any water in the map. If your map has water, this entity is required.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "iconsprite",
          "values": [
            "editor/waterlodcontrol.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "cheapwaterstartdistance",
          "title": "Start Transition to Cheap Water",
          "description": "This is the distance from the camera that water will start transitioning to cheap water, in inches.",
          "deflt": 1000
        },
        {
          "type": "float",
          "name": "cheapwaterenddistance",
          "title": "End Transition to Cheap Water",
          "description": "This is the distance from the camera that water will finish transitioning to cheap water, in inches.",
          "deflt": 2000
        }
      ],
      "inputs": [
        {
          "name": "SetCheapWaterStartDistance",
          "description": "Set the distance that water starts transitioning to cheap water.",
          "type": "float"
        },
        {
          "name": "SetCheapWaterEndDistance",
          "description": "Set the distance that water finishes transitioning to cheap water.",
          "type": "float"
        }
      ]
    },
    {
      "name": "info_camera_link",
      "type": "PointClass",
      "description": "An entity that can use point_cameras to render images for materials used by entities. To author the material, use the special identifier _rt_Camera for the $baseTexture (or whatever texture you want, like envmap, etc.) in the .vmt then connect the 'target' field to the entity which uses that material, and the 'PointCamera' field to the point_camera you want to have appear on that entity's material",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "target",
          "title": "Entity Whose Material Uses _rt_camera"
        },
        {
          "type": "target_destination",
          "name": "PointCamera",
          "title": "Camera Name",
          "description": "The name of a point_camera entity in the map that the material should be rendered from."
        }
      ],
      "inputs": [
        {
          "name": "SetCamera",
          "description": "Set the camera to use. The parameter should be the name of a point_camera entity in the map.",
          "type": "string"
        }
      ]
    },
    {
      "name": "logic_measure_movement",
      "type": "PointClass",
      "description": "An entity that can measure the movement of an entity relative to another entity and apply that movement to a third entity.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_destination",
          "name": "MeasureTarget",
          "title": "Entity to Measure",
          "description": "Entity whose movement you want to measure.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "MeasureReference",
          "title": "Measure Reference",
          "description": "The movement of Entity to Measure will be measured relative to this entity.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "Target",
          "title": "Entity to Move",
          "description": "This entity will be moved to mimic the motions of Entity to Measure.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "TargetReference",
          "title": "Movement Reference",
          "description": "The Entity to Move will move relative to this entity.",
          "deflt": ""
        },
        {
          "type": "float",
          "name": "TargetScale",
          "title": "Movement scale",
          "description": "A scale to divide the measured movements by, before applying those movements to the Entity to Move. 1 = target entity moves as much as the measured entity, 2 = target entity moves half as far as the measured entity, and 0.5 = target entity moves twice as far as the measured entity.",
          "deflt": "1"
        },
        {
          "type": "choices",
          "name": "MeasureType",
          "title": "Measurement Type",
          "deflt": 0,
          "choices": {
            "0": "Position",
            "1": "Eye position"
          }
        }
      ],
      "inputs": [
        {
          "name": "SetMeasureTarget",
          "description": "Set the Entity to Measure, whose movement should be measured.",
          "type": "string"
        },
        {
          "name": "SetMeasureReference",
          "description": "Set the Measure Reference entity.",
          "type": "string"
        },
        {
          "name": "Target",
          "description": "Set the Entity to Move, which will be moved to mimic the measured entity.",
          "type": "string"
        },
        {
          "name": "SetTargetReference",
          "description": "Set the Movement Reference entity.",
          "type": "string"
        },
        {
          "name": "SetTargetScale",
          "description": "Set the scale to divide the measured movements by.",
          "type": "float"
        },
        {
          "name": "Enable",
          "description": "Enable the logic_measure_movement.",
          "type": "void"
        },
        {
          "name": "Disable",
          "description": "Disable the logic_measure_movement.",
          "type": "void"
        }
      ]
    },
    {
      "name": "npc_furniture",
      "type": "PointClass",
      "description": "An entity used for non-NPCs that need to synchronise their animation with an NPC in a scripted_sequence. Usually a pieceof furniture or door that an NPC needs to manipulate within a scripted_sequence.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BaseNPC",
            "Parentname"
          ]
        },
        {
          "name": "studio",
          "values": []
        }
      ],
      "properties": [
        {
          "type": "studio",
          "name": "model",
          "title": "Model"
        }
      ],
      "inputs": [
        {
          "name": "DisablePlayerCollision",
          "description": "Disable collisions against the player.",
          "type": "void"
        },
        {
          "name": "EnablePlayerCollision",
          "description": "Enable collisions against the player.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_credits",
      "type": "PointClass",
      "description": "An entity to control the rolling credits.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "inputs": [
        {
          "name": "RollCredits",
          "description": "Start the intro credits rolling.",
          "type": "void"
        },
        {
          "name": "RollOutroCredits",
          "description": "Start the outro credits rolling.",
          "type": "void"
        },
        {
          "name": "ShowLogo",
          "description": "Show the HL2 logo.",
          "type": "void"
        }
      ],
      "outputs": [
        {
          "name": "OnCreditsDone",
          "description": "Fired when the credits having finished rolling.",
          "type": "void"
        }
      ]
    },
    {
      "name": "material_modify_control",
      "type": "PointClass",
      "description": "An entity that can be used to directly control material vars. To use it, you need to read the .vmt of the material you intend to change. Parent this entity to a brush model entity who's material you want to control.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Parentname",
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "materialName",
          "title": "Material to modify."
        },
        {
          "type": "string",
          "name": "materialVar",
          "title": "Material variable to modify."
        }
      ],
      "inputs": [
        {
          "name": "SetMaterialVar",
          "description": "Fire to modify a material variable. The argument is the value to set the variable to.",
          "type": "string"
        },
        {
          "name": "SetMaterialVarToCurrentTime",
          "description": "This sets the material variable to the current time on the server.",
          "type": "void"
        },
        {
          "name": "StartAnimSequence",
          "description": "Force an animated material with the MaterialModifyAnimated proxy to play a set of animation frames. Format is: <Frame Start> <Frame End> <Frame Rate> <Loop>\\nSetting <Frame End> to -1 uses the last frame of the texture. <Loop> should be 1 or 0.",
          "type": "string"
        },
        {
          "name": "StartFloatLerp",
          "description": "Force a material with the MaterialModifyAnimated proxy to lerp a material var between two floating point values. Format is: <Start Value> <End Value> <Transition Time> <Loop>\\n<Loop> should be 1 or 0.",
          "type": "string"
        }
      ]
    },
    {
      "name": "point_devshot_camera",
      "type": "PointClass",
      "description": "An entity used by the -makedevshots system, which automatically takes screenshots at the position of every devshot camera in the level.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Angles"
          ]
        },
        {
          "name": "studioprop",
          "values": [
            "models/editor/camera.mdl"
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "cameraname",
          "title": "Camera Name",
          "description": "Used as the name of the directory to store screenshots from this camera. Must be unique within the level.",
          "deflt": ""
        },
        {
          "type": "integer",
          "name": "FOV",
          "title": "Camera FOV",
          "description": "FOV of this camera.",
          "deflt": 75
        }
      ]
    },
    {
      "name": "logic_playerproxy",
      "type": "PointClass",
      "description": "An entity that is used to relay inputs/ouputs to the player and back to the world.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "DamageFilter"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "outputs": [
        {
          "name": "OnFlashlightOn",
          "description": "Fired when the player turns on his flashlight. This output has the value of how much energy the player had when this happened [0..1].",
          "type": "float"
        },
        {
          "name": "OnFlashlightOff",
          "description": "Fired when the player turns off his flashlight. This output has the value of how much energy the player had when this happened [0..1].",
          "type": "float"
        },
        {
          "name": "PlayerHealth",
          "description": "The player's current health value.",
          "type": "integer"
        },
        {
          "name": "PlayerMissedAR2AltFire",
          "description": "Player fired an AR2 combine ball that didn't kill any enemies.",
          "type": "void"
        },
        {
          "name": "PlayerHasAmmo",
          "description": "Fired by request if the player has any ammo.",
          "type": "void"
        },
        {
          "name": "PlayerHasNoAmmo",
          "description": "Fired by request if the player doesn't have any ammo.",
          "type": "void"
        },
        {
          "name": "PlayerDied",
          "description": "Fires when the player dies.",
          "type": "void"
        }
      ],
      "inputs": [
        {
          "name": "RequestPlayerHealth",
          "description": "Requests the current player's health from the proxy. This will fire the PlayerHealth output with the value.",
          "type": "void"
        },
        {
          "name": "SetFlashlightSlowDrain",
          "description": "Puts the player's flashlight in slow-power-drain mode (for Episodic darkness)",
          "type": "void"
        },
        {
          "name": "SetFlashlightNormalDrain",
          "description": "Puts the player's flashlight to default power drain",
          "type": "void"
        },
        {
          "name": "SetPlayerHealth",
          "description": "Sets the player's health to this value.",
          "type": "integer"
        },
        {
          "name": "RequestAmmoState",
          "description": "Request the ammo state of the player. It will fire PlayerHasAmmo or PlayerHasNoAmmo outputs.",
          "type": "void"
        },
        {
          "name": "LowerWeapon",
          "description": "Lowers the players weapon.",
          "type": "void"
        },
        {
          "name": "EnableCappedPhysicsDamage",
          "description": "Cause player to take less damage from physics objects, and never more than 30 points from any individual strike.",
          "type": "void"
        },
        {
          "name": "DisableCappedPhysicsDamage",
          "description": "Undo effects of EnableCappedPhysicsDamage",
          "type": "void"
        },
        {
          "name": "SetLocatorTargetEntity",
          "description": "Set the entity that the HUD locator should track. (Usually a vehicle)",
          "type": "string"
        }
      ]
    },
    {
      "name": "env_spritetrail",
      "type": "PointClass",
      "description": "A magical trail you can parent to anything you heart desires.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Parentname",
            "Targetname"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "float",
          "name": "lifetime",
          "title": "Lifetime",
          "deflt": "0.5"
        },
        {
          "type": "float",
          "name": "startwidth",
          "title": "Start Width",
          "deflt": "8.0"
        },
        {
          "type": "float",
          "name": "endwidth",
          "title": "End Width",
          "deflt": "1.0"
        },
        {
          "type": "string",
          "name": "spritename",
          "title": "Sprite Name",
          "deflt": "sprites/bluelaser1.vmt"
        },
        {
          "type": "integer",
          "name": "renderamt",
          "title": "FX Amount (0 - 255)",
          "description": "The FX amount is used by the selected Render Mode.",
          "deflt": 255
        },
        {
          "type": "color255",
          "name": "rendercolor",
          "title": "FX Color (R G B)",
          "description": "The FX color is used by the selected Render Mode.",
          "deflt": "255 255 255"
        },
        {
          "type": "choices",
          "name": "rendermode",
          "title": "Render Mode",
          "deflt": 5,
          "choices": {
            "0": "Normal",
            "4": "Solid",
            "5": "Additive"
          }
        }
      ]
    },
    {
      "name": "env_projectedtexture",
      "type": "PointClass",
      "description": "Projected texture entity.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname",
            "Parentname",
            "Angles"
          ]
        },
        {
          "name": "studio",
          "values": [
            "models/editor/cone_helper.mdl"
          ]
        },
        {
          "name": "frustum",
          "values": [
            "lightfov",
            "nearz",
            "farz",
            "lightcolor",
            -1
          ]
        }
      ],
      "flags": [
        {
          "title": "Enabled",
          "value": 1,
          "enabled": true
        }
      ],
      "properties": [
        {
          "type": "choices",
          "name": "style",
          "title": "Appearance",
          "deflt": 0,
          "choices": {
            "0": "Normal",
            "1": "Flicker A",
            "2": "Slow, strong pulse",
            "3": "Candle A",
            "4": "Fast strobe",
            "5": "Gentle pulse",
            "6": "Flicker B",
            "7": "Candle B",
            "8": "Candle C",
            "9": "Slow strobe",
            "10": "Fluorescent flicker",
            "11": "Slow pulse, noblack"
          }
        },
        {
          "type": "string",
          "name": "pattern",
          "title": "Custom Appearance",
          "description": "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light.",
          "deflt": ""
        },
        {
          "type": "target_destination",
          "name": "target",
          "title": "Aim Target",
          "description": "If set, the projected texture will automatically aim at the given entity"
        },
        {
          "type": "float",
          "name": "lightfov",
          "title": "FOV",
          "description": "FOV",
          "deflt": "90.0"
        },
        {
          "type": "float",
          "name": "nearz",
          "title": "NearZ",
          "description": "Near Z for projected texture. This only affects shadows",
          "deflt": "4.0"
        },
        {
          "type": "float",
          "name": "farz",
          "title": "FarZ",
          "description": "Far Z for projected texture. This affects shadows AND the light's range",
          "deflt": "750.0"
        },
        {
          "type": "choices",
          "name": "enableshadows",
          "title": "Enable Shadows",
          "description": "Enables/disables shadows from this projected texture.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "shadowquality",
          "title": "Shadow Quality",
          "description": "Quality of shadows.",
          "deflt": 1,
          "choices": {
            "0": "Low",
            "1": "High"
          }
        },
        {
          "type": "choices",
          "name": "lightonlytarget",
          "title": "Light Only Target",
          "description": "Limit flashlight effect to only effect target entity.",
          "deflt": 0,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "choices",
          "name": "lightworld",
          "title": "Light World",
          "description": "Control whether flashlight effects static world geometry.",
          "deflt": 1,
          "choices": {
            "0": "No",
            "1": "Yes"
          }
        },
        {
          "type": "color255",
          "name": "lightcolor",
          "title": "Light Color",
          "description": "Light Color RGB-Intensity",
          "deflt": "255 255 255 200"
        },
        {
          "type": "integer",
          "name": "cameraspace",
          "title": "Camera Space",
          "description": "Angles are interpreted as being relative to camera.",
          "deflt": 0
        }
      ],
      "inputs": [
        {
          "name": "TurnOn",
          "description": "Turn on the texture",
          "type": "void"
        },
        {
          "name": "TurnOff",
          "description": "Turn off the texture",
          "type": "void"
        },
        {
          "name": "SetFOV",
          "description": "Set FOV",
          "type": "float"
        },
        {
          "name": "SpotlightTexture",
          "description": "Set the spotlight texture",
          "type": "string"
        },
        {
          "name": "EnableShadows",
          "description": "Set the if shadows are enabled",
          "type": "bool"
        },
        {
          "name": "SetLightStyle",
          "description": "Change the lightstyle (see Appearance field for possible values).",
          "type": "integer"
        },
        {
          "name": "SetPattern",
          "description": "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light.",
          "type": "string"
        },
        {
          "name": "SetNearZ",
          "description": "Set the near Z plane for this projected texture",
          "type": "integer"
        },
        {
          "name": "SetFarZ",
          "description": "Set the far Z plane for this projected texture",
          "type": "integer"
        },
        {
          "name": "LightWorld",
          "description": "Sets whether the projectedtexture should light the world or not",
          "type": "bool"
        },
        {
          "name": "Target",
          "description": "Sets the target entity for this projected texture to follow",
          "type": "target_destination"
        },
        {
          "name": "LightOnlyTarget",
          "description": "Sets whether this projected texture should only apply light to the target entity. This will still light the world",
          "type": "bool"
        },
        {
          "name": "LightColor",
          "description": "Sets the color of the projected texture",
          "type": "string"
        }
      ]
    },
    {
      "name": "func_reflective_glass",
      "type": "SolidClass",
      "description": "Used to produce perfectly reflective glass that renders world + entities. Typically, you want your glass brush to have nodraw on all non-reflective surfaces and you want to use a shader like lightmappedreflective in your material applied to the non-nodraw surfaces. See hl2/materials/glass/reflectiveglass001.vmt for an example. NOTE: currently, you cannot use reflective glass in scenes with water, and you can only have 1 reflective glass in your view frustum ( + pvs ) at a time.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "func_brush"
          ]
        }
      ]
    },
    {
      "name": "env_particle_performance_monitor",
      "type": "PointClass",
      "description": "An entity for turning on and off measuring and display of particle throughput.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Targetname"
          ]
        }
      ],
      "inputs": [
        {
          "name": "TurnOnDisplay",
          "description": "Turn on display of particle simulation benchmark",
          "type": "void"
        },
        {
          "name": "TurnOffDisplay",
          "description": "Turn off display of particle simulation benchmark",
          "type": "void"
        },
        {
          "name": "StartMeasuring",
          "description": "Start measuring particle simulation speed",
          "type": "void"
        },
        {
          "name": "StopMeasuring",
          "description": "Stop measuring particle simulation speed",
          "type": "void"
        }
      ]
    },
    {
      "name": "npc_puppet",
      "type": "PointClass",
      "description": "Puppet entity that mimics the animations of a target NPC.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "BaseNPC",
            "Targetname",
            "Parentname",
            "Studiomodel"
          ]
        },
        {
          "name": "studioprop",
          "values": []
        }
      ],
      "properties": [
        {
          "type": "target_source",
          "name": "animationtarget",
          "title": "Animation target",
          "deflt": ""
        },
        {
          "type": "string",
          "name": "attachmentname",
          "title": "Target attachment point name",
          "deflt": ""
        }
      ],
      "inputs": [
        {
          "name": "SetAnimationTarget",
          "description": "Set the animation target to use. An empty string will disable the puppet.",
          "type": "string"
        }
      ]
    },
    {
      "name": "point_gamestats_counter",
      "type": "PointClass",
      "description": "Generic game statistics counter.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Origin",
            "Targetname",
            "EnableDisable"
          ]
        },
        {
          "name": "size",
          "values": [
            -2,
            -2,
            -2,
            2,
            2,
            2
          ]
        },
        {
          "name": "color",
          "values": [
            0,
            255,
            0
          ]
        }
      ],
      "properties": [
        {
          "type": "string",
          "name": "Name",
          "title": "Name of statistic counter"
        }
      ],
      "inputs": [
        {
          "name": "SetName",
          "description": "Changes name of statistic counter",
          "type": "string"
        },
        {
          "name": "Increment",
          "description": "Increments named statistic counter by specified value",
          "type": "float"
        }
      ]
    },
    {
      "name": "func_instance",
      "type": "PointClass",
      "description": "An entity for placing an instance of a map file.  You may translate and rotate this entity. You can use the replace keys to do parameter changes on the instance contents.  In a $ at the beginning of a variable name.  Then just use the $variable name inside of the instance contents on any value portion of a key/value pair.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "Angles"
          ]
        },
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        },
        {
          "name": "instance",
          "values": []
        }
      ],
      "properties": [
        {
          "type": "target_source",
          "name": "targetname",
          "title": "Fix Up Name",
          "description": "The name that all entities will be fixed up with based upon the fix up style."
        },
        {
          "type": "instance_file",
          "name": "file",
          "title": "VMF Filename",
          "description": "This indicates a map file relative to the map's file name"
        },
        {
          "type": "choices",
          "name": "fixup_style",
          "title": "Entity Name Fix Up",
          "description": "Fixup style for instanced entity names.  Uses the 'Fix Up Name' field.",
          "deflt": 0,
          "choices": {
            "0": "Prefix",
            "1": "Postfix",
            "2": "None"
          }
        },
        {
          "type": "instance_variable",
          "name": "replace01",
          "title": "Replace",
          "description": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
        },
        {
          "type": "instance_variable",
          "name": "replace02",
          "title": "Replace",
          "description": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
        },
        {
          "type": "instance_variable",
          "name": "replace03",
          "title": "Replace",
          "description": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
        },
        {
          "type": "instance_variable",
          "name": "replace04",
          "title": "Replace",
          "description": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
        },
        {
          "type": "instance_variable",
          "name": "replace05",
          "title": "Replace",
          "description": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
        },
        {
          "type": "instance_variable",
          "name": "replace06",
          "title": "Replace",
          "description": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
        },
        {
          "type": "instance_variable",
          "name": "replace07",
          "title": "Replace",
          "description": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
        },
        {
          "type": "instance_variable",
          "name": "replace08",
          "title": "Replace",
          "description": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
        },
        {
          "type": "instance_variable",
          "name": "replace09",
          "title": "Replace",
          "description": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
        },
        {
          "type": "instance_variable",
          "name": "replace10",
          "title": "Replace",
          "description": "This is a replacement parameter.  It goes in the form of $variable value.  All entities inside of that instance that have $variable somewhere will be replaced with the value contents.  Example: $color 255 0 0"
        }
      ]
    },
    {
      "name": "func_instance_parms",
      "type": "PointClass",
      "description": "Place one copy of this entity inside of an instance.  Whenever you add a $parameter for the instance, get the properties of this entity.  It will auto-populate it with the variables and allow you to indicate the variable type.",
      "parameters": [
        {
          "name": "size",
          "values": [
            -8,
            -8,
            -8,
            8,
            8,
            8
          ]
        }
      ],
      "properties": [
        {
          "type": "instance_parm",
          "name": "parm1",
          "title": "Parm",
          "description": "This is a parameter.  It goes in the form of $variable type."
        },
        {
          "type": "instance_parm",
          "name": "parm2",
          "title": "Parm",
          "description": "This is a parameter.  It goes in the form of $variable type."
        },
        {
          "type": "instance_parm",
          "name": "parm3",
          "title": "Parm",
          "description": "This is a parameter.  It goes in the form of $variable type."
        },
        {
          "type": "instance_parm",
          "name": "parm4",
          "title": "Parm",
          "description": "This is a parameter.  It goes in the form of $variable type."
        },
        {
          "type": "instance_parm",
          "name": "parm5",
          "title": "Parm",
          "description": "This is a parameter.  It goes in the form of $variable type."
        },
        {
          "type": "instance_parm",
          "name": "parm6",
          "title": "Parm",
          "description": "This is a parameter.  It goes in the form of $variable type."
        },
        {
          "type": "instance_parm",
          "name": "parm7",
          "title": "Parm",
          "description": "This is a parameter.  It goes in the form of $variable type."
        },
        {
          "type": "instance_parm",
          "name": "parm8",
          "title": "Parm",
          "description": "This is a parameter.  It goes in the form of $variable type."
        },
        {
          "type": "instance_parm",
          "name": "parm9",
          "title": "Parm",
          "description": "This is a parameter.  It goes in the form of $variable type."
        },
        {
          "type": "instance_parm",
          "name": "parm10",
          "title": "Parm",
          "description": "This is a parameter.  It goes in the form of $variable type."
        }
      ]
    },
    {
      "name": "func_instance_io_proxy",
      "type": "PointClass",
      "description": "Place one copy of this entity inside of an instance.  Sending messages to entities inside the instance from the Proxy's OnProxyRelay output will allow you to trigger these entities from outside the instance by sending messages to the func_instance.  Send the ProxyRelay message from entities inside the instance to the proxy and you will be able to use these events to send messages to other entities outside the instance from the func_instance. NOTE: The instance, the proxy, and all entities involved should be named descriptively.",
      "parameters": [
        {
          "name": "iconsprite",
          "values": [
            "editor/func_instance_parms.vmt"
          ]
        }
      ],
      "properties": [
        {
          "type": "target_source",
          "name": "targetname",
          "title": "Name",
          "description": "The name that other entities refer to this entity by."
        }
      ],
      "inputs": [
        {
          "name": "ProxyRelay",
          "description": "This message will get relayed and will be available from the instance.",
          "type": "string"
        }
      ],
      "outputs": [
        {
          "name": "OnProxyRelay",
          "description": "A message from outside can trigger this to cause something to happen in the instance.",
          "type": "void"
        }
      ]
    },
    {
      "name": "env_sprite_clientside",
      "type": "PointClass",
      "description": "A env_sprite thats only clientside.",
      "parameters": [
        {
          "name": "base",
          "values": [
            "env_sprite",
            "Angles"
          ]
        },
        {
          "name": "size",
          "values": [
            -2,
            -2,
            -2,
            2,
            2,
            2
          ]
        },
        {
          "name": "sprite",
          "values": []
        },
        {
          "name": "color",
          "values": [
            20,
            140,
            20
          ]
        }
      ]
    }
  ]
}